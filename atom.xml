<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>F l o w . . .</title>
  
  
  <link href="http://epiapoq.github.io/atom.xml" rel="self"/>
  
  <link href="http://epiapoq.github.io/"/>
  <updated>2021-04-02T13:29:43.732Z</updated>
  <id>http://epiapoq.github.io/</id>
  
  <author>
    <name>Epiapoq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to connect COMPIM (Proteus) with Serial Monitor (Arduino IDE)</title>
    <link href="http://epiapoq.github.io/2021/04/02/compim/"/>
    <id>http://epiapoq.github.io/2021/04/02/compim/</id>
    <published>2021-04-02T11:01:17.000Z</published>
    <updated>2021-04-02T13:29:43.732Z</updated>
    
    <content type="html"><![CDATA[<p>This is a tutorial about how to connect Proteus with Arduino IDE by serial port. Take BCD Adder for an instance.</p><ol><li>Install <a href="https://www.eltima.com/vspd-post-download.html">virtual serial port driver</a> for creating virtual serial port pair.</li></ol><p><img src="https://img2020.cnblogs.com/blog/2305487/202104/2305487-20210402200929550-445038745.png" alt="fig.1 VSPD"></p><p><img src="https://img2020.cnblogs.com/blog/2305487/202104/2305487-20210402201510214-1176374257.png" alt="fig.2 Instrument Manager"></p><ol start="2"><li>Pick “COMPIM” component in Proteus and setup baud rate and port number, so does “VIRTUAL TERMINAL”.</li></ol><p><img src="https://img2020.cnblogs.com/blog/2305487/202104/2305487-20210402202439859-2030822310.png" alt="fig.3 COMPIM"></p><p><img src="https://img2020.cnblogs.com/blog/2305487/202104/2305487-20210402202837242-1281941773.png" alt="fig.4 VIRTUAL TERMINAL"></p><ol start="3"><li>Setup Serial Monitor in Arduino IDE.</li></ol><p><img src="https://img2020.cnblogs.com/blog/2305487/202104/2305487-20210402204142039-573710510.png" alt="fig.5 Serial Monitor"></p><p>Now run simulation in Proteus and input addend in Serial Monitor in Arduino IDE. The data will be transmitted and received by COM1/COM2.</p><p><img src="https://img2020.cnblogs.com/blog/2305487/202104/2305487-20210402205033277-1003481110.gif" alt="fig.6 Result"></p><hr><p><font color=888888><em>Demo codes:</em></font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    LAB2: Addends generator for FPGA BCD adder</span></span><br><span class="line"><span class="comment">    Programming &amp; Hardware By Epiapoq</span></span><br><span class="line"><span class="comment">    Started 29-03-2021</span></span><br><span class="line"><span class="comment">    Modified 30-03-2021</span></span><br><span class="line"><span class="comment">    Version 1.0</span></span><br><span class="line"><span class="comment">    Reference:</span></span><br><span class="line"><span class="comment">    https://github.com/whatuptkhere/paralleloslam/blob/master/Paralleloslam.ino</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> firstByte = <span class="number">0</span>; <span class="comment">// the first addend from serial port</span></span><br><span class="line"><span class="keyword">int</span> secondByte = <span class="number">0</span>; <span class="comment">// the second addend from serial port</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// the sum</span></span><br><span class="line"><span class="keyword">int</span> cb = <span class="number">0</span>; <span class="comment">// check bit, which is used to check the number of the incomming addend</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* each addend of BCD adder consists of only 4 bits, so here </span></span><br><span class="line"><span class="comment">just define the lower nibble of the firstByte or secondByte */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> firstByte_0 = <span class="number">4</span>; <span class="comment">// LSB of first addend</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> firstByte_1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> firstByte_2 = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> firstByte_3 = <span class="number">7</span>; <span class="comment">// MSB of first addend</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> secondByte_0 = <span class="number">8</span>; <span class="comment">// LSB of second addend</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> secondByte_1 = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> secondByte_2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> secondByte_3 = <span class="number">11</span>; <span class="comment">// MSB of second addend</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Serial.<span class="built_in">begin</span>(<span class="number">9600</span>); <span class="comment">// open serial port, set data rate to 9600 bps</span></span><br><span class="line">    <span class="built_in">pinMode</span>(firstByte_0, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(firstByte_1, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(firstByte_2, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(firstByte_3, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(secondByte_0, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(secondByte_1, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(secondByte_2, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(secondByte_3, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Serial.<span class="built_in">available</span>() &gt; <span class="number">0</span> &amp;&amp; (cb == <span class="number">0</span>)) &#123; <span class="comment">// read the first addend</span></span><br><span class="line">        firstByte = Serial.<span class="built_in">read</span>() - <span class="number">48</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* serial in from monitor and parallel out to FPGA */</span></span><br><span class="line">        <span class="built_in">digitalWrite</span>(firstByte_0, firstByte &amp; <span class="number">0x01</span>); <span class="comment">// send LSB of first addend</span></span><br><span class="line">        <span class="built_in">digitalWrite</span>(firstByte_1, firstByte &amp; <span class="number">0x02</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(firstByte_2, firstByte &amp; <span class="number">0x04</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(firstByte_3, firstByte &amp; <span class="number">0x08</span>);</span><br><span class="line">        </span><br><span class="line">        Serial.<span class="built_in">print</span>(firstByte);</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&#x27;+&#x27;</span>);</span><br><span class="line">        cb = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((Serial.<span class="built_in">available</span>() &gt; <span class="number">0</span>) &amp;&amp; (cb == <span class="number">1</span>)) &#123; <span class="comment">// read the second addend</span></span><br><span class="line">        secondByte = Serial.<span class="built_in">read</span>() - <span class="number">48</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* serial in from monitor and parallel out to FPGA */</span></span><br><span class="line">        <span class="built_in">digitalWrite</span>(secondByte_0, secondByte &amp; <span class="number">0x01</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(secondByte_1, secondByte &amp; <span class="number">0x02</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(secondByte_2, secondByte &amp; <span class="number">0x04</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(secondByte_3, secondByte &amp; <span class="number">0x08</span>);</span><br><span class="line">        </span><br><span class="line">        Serial.<span class="built_in">print</span>(secondByte);</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        sum = firstByte + secondByte;</span><br><span class="line">        Serial.<span class="built_in">print</span>(sum); </span><br><span class="line">        Serial.<span class="built_in">println</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        cb = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is a tutorial about how to connect Proteus with Arduino IDE by serial port. Take BCD Adder for an instance.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a </summary>
      
    
    
    
    
    <category term="Arduino" scheme="http://epiapoq.github.io/tags/Arduino/"/>
    
    <category term="Proteus" scheme="http://epiapoq.github.io/tags/Proteus/"/>
    
    <category term="Curriculum Integration" scheme="http://epiapoq.github.io/tags/Curriculum-Integration/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://epiapoq.github.io/2021/04/02/hello-world/"/>
    <id>http://epiapoq.github.io/2021/04/02/hello-world/</id>
    <published>2021-04-02T07:32:32.436Z</published>
    <updated>2021-04-02T07:32:32.436Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
