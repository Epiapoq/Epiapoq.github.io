<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>F l o w . . .</title>
  
  
  <link href="http://epiapoq.github.io/atom.xml" rel="self"/>
  
  <link href="http://epiapoq.github.io/"/>
  <updated>2021-07-28T08:51:27.393Z</updated>
  <id>http://epiapoq.github.io/</id>
  
  <author>
    <name>Epiapoq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Professional Project Process -- Pro^3</title>
    <link href="http://epiapoq.github.io/2021/07/28/project-process/"/>
    <id>http://epiapoq.github.io/2021/07/28/project-process/</id>
    <published>2021-07-28T05:53:23.000Z</published>
    <updated>2021-07-28T08:51:27.393Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4">本文介绍了电气层（OSI Physical Layer）硬件接口实现电平匹配全过程——以FPGA+Arduino实验平台项目开发为例。</font><span id="more"></span></p><p><img src="/2021/07/28/project-process/step-mxo2.png"></p><p><font size="4">2021-1学期给18级留学生讲授可编程逻辑器件课程期间，针对学生特点，以实验为主体，主要实验设备为Step-MXO2和Arduino Uno，通过二者之间的配合，极大丰富了该课程的内涵与外延，开发了如串行通信加法器、带频率显示的时钟分频器、DDS正弦信号发生器和FSK调制器等与通信概念密切相关的实验，体现了与传统“点灯”类可编程课程的显著不同。课程深受留学生欢迎，64学时课程自愿上成了96学时（每次2学时实验结束留学生都会自觉延长1学时以完成全部内容）。</font></p><p><font size="4">要实现Step-MXO2和Arduino Uno的连通，第一要务自然是满足二者输入输出之间的电平匹配，笔者将在此文中详细阐明整个设计流程，希冀能够同时解答部分学生对于PCB Layout如何转向其上层的硬件电路设计的疑问。</font></p><p><font size="4">1. Step-MXO2和Arduino Uno可否直连？</font></p><p><img src="/2021/07/28/project-process/interface.png"></p><p><font size="4">短时间内或许不会互相伤害，但是逻辑上是不兼容的。这在数字电路课程中有过介绍。详见Digital Fundamentals 11th Edition by Thomas L. Floyd Chapter 15-1，不兼容的原因如下图（出自该书）所示。</font></p><p><img src="/2021/07/28/project-process/3.3v.png"></p><p><img src="/2021/07/28/project-process/5v.png"></p><p><font size="4">由上面两图可见，兼容和不兼容皆有。兼容的一面在于：3.3v的CMOS输出电平，逻辑0的电平范围是（0-0.4v），逻辑1的电平范围是（2.4-3.3v），与此同时5v的TTL输入电平，逻辑0的电平范围是（0-0.8v），逻辑1的电平范围是（2-5v）。由于后者包含前者，是故前者可以直接驱动后者，也就是说Step-mxo2输出引脚可直连Arduino Uno输入引脚。不兼容的一面在于：5v的TTL输出电平，逻辑0的电平范围是（0-0.4v），逻辑1的电平范围是（2.4-5v），与此同时3.3v的CMOS输入电平，逻辑0的电平范围是（0-0.8v），逻辑1的电平范围是（2-3.3v）。由于后者不能完全包含前者，是故前者不可以直接驱动后者，也就是说Arduino Uno输出引脚直连Step-mxo2输入引脚时，高电平不能被后者识别。</font></p><p><font size="4">2. 上述理论放之四海而皆准吗？</font></p><p><font size="4">上述理论完全来自于教科书上的阐述，但在工程实践中尽信书不如无书，按图索骥不可取。在这里，理论的作用在于直觉上的提醒，告诉我们直连很有可能是行不通的（事实上也确实行不通），而在实践中要靠芯片手册说话，我们需要一个明确的答案。</font></p><p><font size="4">芯片生产商往往都会在官方网站上免费提供datasheet，首先我们找到Step-MXO2和Arduino Uno各自的核心芯片，分别为MachXO2和ATmega328P，上网搜索其官方链接下载查看。</font></p><p><font size="4">MachXO2: <a href="https://www.latticesemi.com/-/media/LatticeSemi/Documents/DataSheets/MachXO23/FPGA-DS-02056-3-7-MachXO2-Family-Data-Sheet.ashx?document_id=38834">https://www.latticesemi.com/-/media/LatticeSemi/Documents/DataSheets/MachXO23/FPGA-DS-02056-3-7-MachXO2-Family-Data-Sheet.ashx?document_id=38834</a></font></p><p><font size="4">Atmega328P: <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf">http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf</a></font></p><p><font size="4">找出与输入输出电平相关的描述（其实也不是那么容易能找出来的，平时需要多看手册），如下：</font></p><p><img src="/2021/07/28/project-process/datasheet_3.3v.png"></p><p><img src="/2021/07/28/project-process/datasheet_5v.png"></p><p><font size="4">显然这与上述教科书中的定义差异显著。但结论还是一样，不能完全兼容（具体计算过程参考上文，这里还有一点点瑕疵在于，datasheet中Machxo2输出1对应的电平最小值是VCCIO-0.4，即3.3v-0.4v=2.9v，而Atmega328P输入1的最小值是0.6VCC=3V，二者之间有0.1v的不匹配，但实操没有发现问题），进而需要思考如何设计电路实现匹配。</font></p><p><font size="4">3. 从不匹配到匹配如何实现？</font></p><p><font size="4">CMOS直接驱动TTL基本不存在问题，但反过来不行，不行的根本原因主要还是在于最大电压的不同，因此，如果能够将TTL最大电压5v降至3.3v，则很有可能解决不匹配的问题。最容易想到的办法就是电路原理里面学的串联分压，比如三个1kohm电阻串联，如下图所示（留学生上课时即采用此简易电路）。</font></p><p><img src="/2021/07/28/project-process/compatible.png"></p><p><font size="4">4. 简单分压是不是就万事大吉了？</font></p><p><font size="4">工程上永远都在寻找一种折中，电路简单意味着设备复杂度低，好处是成本低，不足之处也是显而易见的，传输速率一定不高。原因在电子电路中已经学过了，CMOS的输入端存在容性，现在凭空多了三个电阻，形成了RC充放电一阶电路，其过渡过程会导致波形由方的变成圆的（自行脑补矩形波作为输入信号，RC电路中电容两端电压波形随输入信号频率变化而变化），速率越高越明显，直至由于C来不及充放电而使得信号湮灭。</font></p><p><font size="4">因此暑假期间组织了几位精干的学生在简易电阻分压的基础上采用TI专用芯片来实现电平匹配的同时又能满足信号传输速率的要求。</font></p><p><font size="4">74LVC4245: <a href="https://www.ti.com.cn/cn/lit/ds/symlink/sn74lvc4245a.pdf?ts=1627398220163&amp;ref_url=https%253A%252F%252Fwww.ti.com.cn%252Fproduct%252Fcn%252FSN74LVC4245A%253FkeyMatch%253D%2526tisearch%253Dsearch-everything%2526usecase%253Dpartmatches">https://www.ti.com.cn/cn/lit/ds/symlink/sn74lvc4245a.pdf?ts=1627398220163&amp;ref_url=https%253A%252F%252Fwww.ti.com.cn%252Fproduct%252Fcn%252FSN74LVC4245A%253FkeyMatch%253D%2526tisearch%253Dsearch-everything%2526usecase%253Dpartmatches</a></font></p><p><img src="/2021/07/28/project-process/74lvc4245.png"></p><p><font size="4">5. 用上专用芯片是不是就完美了？</font></p><p><font size="4">电路设计没有完美的说法，还有待时间和实践的检验，学习也是一样，永无止境。</font></p><p><font size="4">6. 对以后的学习会有何帮助吗？</font></p><p><font size="4">至少当我们看到STM32F10x参考手册时，这种熟悉感会使我们更快的投入到新的学习中。</font></p><p><img src="/2021/07/28/project-process/stm32f10x.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font size=&quot;4&quot;&gt;本文介绍了电气层（OSI Physical Layer）硬件接口实现电平匹配全过程——以FPGA+Arduino实验平台项目开发为例。&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Digital Design" scheme="http://epiapoq.github.io/tags/Digital-Design/"/>
    
    <category term="Curriculum Integration" scheme="http://epiapoq.github.io/tags/Curriculum-Integration/"/>
    
    <category term="Pro^3" scheme="http://epiapoq.github.io/tags/Pro-3/"/>
    
  </entry>
  
  <entry>
    <title>何为知识的完整性（续）——心流</title>
    <link href="http://epiapoq.github.io/2021/04/11/flow/"/>
    <id>http://epiapoq.github.io/2021/04/11/flow/</id>
    <published>2021-04-11T09:14:36.000Z</published>
    <updated>2021-07-28T05:39:26.960Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/04/11/flow/flow.png"></p><span id="more"></span><p><font size="4">何以证明何种教学方式是符合教学对象认知结构的呢？问题的答案在于——能否产生FLOW（心流）。</font></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/04/11/flow/flow.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Curriculum Integration" scheme="http://epiapoq.github.io/tags/Curriculum-Integration/"/>
    
  </entry>
  
  <entry>
    <title>何为知识的完整性？</title>
    <link href="http://epiapoq.github.io/2021/04/10/knowledge/"/>
    <id>http://epiapoq.github.io/2021/04/10/knowledge/</id>
    <published>2021-04-10T07:46:36.000Z</published>
    <updated>2021-07-28T05:39:27.021Z</updated>
    
    <content type="html"><![CDATA[<hr><p><font size="4">总体上的知识可以从两个角度来进行划分：认识论的和本体论的。</font></p><p><font size="4">在认识论层面把知识划分为：过程性知识和叙述性知识。</font></p><p><font size="4">在本体论层面把知识划分为：知识本身和知识结构。</font></p><p><font size="4">如果承认人是社会文化“濡化”的产物这一事实，那么知识结构决定人的思维方式。</font></p><p><font size="4">因材施教的基础是对教学对象思维方式的清晰辨识。</font></p><hr><p><font size="4">承继自苏联模式的传统学科划分的专业课程体系在认识论上是叙述性知识，在本体论知识结构上是层递式的、向上生长的，这种知识结构体系曾经为我国社会主义建设提供了大量的人才，满足了当时生产力的发展，并且在当今仍有存在的价值，比如在一些超级高校（人们通常用一个数值很大的三位数来指称它们）。这是传统上人们对“完整性”知识结构的理解。</font></p><p><font size="4">高等职业教育模式下教学对象的学习方式有所不同，可以认为在认识论上是过程性的、可操作性的，在本体论知识结构上是系统性的、非理论性的（为更明确的厘清二者的区别，这里用语比较绝对）。其知识结构的“完整性”体现在系统上、操作上。</font></p><p><font size="4">从知识的作用而言，二者并无高下之分，都是人类文化的传承，从结构上来看也都是完整的。但教育者采取何种知识结构传承知识是必须首先明确的，也即面向不同思维方式的受教育者务必采取适合ta的知识结构方式，而不是反过来让教学对象主动改造自己以适应于教育者固有的知识结构。这是因为高等教育中真正的专业课程教育充其量三两年，时间不足够长、师资不足够权威到能够显著改变教学对象在之前近廿年间形成的知识结构以及由此产生的思维方式，且每况愈下。</font></p><p><font size="4">另一方面，教学与科研存在本质的差别————“人是目的”（康德语）。二者的相同点在于都属于劳动，但区别在于：科研这种劳动所加工的质料在于前人的知识成果（旧的物），从而产生新的知识成果（新的物），新的成果绝大部分由劳动者占有，如科研奖励、职称评定；而教学这种劳动所加工的“质料”是人，成果亦是人，完全不由劳动者占有，也不由任何其他人占有。科研和教学从此分道扬镳：科研工作者完全可以仅凭个人的学术旨趣采用他所愿意选择的知识结构从事科研劳动；但是，教学工作者不能够也不应该仅凭个人喜好和便利程度决定选择何种知识结构进行教学劳动。</font></p><p><font size="4">由上可知，采取何种“完整”的知识结构，就教学而言，是取决于教学对象的，教学为什么要改革，根源在于教育对象的改变。再次强调，人类的知识就放在那里，就那么多，两种知识结构都是“完整”的，难度在于如何完整化。</font></p><p><font size="4">以下例子试图从传统知识结构中脱离出来，重构一种更适用于目前教学对象认知方式的完整知识结构。</font></p><p><img src="/2021/04/10/knowledge/sine.png"></p><p><font size="4">该电路为笔者在“电子电路基础”讲到“叠加定理”部分时所采用。主要分为5个部分：</font></p><ol><li>并行DDS正弦波的数字形式</li><li>R-2R电阻网络做D/A转换</li><li>重建滤波器生成模拟正弦波</li><li>做FFT生成频谱数字量</li><li>通过串口经上位机UI显示波形</li></ol><p><font size="4">上述5个部分仅仅第2部分与叠加定理相关。第1部分归属于传统知识结构中的“采样定理《信号与系统》、PAM《通信原理》”、“D/A转换《数字电路》和《单片机》”；第3部分归属于传统知识结构中的“滤波器、运算放大器《模拟电路》”；第4部分归属于传统知识结构中的“FFT《数字信号处理》”；第5部分归属于传统知识结构中的“串行通信《单片机》”。乍看理论知识结构上看无疑是碎片化的，但是从系统结构上看又是“完整”的。当然，不可能也不需要在一门课当中甚至是一次课当中让教学对象掌握如此多的知识，但就笔者近年来教学经验看，系统完整性或过程完整性相较于理论完整性更加适合于当前的教学对象（地方高校）。</font></p><p><font size="4">类似上述课程案例的设计必然需要教学工作者熟悉系统概念的同时又能够重构系统，费时费力的同时未必讨好，能够胜任者也未必俯首皆是。这也正是沃勒斯坦对学科专业化的诟病。</font></p><p><font size="4">但真正的难度恐怕还是在教学工作者意识形态的改变上…</font></p><p><font size="4"><code>补充：</code>普遍存在于大量教学工作者当中的一个根深蒂固的观念为————知识结构毋庸置疑的是“纵向”生长的，如果有什么知识存在，那么必定要有该知识的“前知识”存在。也即某一门课程必须一定要是另一门所谓更高深课程的基础课程。但如果知识也可以是“扁平化”的呢？这就是碎片化时代对于传统知识时代提出的质疑。</font></p><p><img src="/2021/04/10/knowledge/flat.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;font size=&quot;4&quot;&gt;总体上的知识可以从两个角度来进行划分：认识论的和本体论的。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;4&quot;&gt;在认识论层面把知识划分为：过程性知识和叙述性知识。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;4&quot;&gt;在本体</summary>
      
    
    
    
    
    <category term="Curriculum Integration" scheme="http://epiapoq.github.io/tags/Curriculum-Integration/"/>
    
  </entry>
  
  <entry>
    <title>Explain Data Routing -- A Digital Design Method</title>
    <link href="http://epiapoq.github.io/2021/04/04/mux-demux/"/>
    <id>http://epiapoq.github.io/2021/04/04/mux-demux/</id>
    <published>2021-04-04T14:22:17.000Z</published>
    <updated>2021-07-28T05:39:27.073Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/04/04/mux-demux/mux_demux.gif"></p><p><font size="4">In this post, I try to use digital logic to explain the basic concept of data routing.</font><span id="more"></span></p><p><img src="/2021/04/04/mux-demux/mux_demux.png" alt="Data Routing"></p><p><font size="4">As we can see, in the circuit above, there are two transmitters 1&amp;2 and two receivers 1&amp;2. Relationship’s as follows.</font></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Transmitter<span class="emphasis">_1 -- Receiver_</span>1</span><br><span class="line">Transmitter<span class="emphasis">_2 -- Receiver_</span>2</span><br></pre></td></tr></table></figure><p><font size="4">Because there are four bits outputs for each transmmiter, we need at least <code>8-bit</code> lines when connect them seperately.</font></p><p><font size="4">But if we use MUX(74HC157) and Decoder(74HC139) to connect them, we just need <code>4-bit</code> lines. (Here we can ignore all the controlling bus, such as the lines from the decoder, because we can do that when the amount of transmitters and receivers increases to a huge number.) The two Transceiver Pairs will share the outputs of the MUX, if we can handle the sequence of the clock well.</font></p><p><font size="4">Of couse we also need a DEMUX to distribute the datas to the right destination. Unlike the MUX in the circuit, which is hardware, I use External Inerrupt(INT0) of Arduino UNO to respond to the controlling signal of the Decoder. I call it a soft demux.(I can’t find a proper 74 series demux which has double four-bit outputs.)</font></p><p><font size="4">The Virtual Serial Port Pairs Map is:</font></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COM1--COM5</span><br><span class="line">COM2--COM6</span><br></pre></td></tr></table></figure><p><font size="4">COM1: Port of Transmitter_1</font></p><p><font size="4">COM2: Port of Transmitter_2</font></p><p><font size="4">COM5: Port of Arduino IDE Serial Monitor_1</font></p><p><font size="4">COM6: Port of Arduino IDE Serial Monitor_2</font></p><p><font size="4">tip: only four serial port supported in Proteus</font></p><p><font size="4">Finally, the concepts of switching, routing, multiplexing and demultiplexing, whatever you name them, <code>SPDT</code> is their prototype in my opinion.</font></p><p><img src="/2021/04/04/mux-demux/spdt.png" alt="spdt"></p><p><img src="/2021/04/04/mux-demux/data_routing.jpg" alt="routing"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/04/04/mux-demux/mux_demux.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;4&quot;&gt;In this post, I try to use digital logic to explain the basic concept of data routing.&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Arduino" scheme="http://epiapoq.github.io/tags/Arduino/"/>
    
    <category term="Proteus" scheme="http://epiapoq.github.io/tags/Proteus/"/>
    
    <category term="Digital Design" scheme="http://epiapoq.github.io/tags/Digital-Design/"/>
    
    <category term="Curriculum Integration" scheme="http://epiapoq.github.io/tags/Curriculum-Integration/"/>
    
  </entry>
  
  <entry>
    <title>How to connect COMPIM (Proteus) with Serial Monitor (Arduino IDE)</title>
    <link href="http://epiapoq.github.io/2021/04/02/compim/"/>
    <id>http://epiapoq.github.io/2021/04/02/compim/</id>
    <published>2021-04-02T11:01:17.000Z</published>
    <updated>2021-07-28T05:39:26.943Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/04/02/compim/6.gif"></p><p><font size="4">This is a tutorial about how to connect Proteus with Arduino IDE by serial port. Take BCD Adder for an instance.</font><span id="more"></span></p><p><font size="4">1. Install <a href="https://www.eltima.com/vspd-post-download.html">virtual serial port driver</a> for creating virtual serial port pair.</font></p><p><img src="/2021/04/02/compim/1.png" alt="fig.1 VSPD"></p><p><img src="/2021/04/02/compim/2.png" alt="fig.2 Instrument Manager"></p><p><font size="4">2. Pick “COMPIM” component in Proteus and setup baud rate and port number, so does “VIRTUAL TERMINAL”.</font></p><p><img src="/2021/04/02/compim/3.png" alt="fig.3 COMPIM"></p><p><img src="/2021/04/02/compim/4.png" alt="fig.4 VIRTUAL TERMINAL"></p><p><font size="4">3. Setup Serial Monitor in Arduino IDE.</font></p><p><img src="/2021/04/02/compim/5.png" alt="fig.5 Serial Monitor"></p><p><font size="4">Now run simulation in Proteus and input addend in Serial Monitor in Arduino IDE. The data will be transmitted and received by COM1/COM2.</font></p><p><img src="/2021/04/02/compim/6.gif" alt="fig.6 Result"></p><hr><p><font color="888888"><em>Demo codes:</em></font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    LAB2: Addends generator for FPGA BCD adder</span></span><br><span class="line"><span class="comment">    Programming &amp; Hardware By Epiapoq</span></span><br><span class="line"><span class="comment">    Started 29-03-2021</span></span><br><span class="line"><span class="comment">    Modified 30-03-2021</span></span><br><span class="line"><span class="comment">    Version 1.0</span></span><br><span class="line"><span class="comment">    Reference:</span></span><br><span class="line"><span class="comment">    https://github.com/whatuptkhere/paralleloslam/blob/master/Paralleloslam.ino</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> firstByte = <span class="number">0</span>; <span class="comment">// the first addend from serial port</span></span><br><span class="line"><span class="keyword">int</span> secondByte = <span class="number">0</span>; <span class="comment">// the second addend from serial port</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// the sum</span></span><br><span class="line"><span class="keyword">int</span> cb = <span class="number">0</span>; <span class="comment">// check bit, which is used to check the number of the incomming addend</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* each addend of BCD adder consists of only 4 bits, so here </span></span><br><span class="line"><span class="comment">just define the lower nibble of the firstByte or secondByte */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> firstByte_0 = <span class="number">4</span>; <span class="comment">// LSB of first addend</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> firstByte_1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> firstByte_2 = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> firstByte_3 = <span class="number">7</span>; <span class="comment">// MSB of first addend</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> secondByte_0 = <span class="number">8</span>; <span class="comment">// LSB of second addend</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> secondByte_1 = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> secondByte_2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> secondByte_3 = <span class="number">11</span>; <span class="comment">// MSB of second addend</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Serial.<span class="built_in">begin</span>(<span class="number">9600</span>); <span class="comment">// open serial port, set data rate to 9600 bps</span></span><br><span class="line">    <span class="built_in">pinMode</span>(firstByte_0, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(firstByte_1, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(firstByte_2, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(firstByte_3, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(secondByte_0, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(secondByte_1, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(secondByte_2, OUTPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(secondByte_3, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Serial.<span class="built_in">available</span>() &gt; <span class="number">0</span> &amp;&amp; (cb == <span class="number">0</span>)) &#123; <span class="comment">// read the first addend</span></span><br><span class="line">        firstByte = Serial.<span class="built_in">read</span>() - <span class="number">48</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* serial in from monitor and parallel out to FPGA */</span></span><br><span class="line">        <span class="built_in">digitalWrite</span>(firstByte_0, firstByte &amp; <span class="number">0x01</span>); <span class="comment">// send LSB of first addend</span></span><br><span class="line">        <span class="built_in">digitalWrite</span>(firstByte_1, firstByte &amp; <span class="number">0x02</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(firstByte_2, firstByte &amp; <span class="number">0x04</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(firstByte_3, firstByte &amp; <span class="number">0x08</span>);</span><br><span class="line">        </span><br><span class="line">        Serial.<span class="built_in">print</span>(firstByte);</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&#x27;+&#x27;</span>);</span><br><span class="line">        cb = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((Serial.<span class="built_in">available</span>() &gt; <span class="number">0</span>) &amp;&amp; (cb == <span class="number">1</span>)) &#123; <span class="comment">// read the second addend</span></span><br><span class="line">        secondByte = Serial.<span class="built_in">read</span>() - <span class="number">48</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* serial in from monitor and parallel out to FPGA */</span></span><br><span class="line">        <span class="built_in">digitalWrite</span>(secondByte_0, secondByte &amp; <span class="number">0x01</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(secondByte_1, secondByte &amp; <span class="number">0x02</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(secondByte_2, secondByte &amp; <span class="number">0x04</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(secondByte_3, secondByte &amp; <span class="number">0x08</span>);</span><br><span class="line">        </span><br><span class="line">        Serial.<span class="built_in">print</span>(secondByte);</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        sum = firstByte + secondByte;</span><br><span class="line">        Serial.<span class="built_in">print</span>(sum); </span><br><span class="line">        Serial.<span class="built_in">println</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        cb = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/04/02/compim/6.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;4&quot;&gt;This is a tutorial about how to connect Proteus with Arduino IDE by serial port. Take BCD Adder for an instance.&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Arduino" scheme="http://epiapoq.github.io/tags/Arduino/"/>
    
    <category term="Proteus" scheme="http://epiapoq.github.io/tags/Proteus/"/>
    
    <category term="Digital Design" scheme="http://epiapoq.github.io/tags/Digital-Design/"/>
    
    <category term="Curriculum Integration" scheme="http://epiapoq.github.io/tags/Curriculum-Integration/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://epiapoq.github.io/2021/04/02/hello-world/"/>
    <id>http://epiapoq.github.io/2021/04/02/hello-world/</id>
    <published>2021-04-02T07:32:32.436Z</published>
    <updated>2021-04-02T07:32:32.436Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
