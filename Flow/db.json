{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/katex.js","path":"js/katex.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/compim.md","hash":"3b0624ee2c92b2ea8de6cb6a317f1e13f595ea0c","modified":1627450766943},{"_id":"source/_posts/flow.md","hash":"cf39ebda48358168de0f7c45b4982639e28462a7","modified":1627450766960},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1617348752436},{"_id":"source/_posts/knowledge.md","hash":"242c178c149df3303a700f31e94851bfbc549a57","modified":1627450767021},{"_id":"source/_posts/mux-demux.md","hash":"1b8d3a01c4d29504a2e3450c19f845ce64c57754","modified":1627450767073},{"_id":"source/tags/index.md","hash":"fa6095ed895dcb753e30cfd54aea7ab34d06322f","modified":1627450767091},{"_id":"source/_posts/flow/flow.png","hash":"90d9f9334cefbd69485d087707e72fa6b94d6485","modified":1618135422387},{"_id":"source/_posts/mux-demux/data_routing.jpg","hash":"4e4383589b937a89183060269694c59ce2749814","modified":1617548250222},{"_id":"source/_posts/mux-demux/spdt.png","hash":"96a479f9caf97e978b50dbe6857ce9ab6a9b027b","modified":1617550602114},{"_id":"source/_posts/knowledge/flat.png","hash":"8b0f5ad9f5416b6b5f1c2ecbc9d3c82814ee8433","modified":1618134230092},{"_id":"source/_posts/compim/1.png","hash":"b1f07b508a3de1aa2b9e56d2e38dba664f784041","modified":1617373577470},{"_id":"source/_posts/compim/3.png","hash":"5842d8b0e3c6dd4d9c5ec611a01814533d41ec60","modified":1617373660854},{"_id":"source/_posts/compim/2.png","hash":"5111990eb2511a5e9314a960bc118d9ff656f76e","modified":1617373648480},{"_id":"source/_posts/compim/5.png","hash":"c9bcf9756e2191c474809427b9005bd2ff839296","modified":1617373697539},{"_id":"source/_posts/compim/4.png","hash":"016b74984070f0d11da9333de6a066d959d55075","modified":1617373668896},{"_id":"themes/hexo-theme-melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617360191926},{"_id":"themes/hexo-theme-melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617360191940},{"_id":"themes/hexo-theme-melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617360191914},{"_id":"source/_posts/mux-demux/mux_demux.png","hash":"ceea3e881a2c11b23b05f6eded293722c8ea213b","modified":1617545121876},{"_id":"themes/hexo-theme-melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1617360191898},{"_id":"themes/hexo-theme-melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1617360191898},{"_id":"themes/hexo-theme-melody/.gitignore","hash":"748e2ad992693d9d63a76c2772be5ffa36b86742","modified":1617360191900},{"_id":"themes/hexo-theme-melody/.npmignore","hash":"92a06c5d33648589b0a6333b13c9d94967f56ec2","modified":1617360191902},{"_id":"themes/hexo-theme-melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1617360191902},{"_id":"themes/hexo-theme-melody/CHANGELOG.md","hash":"0419f25e912921743e58ce38ef9ad4916aa617bd","modified":1617360191903},{"_id":"themes/hexo-theme-melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1617360191903},{"_id":"themes/hexo-theme-melody/LICENSE","hash":"f6ad35196b942786fa91aedc1c0f45bf89de3fd3","modified":1617360191904},{"_id":"themes/hexo-theme-melody/README.md","hash":"243cb19e01121aa1af9e6d3b47cdb25b2be668be","modified":1617360191904},{"_id":"themes/hexo-theme-melody/_config.yml","hash":"a13bae3cd4535ae465369ccec8c0236b8fb46707","modified":1617419298192},{"_id":"themes/hexo-theme-melody/package.json","hash":"6c36d69de89de1a1878d787b5af23772f89d4dc6","modified":1617360191925},{"_id":"themes/hexo-theme-melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1617360191951},{"_id":"themes/hexo-theme-melody/.github/FUNDING.yml","hash":"e56cf70f2fc56e2433ac3bca379e2704a41c7889","modified":1617360191899},{"_id":"themes/hexo-theme-melody/.github/ISSUE_TEMPLATE.md","hash":"d1420092142acd3f38c31099934d84bf5c4a4b7c","modified":1617360191900},{"_id":"themes/hexo-theme-melody/.vscode/launch.json","hash":"52d28f3455d1e9ff1d7c56316773a77710e89751","modified":1617360191902},{"_id":"themes/hexo-theme-melody/.vscode/settings.json","hash":"defe04b1c276769d86dfb931c373595939729e92","modified":1617360191903},{"_id":"themes/hexo-theme-melody/languages/default.yml","hash":"4f87bdc1526111b59785f1dce1025435f7ed8e97","modified":1617360191905},{"_id":"themes/hexo-theme-melody/languages/en.yml","hash":"4f87bdc1526111b59785f1dce1025435f7ed8e97","modified":1617360191905},{"_id":"themes/hexo-theme-melody/languages/zh-Hans.yml","hash":"1868dda88a019692d1993d5ee6b1b854f1da9d88","modified":1617360191906},{"_id":"themes/hexo-theme-melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1617360191906},{"_id":"themes/hexo-theme-melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1617360191906},{"_id":"themes/hexo-theme-melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1617360191907},{"_id":"themes/hexo-theme-melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1617360191907},{"_id":"themes/hexo-theme-melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1617360191922},{"_id":"themes/hexo-theme-melody/layout/page.pug","hash":"59ade962030ec41b86f7d754c53d974b8d4d2068","modified":1617360191923},{"_id":"themes/hexo-theme-melody/layout/post.pug","hash":"65a49aa42712f54af3b7ea9c73a22be39dc731c6","modified":1617360191923},{"_id":"themes/hexo-theme-melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1617360191923},{"_id":"themes/hexo-theme-melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1617360191925},{"_id":"themes/hexo-theme-melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1617360191925},{"_id":"themes/hexo-theme-melody/scripts/replace-config.js","hash":"76de82bb1b11725c9f13e25cf14742c81fe99bab","modified":1617360191927},{"_id":"themes/hexo-theme-melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1617360191951},{"_id":"themes/hexo-theme-melody/.github/workflows/main.yml","hash":"d6b6afee00b38387cd308a0cba66db706adf5f0d","modified":1617360191900},{"_id":"themes/hexo-theme-melody/layout/includes/additional-js.pug","hash":"92c27adaf87d1108da8ba31c31ceae0e2083484c","modified":1617360191908},{"_id":"themes/hexo-theme-melody/layout/includes/config.pug","hash":"e1054fb05577c380fa5ef1ceaa76e06da2be4de0","modified":1617360191912},{"_id":"themes/hexo-theme-melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1617360191913},{"_id":"themes/hexo-theme-melody/layout/includes/header.pug","hash":"5ddc31e487a0439cc910ecf530dfd7571abae40f","modified":1617360191916},{"_id":"themes/hexo-theme-melody/layout/includes/head.pug","hash":"d2ca3fc83e873e7d06440ad1f44fd42a5dd6d861","modified":1617360191914},{"_id":"themes/hexo-theme-melody/layout/includes/layout.pug","hash":"80e59c4023baa2504bff0e9a69efab3314f8ffdb","modified":1617360191916},{"_id":"themes/hexo-theme-melody/layout/includes/nav.pug","hash":"e1f5053a66a48b6fb6c4390ae55f5bd8e397ff8e","modified":1617360191917},{"_id":"themes/hexo-theme-melody/layout/includes/pagination.pug","hash":"11a7d975f7e44932ea509a1a9d29f3e1ddece73e","modified":1617360191917},{"_id":"themes/hexo-theme-melody/layout/includes/recent-posts.pug","hash":"f37dc3576cc45ad3da097b58f420b5b523d8a9a5","modified":1617360191917},{"_id":"themes/hexo-theme-melody/layout/includes/sidebar.pug","hash":"5fd5e002d0ab203489c840451e4fa9d3535610e2","modified":1617360191920},{"_id":"themes/hexo-theme-melody/source/css/404.styl","hash":"e16201381c7f064f1923a12a23136cec6db0a8a0","modified":1617360191927},{"_id":"themes/hexo-theme-melody/source/css/index.styl","hash":"c2823ad6013df237993eea5cf190c313270da4db","modified":1617360191937},{"_id":"themes/hexo-theme-melody/source/css/var.styl","hash":"bfce8a6dd838762e3db0b0052887220eb260dc7b","modified":1617360191938},{"_id":"themes/hexo-theme-melody/source/img/avatar.png","hash":"728a2c5ba86b4c21756c00a4e69237e9fea881e9","modified":1617424329443},{"_id":"themes/hexo-theme-melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1617360191938},{"_id":"themes/hexo-theme-melody/source/js/copy.js","hash":"a3a7c3158ea23a3bf63f7900750cc0928b73e25f","modified":1617360191939},{"_id":"themes/hexo-theme-melody/source/js/fancybox.js","hash":"91d2acc362c03d905b2d40bda42e08c0ae81c4f7","modified":1617360191939},{"_id":"themes/hexo-theme-melody/source/js/fireworks.js","hash":"915550eee287f3e0ff92929ac12df0567224cdd3","modified":1617360191940},{"_id":"themes/hexo-theme-melody/source/js/head.js","hash":"24bc79d4382730d79174cdc2cd3de6368dee8034","modified":1617360191940},{"_id":"themes/hexo-theme-melody/source/js/katex.js","hash":"8cc3bcbfd489f86714e815dc6ab8bad466c49664","modified":1617360191941},{"_id":"themes/hexo-theme-melody/source/js/scroll.js","hash":"3e02b196ca11d5ecfcc0f72fa31c11d28609db36","modified":1617360191941},{"_id":"themes/hexo-theme-melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1617360191942},{"_id":"themes/hexo-theme-melody/source/js/transition.js","hash":"24db2b0ae93ea925fb18be6d466365a4cd9f6576","modified":1617360191950},{"_id":"themes/hexo-theme-melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1617360191950},{"_id":"themes/hexo-theme-melody/layout/includes/404/404-nav.pug","hash":"f085a65214c2656ef6a104a2ae9fa1f8fbc196c1","modified":1617360191908},{"_id":"themes/hexo-theme-melody/layout/includes/404/layout.pug","hash":"24e9cee9d7c96712fffc404671d88f1d9c0a5a9b","modified":1617360191908},{"_id":"themes/hexo-theme-melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1617360191909},{"_id":"themes/hexo-theme-melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1617360191909},{"_id":"themes/hexo-theme-melody/layout/includes/comments/index.pug","hash":"df445ab2a5f641da9294daf75c7d4178b4a08dad","modified":1617360191910},{"_id":"themes/hexo-theme-melody/layout/includes/comments/gitment.pug","hash":"97f524092775c9b7e618c691df40b4bce9e121ac","modified":1617360191909},{"_id":"themes/hexo-theme-melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1617360191910},{"_id":"themes/hexo-theme-melody/layout/includes/comments/valine.pug","hash":"2da47259101bfac47ebe93f87c034ab8f4ca9151","modified":1617360191910},{"_id":"themes/hexo-theme-melody/layout/includes/comments/vssue.pug","hash":"352be3c04f54e71a957a51fc28d20e7ac5579830","modified":1617360191911},{"_id":"themes/hexo-theme-melody/layout/includes/count/busuanzi.pug","hash":"760be9ea92e5eb6959f37b76b9c13fb627893b0a","modified":1617360191912},{"_id":"themes/hexo-theme-melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1617360191914},{"_id":"themes/hexo-theme-melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1617360191916},{"_id":"themes/hexo-theme-melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1617360191917},{"_id":"themes/hexo-theme-melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1617360191918},{"_id":"themes/hexo-theme-melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1617360191918},{"_id":"themes/hexo-theme-melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1617360191919},{"_id":"themes/hexo-theme-melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1617360191919},{"_id":"themes/hexo-theme-melody/layout/includes/share/index.pug","hash":"42794c93723016ce1f23b81325e723a6f23f72d0","modified":1617360191919},{"_id":"themes/hexo-theme-melody/layout/includes/share/share-js.pug","hash":"c1ab921b1874d0026a7e1c23833600e3ea158881","modified":1617360191920},{"_id":"themes/hexo-theme-melody/layout/includes/slide/layout.pug","hash":"e47bc2093e1f13c7070c02810ca6a87b7a6ee73e","modified":1617360191921},{"_id":"themes/hexo-theme-melody/layout/includes/slide/script.pug","hash":"36a326ad1c5224becd07d61a876d44af08c5d65f","modified":1617360191921},{"_id":"themes/hexo-theme-melody/layout/includes/third-party/canvas-ribbon.pug","hash":"a72c4b5943e9e88588983ab1c1cfeaf210142c56","modified":1617360191922},{"_id":"themes/hexo-theme-melody/layout/includes/third-party/katex.pug","hash":"19ffed43fa22c3bf1c8d974a8d33f73a9a67d098","modified":1617360191922},{"_id":"themes/hexo-theme-melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1617360191922},{"_id":"themes/hexo-theme-melody/source/css/_global/index.styl","hash":"a6ad6d2675e975883855a1fa3a634c7ba06d4685","modified":1617360191928},{"_id":"themes/hexo-theme-melody/source/css/_highlight/diff.styl","hash":"4e761f65c28f9df474fa2bd4d891c22db1aafa27","modified":1617360191928},{"_id":"themes/hexo-theme-melody/source/css/_highlight/highlight.styl","hash":"ca5913698ddd97a55adcc98097038e4190cd7b58","modified":1617360191929},{"_id":"themes/hexo-theme-melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1617360191930},{"_id":"themes/hexo-theme-melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1617360191930},{"_id":"themes/hexo-theme-melody/source/css/_layout/footer.styl","hash":"cb6db6151a49db6af0f7f6c8ee4c84872a75e437","modified":1617360191930},{"_id":"themes/hexo-theme-melody/source/css/_layout/head.styl","hash":"41fe374cfa854be779b07d91f918836e8c03d54a","modified":1617360191930},{"_id":"themes/hexo-theme-melody/source/css/_layout/page.styl","hash":"65420e8415cc117916c8b13f214d3a76815692dd","modified":1617360191932},{"_id":"themes/hexo-theme-melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1617360191933},{"_id":"themes/hexo-theme-melody/source/css/_layout/post.styl","hash":"f29f8fe1a5ef497eb898e927f8510c3293c654b3","modified":1617360191933},{"_id":"themes/hexo-theme-melody/source/css/_layout/sidebar.styl","hash":"29b02d3c319d84ab98dddec449f4bc83fbfdad36","modified":1617360191933},{"_id":"themes/hexo-theme-melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1617360191935},{"_id":"themes/hexo-theme-melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1617360191935},{"_id":"themes/hexo-theme-melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1617360191935},{"_id":"themes/hexo-theme-melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1617360191937},{"_id":"themes/hexo-theme-melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1617360191937},{"_id":"themes/hexo-theme-melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1617360191942},{"_id":"themes/hexo-theme-melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1617360191942},{"_id":"themes/hexo-theme-melody/source/js/third-party/anime.min.js","hash":"2ebe95b80a145ea5936bee692bcd44c9b5dbfa60","modified":1617360191944},{"_id":"themes/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","hash":"48abc9e33d90de08a49d63e1bcd21defe0461309","modified":1617360191944},{"_id":"themes/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1617360191946},{"_id":"themes/hexo-theme-melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1617360191949},{"_id":"themes/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1617360191949},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1617360191948},{"_id":"themes/hexo-theme-melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1617360191947},{"_id":"source/_posts/compim/6.gif","hash":"62789d595a2601482032f5b4bc7c3fdaa4818bf2","modified":1617373712058},{"_id":"source/_posts/mux-demux/mux_demux.gif","hash":"f7bc76647df70bc4723075b142be7cdb446f43b2","modified":1617544229193},{"_id":"source/_posts/knowledge/sine.png","hash":"b3b38457a37aa15398f0bf14014341d67432afc6","modified":1618041900867},{"_id":"public/atom.xml","hash":"10b40d56d3ba7ac5e9483bba0cb198057fe9821a","modified":1637430799223},{"_id":"public/sitemap.xml","hash":"06ac00ce28f71af1e51ddac078e22d28e3d2af69","modified":1637430615494},{"_id":"public/tags/index.html","hash":"44fe13406b925180b1228e285018f8c57984292e","modified":1637430615494},{"_id":"public/2021/04/11/flow/index.html","hash":"b102c23f48eb07a49d85ad8f64f6a2cddbb90259","modified":1637430615494},{"_id":"public/2021/04/10/knowledge/index.html","hash":"64eae1bef6683363907f5a49550b199485ab4697","modified":1637430615494},{"_id":"public/2021/04/04/mux-demux/index.html","hash":"719fca644c9d730c200d9fc2cc171a9475819036","modified":1637430615494},{"_id":"public/2021/04/02/hello-world/index.html","hash":"ee0305e97ffd5a138175acfde2168032a1cba638","modified":1637430615494},{"_id":"public/archives/index.html","hash":"8d523bcb043ec1472af12e36121c99fb0617b416","modified":1637430615494},{"_id":"public/archives/2021/index.html","hash":"4dcc347b86cb98e671239011b5a1dead09e16ef6","modified":1637430615494},{"_id":"public/archives/2021/04/index.html","hash":"f9e39f98ffff2b30e6c7f7697a43d2c6629ef928","modified":1637430615494},{"_id":"public/index.html","hash":"0b691aaa41e0c60ead5a575ff4a9d8bea3c87182","modified":1637430799223},{"_id":"public/tags/Arduino/index.html","hash":"8c65e89a123d60cf7d4f042c230d6a804e2b09ad","modified":1637430615494},{"_id":"public/tags/Proteus/index.html","hash":"caca79f9e04456e62e11a50049ecab43c2b05458","modified":1637430615494},{"_id":"public/tags/Digital-Design/index.html","hash":"394eb44e07e79f950a129449e7aef463702c80d0","modified":1637430615494},{"_id":"public/tags/Curriculum-Integration/index.html","hash":"949b0ac19aa760eabcc86ec5bed7ced2d7ee6921","modified":1637430615494},{"_id":"public/2021/04/02/compim/index.html","hash":"2d087039d5186f18f2c740b45d6301c7583817e9","modified":1637430615494},{"_id":"public/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1618135891829},{"_id":"public/img/avatar.png","hash":"728a2c5ba86b4c21756c00a4e69237e9fea881e9","modified":1618135891829},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1618135891829},{"_id":"public/2021/04/11/flow/flow.png","hash":"90d9f9334cefbd69485d087707e72fa6b94d6485","modified":1618135891829},{"_id":"public/2021/04/04/mux-demux/data_routing.jpg","hash":"4e4383589b937a89183060269694c59ce2749814","modified":1618135891829},{"_id":"public/2021/04/04/mux-demux/spdt.png","hash":"96a479f9caf97e978b50dbe6857ce9ab6a9b027b","modified":1618135891829},{"_id":"public/2021/04/02/compim/1.png","hash":"b1f07b508a3de1aa2b9e56d2e38dba664f784041","modified":1618135891829},{"_id":"public/2021/04/10/knowledge/flat.png","hash":"8b0f5ad9f5416b6b5f1c2ecbc9d3c82814ee8433","modified":1618135891829},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1618135891829},{"_id":"public/css/404.css","hash":"712ecbf4ac203ab5f1ea92989c0f0062a3d0aca9","modified":1618135891829},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1618135891829},{"_id":"public/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1618135891829},{"_id":"public/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1618135891829},{"_id":"public/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1618135891829},{"_id":"public/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1618135891829},{"_id":"public/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1618135891829},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1618135891829},{"_id":"public/js/scroll.js","hash":"fcc20d10c936d49c3f0cd2a97030ecaf64d213c8","modified":1618135891829},{"_id":"public/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1618135891829},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1618135891829},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1618135891829},{"_id":"public/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1618135891829},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1618135891829},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1618135891829},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1618135891829},{"_id":"public/css/index.css","hash":"1b9ffaa1acbba5480139b625d4a5f02b0db2e33e","modified":1618135891829},{"_id":"public/2021/04/02/compim/2.png","hash":"5111990eb2511a5e9314a960bc118d9ff656f76e","modified":1618135891829},{"_id":"public/2021/04/02/compim/3.png","hash":"5842d8b0e3c6dd4d9c5ec611a01814533d41ec60","modified":1618135891829},{"_id":"public/2021/04/02/compim/5.png","hash":"c9bcf9756e2191c474809427b9005bd2ff839296","modified":1618135891829},{"_id":"public/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1618135891829},{"_id":"public/2021/04/02/compim/4.png","hash":"016b74984070f0d11da9333de6a066d959d55075","modified":1618135891829},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1618135891829},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1618135891829},{"_id":"public/2021/04/04/mux-demux/mux_demux.png","hash":"ceea3e881a2c11b23b05f6eded293722c8ea213b","modified":1618135891829},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1618135891829},{"_id":"public/2021/04/02/compim/6.gif","hash":"62789d595a2601482032f5b4bc7c3fdaa4818bf2","modified":1618135891829},{"_id":"public/2021/04/04/mux-demux/mux_demux.gif","hash":"f7bc76647df70bc4723075b142be7cdb446f43b2","modified":1618135891829},{"_id":"public/2021/04/10/knowledge/sine.png","hash":"b3b38457a37aa15398f0bf14014341d67432afc6","modified":1618135891829},{"_id":"source/_posts/project-process.md","hash":"aede158360fb026b58a8f5dc94e82ec938dba27e","modified":1627462680647},{"_id":"source/_posts/project-process/74lvc4245.png","hash":"00621ccb87ff6acf48559af77effb7cdcd39dba4","modified":1627459812934},{"_id":"source/_posts/project-process/datasheet_3.3v.png","hash":"1cf725bf9a76c92c11d0be4bbcf91db568cb72b5","modified":1627459072259},{"_id":"source/_posts/project-process/3.3v.png","hash":"e408b051f9f2eeb66855f5ad82d32d4b5df29d38","modified":1627457070639},{"_id":"source/_posts/project-process/5v.png","hash":"b5ec906c15af268030dddeb310703e6dc2167014","modified":1627457088116},{"_id":"source/_posts/project-process/datasheet_5v.png","hash":"be72c1d850be0003dfbdee33aa2c477ac095fca0","modified":1627459292924},{"_id":"source/_posts/project-process/interface.png","hash":"c071436281a4cbae318e0ae68bdb6868dd4a5fa7","modified":1627456701956},{"_id":"source/_posts/project-process/stm32f10x.png","hash":"b449718a9d338c1e5078206f182fcd228509a570","modified":1627462173224},{"_id":"source/_posts/project-process/step-mxo2.png","hash":"0792112b0324865596eb935bb0014e5610107945","modified":1627457263488},{"_id":"source/_posts/project-process/compatible.png","hash":"169c19b83b5cc94563845695a5573092ae1a513c","modified":1627460833205},{"_id":"public/2021/07/28/project-process/index.html","hash":"d18137f4590a2f48c981c0b0bedcafb7389f22f9","modified":1637430615494},{"_id":"public/archives/2021/07/index.html","hash":"28ce6959d47b0613c116ff61137f0f305c88938f","modified":1637430615494},{"_id":"public/tags/Pro-3/index.html","hash":"751a83a326bd4cfecb9710e251582118aeb6a63d","modified":1637430615494},{"_id":"public/2021/07/28/project-process/74lvc4245.png","hash":"00621ccb87ff6acf48559af77effb7cdcd39dba4","modified":1627462390102},{"_id":"public/2021/07/28/project-process/datasheet_3.3v.png","hash":"1cf725bf9a76c92c11d0be4bbcf91db568cb72b5","modified":1627462390102},{"_id":"public/2021/07/28/project-process/5v.png","hash":"b5ec906c15af268030dddeb310703e6dc2167014","modified":1627462390102},{"_id":"public/2021/07/28/project-process/datasheet_5v.png","hash":"be72c1d850be0003dfbdee33aa2c477ac095fca0","modified":1627462390102},{"_id":"public/2021/07/28/project-process/interface.png","hash":"c071436281a4cbae318e0ae68bdb6868dd4a5fa7","modified":1627462390102},{"_id":"public/2021/07/28/project-process/stm32f10x.png","hash":"b449718a9d338c1e5078206f182fcd228509a570","modified":1627462390102},{"_id":"public/2021/07/28/project-process/3.3v.png","hash":"e408b051f9f2eeb66855f5ad82d32d4b5df29d38","modified":1627462390102},{"_id":"public/2021/07/28/project-process/step-mxo2.png","hash":"0792112b0324865596eb935bb0014e5610107945","modified":1627462390102},{"_id":"public/2021/07/28/project-process/compatible.png","hash":"169c19b83b5cc94563845695a5573092ae1a513c","modified":1627462390102},{"_id":"source/_posts/AHB-Addressing.md","hash":"67cfe5cfc7c8a043711813e005a397477da8a8d7","modified":1627548766985},{"_id":"source/_posts/AHB-Addressing/AHB_stm32f10x.h.png","hash":"93eac212acba1e6d3445acbd6f73148a19a11c9d","modified":1627547353894},{"_id":"source/_posts/AHB-Addressing/SDIO_stm32f10x.h.png","hash":"07e731e42d6b4687d7034afa0284a5c6371c2620","modified":1627547222182},{"_id":"source/_posts/AHB-Addressing/SDIO_addr.png","hash":"b468c040e94b83a3cb8f436be0b0e7d27827518c","modified":1627547518601},{"_id":"source/_posts/AHB-Addressing/SDIO_arch.png","hash":"5c7567ca514fc2df5ebb74e1cc473dc251d0eef0","modified":1627547467249},{"_id":"public/2021/07/29/AHB-Addressing/index.html","hash":"735cb2b5fa23ffbf87bda7975bbdc15dd7d956b9","modified":1637430615494},{"_id":"public/tags/STM32F10xxx/index.html","hash":"27c2032ff1bde921c29b5bee6fe2b43bdd623384","modified":1637430615494},{"_id":"public/tags/Embedded-System/index.html","hash":"49e007022a56276c39b5cec8356099cc03ff651f","modified":1637430615494},{"_id":"public/2021/07/29/AHB-Addressing/AHB_stm32f10x.h.png","hash":"93eac212acba1e6d3445acbd6f73148a19a11c9d","modified":1627548585383},{"_id":"public/2021/07/29/AHB-Addressing/SDIO_arch.png","hash":"5c7567ca514fc2df5ebb74e1cc473dc251d0eef0","modified":1627548585383},{"_id":"public/2021/07/29/AHB-Addressing/SDIO_addr.png","hash":"b468c040e94b83a3cb8f436be0b0e7d27827518c","modified":1627548585383},{"_id":"public/2021/07/29/AHB-Addressing/SDIO_stm32f10x.h.png","hash":"07e731e42d6b4687d7034afa0284a5c6371c2620","modified":1627548585383},{"_id":"source/_posts/ToggleBits.md","hash":"3fea4de4ad753a783e2a113932cd5009f73aec9d","modified":1628657426575},{"_id":"source/_posts/ToggleBits/fire's.png","hash":"2bae50102f7cbf78e9a057ff853b81228185e501","modified":1628654546467},{"_id":"source/_posts/ToggleBits/main.png","hash":"e844130012be8ce7f34418ee336b2710a23383ab","modified":1628654039143},{"_id":"source/_posts/ToggleBits/simulation.gif","hash":"b369aa6c5e9a8fb2a96f7ce083e729e96c8e11d2","modified":1628656484691},{"_id":"source/_posts/ToggleBits/trans_1.png","hash":"81f7b7c1651941f7f6b2c6bcdb6453f8727fbf54","modified":1628655468835},{"_id":"source/_posts/ToggleBits/trans_2.png","hash":"2e6e48acc74c3a3072f2db7e2febd02d7d7b332d","modified":1628655664973},{"_id":"public/2021/08/11/ToggleBits/index.html","hash":"5af93a98560e6ec52413acbb960475808380b123","modified":1637430615494},{"_id":"public/archives/2021/08/index.html","hash":"479a263df13aa8157944f45330c4f16eed3c4126","modified":1637430615494},{"_id":"public/2021/08/11/ToggleBits/main.png","hash":"e844130012be8ce7f34418ee336b2710a23383ab","modified":1628656563249},{"_id":"public/2021/08/11/ToggleBits/fire's.png","hash":"2bae50102f7cbf78e9a057ff853b81228185e501","modified":1628656563249},{"_id":"public/2021/08/11/ToggleBits/trans_1.png","hash":"81f7b7c1651941f7f6b2c6bcdb6453f8727fbf54","modified":1628656563249},{"_id":"public/2021/08/11/ToggleBits/simulation.gif","hash":"b369aa6c5e9a8fb2a96f7ce083e729e96c8e11d2","modified":1628656563249},{"_id":"public/2021/08/11/ToggleBits/trans_2.png","hash":"2e6e48acc74c3a3072f2db7e2febd02d7d7b332d","modified":1628656563249},{"_id":"source/_posts/ToggleBits/trans_3.png","hash":"343a8cbc00f3ccca7586173c1ab463dfde3a9b90","modified":1628656918044},{"_id":"public/2021/08/11/ToggleBits/trans_3.png","hash":"343a8cbc00f3ccca7586173c1ab463dfde3a9b90","modified":1628657035059},{"_id":"source/_posts/nvic.md","hash":"b411e199c5521364efabc7ffef7d0f5aa8e41326","modified":1629505183921},{"_id":"source/_posts/nvic/IRQHandler_define.png","hash":"6d52d6bf376aa569762ac7abf7aac25b3d00d40c","modified":1628955866874},{"_id":"source/_posts/nvic/PriorityConfig.png","hash":"99a87fe269d4cd92fb67968d93ce9bf97bf37b95","modified":1628960501633},{"_id":"source/_posts/nvic/EXTI_map.png","hash":"79b6649f6379c54edbaac17840a67154e639d0cf","modified":1628960752569},{"_id":"source/_posts/nvic/Vector_Map.png","hash":"adb1e72fb3b65198bf2aeceb2954215fa25ecba7","modified":1628955377957},{"_id":"source/_posts/nvic/PriorityGroupConfig.png","hash":"ef541ab588a6192d2d37944d498198252722bd0a","modified":1628959485472},{"_id":"source/_posts/nvic/PriorityGroupConfig_CM3.png","hash":"445fe626502c52703831add3cd38f1e60e1c75d2","modified":1628959527193},{"_id":"source/_posts/nvic/8051_vector.png","hash":"dc2368ecc02310c7a3a637a1da9e1fc0142091d7","modified":1628961039304},{"_id":"source/_posts/nvic/8051_jmp.png","hash":"86bc17caa08bc46092599f131314f40d4b3d78fc","modified":1628960662993},{"_id":"public/2021/08/14/nvic/index.html","hash":"6ddddf507336e2f6036cdd8ee11aa50c7bc6db62","modified":1637430615494},{"_id":"public/2021/08/14/nvic/IRQHandler_define.png","hash":"6d52d6bf376aa569762ac7abf7aac25b3d00d40c","modified":1628960843037},{"_id":"public/2021/08/14/nvic/PriorityConfig.png","hash":"99a87fe269d4cd92fb67968d93ce9bf97bf37b95","modified":1628960843037},{"_id":"public/2021/08/14/nvic/EXTI_map.png","hash":"79b6649f6379c54edbaac17840a67154e639d0cf","modified":1628960843037},{"_id":"public/2021/08/14/nvic/Vector_Map.png","hash":"adb1e72fb3b65198bf2aeceb2954215fa25ecba7","modified":1628960843037},{"_id":"public/2021/08/14/nvic/PriorityGroupConfig.png","hash":"ef541ab588a6192d2d37944d498198252722bd0a","modified":1628960843037},{"_id":"public/2021/08/14/nvic/PriorityGroupConfig_CM3.png","hash":"445fe626502c52703831add3cd38f1e60e1c75d2","modified":1628960843037},{"_id":"public/2021/08/14/nvic/8051_vector.png","hash":"dc2368ecc02310c7a3a637a1da9e1fc0142091d7","modified":1628961813010},{"_id":"public/2021/08/14/nvic/8051_jmp.png","hash":"86bc17caa08bc46092599f131314f40d4b3d78fc","modified":1628960843037},{"_id":"source/_posts/nvic/nested.gif","hash":"1c68affcdeca2e178fdea5bf587cbbd8df1f6c35","modified":1628964460314},{"_id":"public/2021/08/14/nvic/nested.gif","hash":"1c68affcdeca2e178fdea5bf587cbbd8df1f6c35","modified":1628964497819},{"_id":"source/_posts/fritzing-dll-error.md","hash":"419d7e49d10a86035e5b1acf8a965ad68da6c010","modified":1629435584220},{"_id":"source/_posts/fritzing-dll-error/error.png","hash":"8b846b62bfa496e0e288a1b929c899d87d3c9483","modified":1629434212241},{"_id":"source/_posts/fritzing-dll-error/adapter_modified.png","hash":"b9707011aff9c1f74cf2653ce3874e7c1956e0c3","modified":1629434491959},{"_id":"source/_posts/fritzing-dll-error/adapter.png","hash":"e40a46f1bf4ff2d72c36ebd11494d8e74f9c5c86","modified":1622220601211},{"_id":"public/2021/08/20/fritzing-dll-error/index.html","hash":"864c6db524b08d77913e578e47c7171ddd4d8bf5","modified":1637430615494},{"_id":"public/tags/Fritzing/index.html","hash":"fe864199025711ee151d13af98670e305007c237","modified":1637430615494},{"_id":"public/2021/08/20/fritzing-dll-error/error.png","hash":"8b846b62bfa496e0e288a1b929c899d87d3c9483","modified":1629434519497},{"_id":"public/2021/08/20/fritzing-dll-error/adapter_modified.png","hash":"b9707011aff9c1f74cf2653ce3874e7c1956e0c3","modified":1629434519497},{"_id":"public/2021/08/20/fritzing-dll-error/adapter.png","hash":"e40a46f1bf4ff2d72c36ebd11494d8e74f9c5c86","modified":1629434519497},{"_id":"source/_posts/reset-run.md","hash":"c8e66f98227bf53485d79f9f498553068ac207b4","modified":1629435529937},{"_id":"source/_posts/reset-run/Enable.png","hash":"248223bf962b97109bd134a294ffdee0ad2962ba","modified":1629435461991},{"_id":"public/2021/08/20/reset-run/index.html","hash":"7f7c0f24cb38de04874d7f9fe4be568d2fcedc48","modified":1637430615494},{"_id":"public/archives/page/2/index.html","hash":"564472a3a77712096123c06ff84f62d8e2d817f2","modified":1637430615494},{"_id":"public/archives/2021/page/2/index.html","hash":"cb6fd9cfc166170552626f65e2e32b13ca168e38","modified":1637430615494},{"_id":"public/page/2/index.html","hash":"deb337f5f89c29776f377732908fcc3b1daef332","modified":1637430615494},{"_id":"public/tags/MDK/index.html","hash":"c2dccf2d239681ca7d3e50dfaf64991b506b83e2","modified":1637430615494},{"_id":"public/2021/08/20/reset-run/Enable.png","hash":"248223bf962b97109bd134a294ffdee0ad2962ba","modified":1629435539259},{"_id":"source/_posts/remapping.md","hash":"0e0840e4d724014228aebc0109d1da4cb256cb93","modified":1629451507760},{"_id":"source/_posts/remapping/remap_func.png","hash":"563f7109ffb098f102a245beba3f9cb6f0120b0c","modified":1629450140877},{"_id":"source/_posts/remapping/4_channels.png","hash":"278fa8a5e400831a9ee75b6dbe9f15330c0d8b13","modified":1629446592391},{"_id":"source/_posts/remapping/table.png","hash":"8cac999fab2af51b6dd43ec77f708c65c80e4d65","modified":1629449344498},{"_id":"source/_posts/remapping/connections.png","hash":"67833f09c43f1379693ba31e6cec38b95a150607","modified":1629447811194},{"_id":"source/_posts/remapping/unsoldered.png","hash":"c3591a8521952788d441321b326b070cd84a2dfd","modified":1629447735170},{"_id":"public/2021/08/20/remapping/index.html","hash":"9df94111ae9151551b26ddd818b088a81f056705","modified":1637430615494},{"_id":"public/tags/Nucleo/index.html","hash":"487bc0196a18e9f173522df18e855e966fc708f7","modified":1637430615494},{"_id":"public/2021/08/20/remapping/remap_func.png","hash":"563f7109ffb098f102a245beba3f9cb6f0120b0c","modified":1629451237292},{"_id":"public/2021/08/20/remapping/4_channels.png","hash":"278fa8a5e400831a9ee75b6dbe9f15330c0d8b13","modified":1629451237292},{"_id":"public/2021/08/20/remapping/table.png","hash":"8cac999fab2af51b6dd43ec77f708c65c80e4d65","modified":1629451237292},{"_id":"public/2021/08/20/remapping/connections.png","hash":"67833f09c43f1379693ba31e6cec38b95a150607","modified":1629451237292},{"_id":"public/2021/08/20/remapping/unsoldered.png","hash":"c3591a8521952788d441321b326b070cd84a2dfd","modified":1629451237292},{"_id":"source/_posts/at24c32/one_byte.png","hash":"36ea8c2fc39a20e5855fd55fe5cb501a628d7898","modified":1629908864298},{"_id":"source/_posts/at24c32/two_bytes.png","hash":"306df1c616132b2c53338b111d3962e1a89479c7","modified":1629908819239},{"_id":"source/_posts/at24c32.md","hash":"bf13e77c6f3e28f155c8838ed0c192458a15f643","modified":1629909787842},{"_id":"source/_posts/at24c32/origin.png","hash":"e248479d0c41aeaea05bb77f6a6999bde50485fc","modified":1629905859046},{"_id":"source/_posts/at24c32/serial.png","hash":"7bd44b6afac0b3363d64db3837ef508e0ab675df","modified":1629908972572},{"_id":"source/_posts/at24c32/error1.png","hash":"2bb37ed4084ac421635b2d8d91175262a38f58f5","modified":1629908589197},{"_id":"source/_posts/at24c32/error2.png","hash":"479cff8fcd93368063b5c0faf1fc580b42c4e41b","modified":1629908533277},{"_id":"public/2021/08/25/at24c32/index.html","hash":"963b41248dc6bee7ebac68f8cb376cc1c150f617","modified":1637430615494},{"_id":"public/tags/I2C/index.html","hash":"d3435c606412ac56b2cf117f092b3453d2bbb3af","modified":1637430615494},{"_id":"public/2021/08/25/at24c32/one_byte.png","hash":"36ea8c2fc39a20e5855fd55fe5cb501a628d7898","modified":1629909072710},{"_id":"public/2021/08/25/at24c32/two_bytes.png","hash":"306df1c616132b2c53338b111d3962e1a89479c7","modified":1629909072710},{"_id":"public/2021/08/25/at24c32/origin.png","hash":"e248479d0c41aeaea05bb77f6a6999bde50485fc","modified":1629909072710},{"_id":"public/2021/08/25/at24c32/serial.png","hash":"7bd44b6afac0b3363d64db3837ef508e0ab675df","modified":1629909072710},{"_id":"public/2021/08/25/at24c32/error1.png","hash":"2bb37ed4084ac421635b2d8d91175262a38f58f5","modified":1629909072710},{"_id":"public/2021/08/25/at24c32/error2.png","hash":"479cff8fcd93368063b5c0faf1fc580b42c4e41b","modified":1629909072710},{"_id":"source/_posts/linux-c-nano.md","hash":"778436c563031899b545b3a55f341a1acc819cdc","modified":1634628182400},{"_id":"source/_posts/linux-c-nano/c.nanorc.png","hash":"53f9227e9f5f47f0f5207b515f04128aad763387","modified":1634626882551},{"_id":"source/_posts/linux-c-nano/gdb.png","hash":"2b579f2ea63fb259aa23cedd236ddd45d1952a0e","modified":1634627331997},{"_id":"source/_posts/linux-c-nano/nano.png","hash":"c8115f23a0b76df39a7c024d2dc48783a759bc20","modified":1634627422235},{"_id":"source/_posts/linux-c-nano/nanorc.png","hash":"c8a48cf026b377582fbe8908967337b20a0bf850","modified":1634626925707},{"_id":"source/_posts/linux-c-nano/linux_c.png","hash":"69ec8370fe6473b63b0ef6c85b61388a391fe824","modified":1634627895262},{"_id":"source/_posts/linux-c-nano/8051_c.png","hash":"42486185fc1113fa936fd8e022058c4ab3a6770f","modified":1634627932530},{"_id":"public/2021/10/19/linux-c-nano/index.html","hash":"7b5afcdbf5d34d5fd64a5ba13f4d91d7140ce73c","modified":1637430615494},{"_id":"public/archives/2021/10/index.html","hash":"648b3000681325c27e9001da82b11374a8a8e7bf","modified":1637430615494},{"_id":"public/tags/C-Programming/index.html","hash":"876402ad66416c27a85919f767dff708bd6cb94a","modified":1637430615494},{"_id":"public/tags/Linux/index.html","hash":"47c32aee0fc6df76c15dccd792f2a9ba45d83913","modified":1637430615494},{"_id":"public/2021/10/19/linux-c-nano/c.nanorc.png","hash":"53f9227e9f5f47f0f5207b515f04128aad763387","modified":1634628235557},{"_id":"public/2021/10/19/linux-c-nano/gdb.png","hash":"2b579f2ea63fb259aa23cedd236ddd45d1952a0e","modified":1634628235557},{"_id":"public/2021/10/19/linux-c-nano/nano.png","hash":"c8115f23a0b76df39a7c024d2dc48783a759bc20","modified":1634628235557},{"_id":"public/2021/10/19/linux-c-nano/nanorc.png","hash":"c8a48cf026b377582fbe8908967337b20a0bf850","modified":1634628235557},{"_id":"public/2021/10/19/linux-c-nano/linux_c.png","hash":"69ec8370fe6473b63b0ef6c85b61388a391fe824","modified":1634628235557},{"_id":"public/2021/10/19/linux-c-nano/8051_c.png","hash":"42486185fc1113fa936fd8e022058c4ab3a6770f","modified":1634628235557},{"_id":"source/_posts/nano-font.md","hash":"33f44a4a1618c05e32bc7a7360d10fc9490feb2b","modified":1636214100692},{"_id":"source/_posts/nano-font/attributes.png","hash":"8136d252ffbad071a9dae775ab85231b892a14db","modified":1636212357196},{"_id":"source/_posts/nano-font/regedit.png","hash":"1931efda1ed939d1fc2d69a75d4e7fbce727ba0c","modified":1635858156863},{"_id":"public/2021/11/06/nano-font/index.html","hash":"4186e696853df1e3083f094aae9806392779f813","modified":1637430615494},{"_id":"public/archives/2021/11/index.html","hash":"fd4d324e1983f7e5d9e8bb3e2719fcd6052ba816","modified":1637430615494},{"_id":"public/2021/11/06/nano-font/attributes.png","hash":"8136d252ffbad071a9dae775ab85231b892a14db","modified":1636214105137},{"_id":"public/2021/11/06/nano-font/regedit.png","hash":"1931efda1ed939d1fc2d69a75d4e7fbce727ba0c","modified":1636214105137},{"_id":"source/_posts/glimpse.md","hash":"818b5d34b41237a3d1387824e203b6cea3c57f51","modified":1637430795465},{"_id":"source/_posts/glimpse/lab_3.png","hash":"3726a2928f691146b5992f83c1a9c71e0b8f7b84","modified":1637430304962},{"_id":"source/_posts/glimpse/lab_1.png","hash":"abfedd6b65680ac1de760e08e21f3ddd8223d756","modified":1637430180378},{"_id":"source/_posts/glimpse/theory_3.png","hash":"24ee9f49b78c7e7603f83fcbdefdb64aec22de92","modified":1637430033780},{"_id":"source/_posts/glimpse/theory_1.png","hash":"1488098024c88e71681beaa67dec20305a804194","modified":1637430109559},{"_id":"source/_posts/glimpse/theory_2.png","hash":"49f9abecc98e1a08eed33d1ff2f1b448215a6c96","modified":1637429987773},{"_id":"source/_posts/glimpse/lab_2.png","hash":"ed3c9b25eeaa145b14d8efe87d48e9e8d88bb689","modified":1637430276923},{"_id":"public/2021/11/21/glimpse/index.html","hash":"064c8cdc868cce3870283dd3eeebdeb74c670080","modified":1637430799223},{"_id":"public/2021/11/21/glimpse/lab_3.png","hash":"3726a2928f691146b5992f83c1a9c71e0b8f7b84","modified":1637430615494},{"_id":"public/2021/11/21/glimpse/theory_3.png","hash":"24ee9f49b78c7e7603f83fcbdefdb64aec22de92","modified":1637430615494},{"_id":"public/2021/11/21/glimpse/lab_1.png","hash":"abfedd6b65680ac1de760e08e21f3ddd8223d756","modified":1637430615494},{"_id":"public/2021/11/21/glimpse/theory_1.png","hash":"1488098024c88e71681beaa67dec20305a804194","modified":1637430615494},{"_id":"public/2021/11/21/glimpse/theory_2.png","hash":"49f9abecc98e1a08eed33d1ff2f1b448215a6c96","modified":1637430615494},{"_id":"public/2021/11/21/glimpse/lab_2.png","hash":"ed3c9b25eeaa145b14d8efe87d48e9e8d88bb689","modified":1637430615494}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2021-04-02T11:11:28.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-04-02 19:11:28\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-07-28T05:39:27.091Z","path":"tags/index.html","_id":"cknd0c08z0000rwl6ebbz00ur","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"How to connect COMPIM (Proteus) with Serial Monitor (Arduino IDE)","date":"2021-04-02T11:01:17.000Z","author":"Epiapoq","_content":"\n![](6.gif)\n\n<font size=4>This is a tutorial about how to connect Proteus with Arduino IDE by serial port. Take BCD Adder for an instance.</font><!-- more -->\n\n<font size=4>1. Install [virtual serial port driver](https://www.eltima.com/vspd-post-download.html) for creating virtual serial port pair.</font>\n\n![fig.1 VSPD](1.png)\n\n![fig.2 Instrument Manager](2.png)\n\n<font size=4>2. Pick \"COMPIM\" component in Proteus and setup baud rate and port number, so does \"VIRTUAL TERMINAL\".</font>\n\n![fig.3 COMPIM](3.png)\n\n![fig.4 VIRTUAL TERMINAL](4.png)\n\n<font size=4>3. Setup Serial Monitor in Arduino IDE.</font>\n\n![fig.5 Serial Monitor](5.png)\n\n<font size=4>Now run simulation in Proteus and input addend in Serial Monitor in Arduino IDE. The data will be transmitted and received by COM1/COM2.</font>\n\n![fig.6 Result](6.gif)\n\n---\n\n<font color=888888>_Demo codes:_</font>\n\n```c++\n/*  \n    LAB2: Addends generator for FPGA BCD adder\n    Programming & Hardware By Epiapoq\n    Started 29-03-2021\n    Modified 30-03-2021\n    Version 1.0\n    Reference:\n    https://github.com/whatuptkhere/paralleloslam/blob/master/Paralleloslam.ino\n*/\n\nint firstByte = 0; // the first addend from serial port\nint secondByte = 0; // the second addend from serial port\nint sum = 0; // the sum\nint cb = 0; // check bit, which is used to check the number of the incomming addend\n\n/* each addend of BCD adder consists of only 4 bits, so here \njust define the lower nibble of the firstByte or secondByte */\nconst int firstByte_0 = 4; // LSB of first addend\nconst int firstByte_1 = 5;\nconst int firstByte_2 = 6;\nconst int firstByte_3 = 7; // MSB of first addend\nconst int secondByte_0 = 8; // LSB of second addend\nconst int secondByte_1 = 9;\nconst int secondByte_2 = 10;\nconst int secondByte_3 = 11; // MSB of second addend\n\nvoid setup() {\n    Serial.begin(9600); // open serial port, set data rate to 9600 bps\n    pinMode(firstByte_0, OUTPUT);\n    pinMode(firstByte_1, OUTPUT);\n    pinMode(firstByte_2, OUTPUT);\n    pinMode(firstByte_3, OUTPUT);\n    pinMode(secondByte_0, OUTPUT);\n    pinMode(secondByte_1, OUTPUT);\n    pinMode(secondByte_2, OUTPUT);\n    pinMode(secondByte_3, OUTPUT);\n}\n\nvoid loop() {\n    if (Serial.available() > 0 && (cb == 0)) { // read the first addend\n        firstByte = Serial.read() - 48;\n        \n        /* serial in from monitor and parallel out to FPGA */\n        digitalWrite(firstByte_0, firstByte & 0x01); // send LSB of first addend\n        digitalWrite(firstByte_1, firstByte & 0x02);\n        digitalWrite(firstByte_2, firstByte & 0x04);\n        digitalWrite(firstByte_3, firstByte & 0x08);\n        \n        Serial.print(firstByte);\n        Serial.print('+');\n        cb = 1;\n    }\n    else if ((Serial.available() > 0) && (cb == 1)) { // read the second addend\n        secondByte = Serial.read() - 48;\n\n        /* serial in from monitor and parallel out to FPGA */\n        digitalWrite(secondByte_0, secondByte & 0x01);\n        digitalWrite(secondByte_1, secondByte & 0x02);\n        digitalWrite(secondByte_2, secondByte & 0x04);\n        digitalWrite(secondByte_3, secondByte & 0x08);\n        \n        Serial.print(secondByte);\n        Serial.print('=');\n        sum = firstByte + secondByte;\n        Serial.print(sum); \n        Serial.println('\\n');\n        cb = 0;\n    }\n}\n```","source":"_posts/compim.md","raw":"---\ntitle: How to connect COMPIM (Proteus) with Serial Monitor (Arduino IDE) \ndate: 2021-04-02 19:01:17\nauthor: Epiapoq\ntags: \n    - Arduino\n    - Proteus\n    - Digital Design\n    - Curriculum Integration \n---\n\n![](6.gif)\n\n<font size=4>This is a tutorial about how to connect Proteus with Arduino IDE by serial port. Take BCD Adder for an instance.</font><!-- more -->\n\n<font size=4>1. Install [virtual serial port driver](https://www.eltima.com/vspd-post-download.html) for creating virtual serial port pair.</font>\n\n![fig.1 VSPD](1.png)\n\n![fig.2 Instrument Manager](2.png)\n\n<font size=4>2. Pick \"COMPIM\" component in Proteus and setup baud rate and port number, so does \"VIRTUAL TERMINAL\".</font>\n\n![fig.3 COMPIM](3.png)\n\n![fig.4 VIRTUAL TERMINAL](4.png)\n\n<font size=4>3. Setup Serial Monitor in Arduino IDE.</font>\n\n![fig.5 Serial Monitor](5.png)\n\n<font size=4>Now run simulation in Proteus and input addend in Serial Monitor in Arduino IDE. The data will be transmitted and received by COM1/COM2.</font>\n\n![fig.6 Result](6.gif)\n\n---\n\n<font color=888888>_Demo codes:_</font>\n\n```c++\n/*  \n    LAB2: Addends generator for FPGA BCD adder\n    Programming & Hardware By Epiapoq\n    Started 29-03-2021\n    Modified 30-03-2021\n    Version 1.0\n    Reference:\n    https://github.com/whatuptkhere/paralleloslam/blob/master/Paralleloslam.ino\n*/\n\nint firstByte = 0; // the first addend from serial port\nint secondByte = 0; // the second addend from serial port\nint sum = 0; // the sum\nint cb = 0; // check bit, which is used to check the number of the incomming addend\n\n/* each addend of BCD adder consists of only 4 bits, so here \njust define the lower nibble of the firstByte or secondByte */\nconst int firstByte_0 = 4; // LSB of first addend\nconst int firstByte_1 = 5;\nconst int firstByte_2 = 6;\nconst int firstByte_3 = 7; // MSB of first addend\nconst int secondByte_0 = 8; // LSB of second addend\nconst int secondByte_1 = 9;\nconst int secondByte_2 = 10;\nconst int secondByte_3 = 11; // MSB of second addend\n\nvoid setup() {\n    Serial.begin(9600); // open serial port, set data rate to 9600 bps\n    pinMode(firstByte_0, OUTPUT);\n    pinMode(firstByte_1, OUTPUT);\n    pinMode(firstByte_2, OUTPUT);\n    pinMode(firstByte_3, OUTPUT);\n    pinMode(secondByte_0, OUTPUT);\n    pinMode(secondByte_1, OUTPUT);\n    pinMode(secondByte_2, OUTPUT);\n    pinMode(secondByte_3, OUTPUT);\n}\n\nvoid loop() {\n    if (Serial.available() > 0 && (cb == 0)) { // read the first addend\n        firstByte = Serial.read() - 48;\n        \n        /* serial in from monitor and parallel out to FPGA */\n        digitalWrite(firstByte_0, firstByte & 0x01); // send LSB of first addend\n        digitalWrite(firstByte_1, firstByte & 0x02);\n        digitalWrite(firstByte_2, firstByte & 0x04);\n        digitalWrite(firstByte_3, firstByte & 0x08);\n        \n        Serial.print(firstByte);\n        Serial.print('+');\n        cb = 1;\n    }\n    else if ((Serial.available() > 0) && (cb == 1)) { // read the second addend\n        secondByte = Serial.read() - 48;\n\n        /* serial in from monitor and parallel out to FPGA */\n        digitalWrite(secondByte_0, secondByte & 0x01);\n        digitalWrite(secondByte_1, secondByte & 0x02);\n        digitalWrite(secondByte_2, secondByte & 0x04);\n        digitalWrite(secondByte_3, secondByte & 0x08);\n        \n        Serial.print(secondByte);\n        Serial.print('=');\n        sum = firstByte + secondByte;\n        Serial.print(sum); \n        Serial.println('\\n');\n        cb = 0;\n    }\n}\n```","slug":"compim","published":1,"updated":"2021-07-28T05:39:26.943Z","_id":"cknd0c0960001rwl6d1k5dt0s","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/2021/04/02/compim/6.gif\"></p>\n<p><font size=\"4\">This is a tutorial about how to connect Proteus with Arduino IDE by serial port. Take BCD Adder for an instance.</font><span id=\"more\"></span></p>\n<p><font size=\"4\">1. Install <a href=\"https://www.eltima.com/vspd-post-download.html\">virtual serial port driver</a> for creating virtual serial port pair.</font></p>\n<p><img src=\"/2021/04/02/compim/1.png\" alt=\"fig.1 VSPD\"></p>\n<p><img src=\"/2021/04/02/compim/2.png\" alt=\"fig.2 Instrument Manager\"></p>\n<p><font size=\"4\">2. Pick “COMPIM” component in Proteus and setup baud rate and port number, so does “VIRTUAL TERMINAL”.</font></p>\n<p><img src=\"/2021/04/02/compim/3.png\" alt=\"fig.3 COMPIM\"></p>\n<p><img src=\"/2021/04/02/compim/4.png\" alt=\"fig.4 VIRTUAL TERMINAL\"></p>\n<p><font size=\"4\">3. Setup Serial Monitor in Arduino IDE.</font></p>\n<p><img src=\"/2021/04/02/compim/5.png\" alt=\"fig.5 Serial Monitor\"></p>\n<p><font size=\"4\">Now run simulation in Proteus and input addend in Serial Monitor in Arduino IDE. The data will be transmitted and received by COM1/COM2.</font></p>\n<p><img src=\"/2021/04/02/compim/6.gif\" alt=\"fig.6 Result\"></p>\n<hr>\n<p><font color=\"888888\"><em>Demo codes:</em></font></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*  </span></span><br><span class=\"line\"><span class=\"comment\">    LAB2: Addends generator for FPGA BCD adder</span></span><br><span class=\"line\"><span class=\"comment\">    Programming &amp; Hardware By Epiapoq</span></span><br><span class=\"line\"><span class=\"comment\">    Started 29-03-2021</span></span><br><span class=\"line\"><span class=\"comment\">    Modified 30-03-2021</span></span><br><span class=\"line\"><span class=\"comment\">    Version 1.0</span></span><br><span class=\"line\"><span class=\"comment\">    Reference:</span></span><br><span class=\"line\"><span class=\"comment\">    https://github.com/whatuptkhere/paralleloslam/blob/master/Paralleloslam.ino</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> firstByte = <span class=\"number\">0</span>; <span class=\"comment\">// the first addend from serial port</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> secondByte = <span class=\"number\">0</span>; <span class=\"comment\">// the second addend from serial port</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">// the sum</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cb = <span class=\"number\">0</span>; <span class=\"comment\">// check bit, which is used to check the number of the incomming addend</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* each addend of BCD adder consists of only 4 bits, so here </span></span><br><span class=\"line\"><span class=\"comment\">just define the lower nibble of the firstByte or secondByte */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> firstByte_0 = <span class=\"number\">4</span>; <span class=\"comment\">// LSB of first addend</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> firstByte_1 = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> firstByte_2 = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> firstByte_3 = <span class=\"number\">7</span>; <span class=\"comment\">// MSB of first addend</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> secondByte_0 = <span class=\"number\">8</span>; <span class=\"comment\">// LSB of second addend</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> secondByte_1 = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> secondByte_2 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> secondByte_3 = <span class=\"number\">11</span>; <span class=\"comment\">// MSB of second addend</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Serial.<span class=\"built_in\">begin</span>(<span class=\"number\">9600</span>); <span class=\"comment\">// open serial port, set data rate to 9600 bps</span></span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(firstByte_0, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(firstByte_1, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(firstByte_2, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(firstByte_3, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(secondByte_0, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(secondByte_1, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(secondByte_2, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(secondByte_3, OUTPUT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Serial.<span class=\"built_in\">available</span>() &gt; <span class=\"number\">0</span> &amp;&amp; (cb == <span class=\"number\">0</span>)) &#123; <span class=\"comment\">// read the first addend</span></span><br><span class=\"line\">        firstByte = Serial.<span class=\"built_in\">read</span>() - <span class=\"number\">48</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/* serial in from monitor and parallel out to FPGA */</span></span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(firstByte_0, firstByte &amp; <span class=\"number\">0x01</span>); <span class=\"comment\">// send LSB of first addend</span></span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(firstByte_1, firstByte &amp; <span class=\"number\">0x02</span>);</span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(firstByte_2, firstByte &amp; <span class=\"number\">0x04</span>);</span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(firstByte_3, firstByte &amp; <span class=\"number\">0x08</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Serial.<span class=\"built_in\">print</span>(firstByte);</span><br><span class=\"line\">        Serial.<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;+&#x27;</span>);</span><br><span class=\"line\">        cb = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((Serial.<span class=\"built_in\">available</span>() &gt; <span class=\"number\">0</span>) &amp;&amp; (cb == <span class=\"number\">1</span>)) &#123; <span class=\"comment\">// read the second addend</span></span><br><span class=\"line\">        secondByte = Serial.<span class=\"built_in\">read</span>() - <span class=\"number\">48</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* serial in from monitor and parallel out to FPGA */</span></span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(secondByte_0, secondByte &amp; <span class=\"number\">0x01</span>);</span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(secondByte_1, secondByte &amp; <span class=\"number\">0x02</span>);</span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(secondByte_2, secondByte &amp; <span class=\"number\">0x04</span>);</span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(secondByte_3, secondByte &amp; <span class=\"number\">0x08</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Serial.<span class=\"built_in\">print</span>(secondByte);</span><br><span class=\"line\">        Serial.<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;=&#x27;</span>);</span><br><span class=\"line\">        sum = firstByte + secondByte;</span><br><span class=\"line\">        Serial.<span class=\"built_in\">print</span>(sum); </span><br><span class=\"line\">        Serial.<span class=\"built_in\">println</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        cb = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"/2021/04/02/compim/6.gif\"></p>\n<p><font size=\"4\">This is a tutorial about how to connect Proteus with Arduino IDE by serial port. Take BCD Adder for an instance.</font></p>","more":"<p></p>\n<p><font size=\"4\">1. Install <a href=\"https://www.eltima.com/vspd-post-download.html\">virtual serial port driver</a> for creating virtual serial port pair.</font></p>\n<p><img src=\"/2021/04/02/compim/1.png\" alt=\"fig.1 VSPD\"></p>\n<p><img src=\"/2021/04/02/compim/2.png\" alt=\"fig.2 Instrument Manager\"></p>\n<p><font size=\"4\">2. Pick “COMPIM” component in Proteus and setup baud rate and port number, so does “VIRTUAL TERMINAL”.</font></p>\n<p><img src=\"/2021/04/02/compim/3.png\" alt=\"fig.3 COMPIM\"></p>\n<p><img src=\"/2021/04/02/compim/4.png\" alt=\"fig.4 VIRTUAL TERMINAL\"></p>\n<p><font size=\"4\">3. Setup Serial Monitor in Arduino IDE.</font></p>\n<p><img src=\"/2021/04/02/compim/5.png\" alt=\"fig.5 Serial Monitor\"></p>\n<p><font size=\"4\">Now run simulation in Proteus and input addend in Serial Monitor in Arduino IDE. The data will be transmitted and received by COM1/COM2.</font></p>\n<p><img src=\"/2021/04/02/compim/6.gif\" alt=\"fig.6 Result\"></p>\n<hr>\n<p><font color=\"888888\"><em>Demo codes:</em></font></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*  </span></span><br><span class=\"line\"><span class=\"comment\">    LAB2: Addends generator for FPGA BCD adder</span></span><br><span class=\"line\"><span class=\"comment\">    Programming &amp; Hardware By Epiapoq</span></span><br><span class=\"line\"><span class=\"comment\">    Started 29-03-2021</span></span><br><span class=\"line\"><span class=\"comment\">    Modified 30-03-2021</span></span><br><span class=\"line\"><span class=\"comment\">    Version 1.0</span></span><br><span class=\"line\"><span class=\"comment\">    Reference:</span></span><br><span class=\"line\"><span class=\"comment\">    https://github.com/whatuptkhere/paralleloslam/blob/master/Paralleloslam.ino</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> firstByte = <span class=\"number\">0</span>; <span class=\"comment\">// the first addend from serial port</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> secondByte = <span class=\"number\">0</span>; <span class=\"comment\">// the second addend from serial port</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">// the sum</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cb = <span class=\"number\">0</span>; <span class=\"comment\">// check bit, which is used to check the number of the incomming addend</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* each addend of BCD adder consists of only 4 bits, so here </span></span><br><span class=\"line\"><span class=\"comment\">just define the lower nibble of the firstByte or secondByte */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> firstByte_0 = <span class=\"number\">4</span>; <span class=\"comment\">// LSB of first addend</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> firstByte_1 = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> firstByte_2 = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> firstByte_3 = <span class=\"number\">7</span>; <span class=\"comment\">// MSB of first addend</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> secondByte_0 = <span class=\"number\">8</span>; <span class=\"comment\">// LSB of second addend</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> secondByte_1 = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> secondByte_2 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> secondByte_3 = <span class=\"number\">11</span>; <span class=\"comment\">// MSB of second addend</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Serial.<span class=\"built_in\">begin</span>(<span class=\"number\">9600</span>); <span class=\"comment\">// open serial port, set data rate to 9600 bps</span></span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(firstByte_0, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(firstByte_1, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(firstByte_2, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(firstByte_3, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(secondByte_0, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(secondByte_1, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(secondByte_2, OUTPUT);</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(secondByte_3, OUTPUT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Serial.<span class=\"built_in\">available</span>() &gt; <span class=\"number\">0</span> &amp;&amp; (cb == <span class=\"number\">0</span>)) &#123; <span class=\"comment\">// read the first addend</span></span><br><span class=\"line\">        firstByte = Serial.<span class=\"built_in\">read</span>() - <span class=\"number\">48</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/* serial in from monitor and parallel out to FPGA */</span></span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(firstByte_0, firstByte &amp; <span class=\"number\">0x01</span>); <span class=\"comment\">// send LSB of first addend</span></span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(firstByte_1, firstByte &amp; <span class=\"number\">0x02</span>);</span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(firstByte_2, firstByte &amp; <span class=\"number\">0x04</span>);</span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(firstByte_3, firstByte &amp; <span class=\"number\">0x08</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Serial.<span class=\"built_in\">print</span>(firstByte);</span><br><span class=\"line\">        Serial.<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;+&#x27;</span>);</span><br><span class=\"line\">        cb = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((Serial.<span class=\"built_in\">available</span>() &gt; <span class=\"number\">0</span>) &amp;&amp; (cb == <span class=\"number\">1</span>)) &#123; <span class=\"comment\">// read the second addend</span></span><br><span class=\"line\">        secondByte = Serial.<span class=\"built_in\">read</span>() - <span class=\"number\">48</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* serial in from monitor and parallel out to FPGA */</span></span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(secondByte_0, secondByte &amp; <span class=\"number\">0x01</span>);</span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(secondByte_1, secondByte &amp; <span class=\"number\">0x02</span>);</span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(secondByte_2, secondByte &amp; <span class=\"number\">0x04</span>);</span><br><span class=\"line\">        <span class=\"built_in\">digitalWrite</span>(secondByte_3, secondByte &amp; <span class=\"number\">0x08</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Serial.<span class=\"built_in\">print</span>(secondByte);</span><br><span class=\"line\">        Serial.<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;=&#x27;</span>);</span><br><span class=\"line\">        sum = firstByte + secondByte;</span><br><span class=\"line\">        Serial.<span class=\"built_in\">print</span>(sum); </span><br><span class=\"line\">        Serial.<span class=\"built_in\">println</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        cb = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-04-02T07:32:32.436Z","updated":"2021-04-02T07:32:32.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0c09a0002rwl6h4oj6sv7","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"何为知识的完整性（续）——心流","date":"2021-04-11T09:14:36.000Z","author":"Epiapoq","_content":"\n![](flow.png)\n<!-- more -->\n<font size=4>何以证明何种教学方式是符合教学对象认知结构的呢？问题的答案在于——能否产生FLOW（心流）。</font>\n","source":"_posts/flow.md","raw":"---\ntitle: 何为知识的完整性（续）——心流\ndate: 2021-04-11 17:14:36\nauthor: Epiapoq\ntags: \n    - Curriculum Integration\n---\n\n![](flow.png)\n<!-- more -->\n<font size=4>何以证明何种教学方式是符合教学对象认知结构的呢？问题的答案在于——能否产生FLOW（心流）。</font>\n","slug":"flow","published":1,"updated":"2021-07-28T05:39:26.960Z","_id":"cknd0c09e0004rwl616bl5mg2","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/2021/04/11/flow/flow.png\"></p>\n<span id=\"more\"></span>\n<p><font size=\"4\">何以证明何种教学方式是符合教学对象认知结构的呢？问题的答案在于——能否产生FLOW（心流）。</font></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2021/04/11/flow/flow.png\"></p>","more":"<p><font size=\"4\">何以证明何种教学方式是符合教学对象认知结构的呢？问题的答案在于——能否产生FLOW（心流）。</font></p>"},{"title":"何为知识的完整性？","date":"2021-04-10T07:46:36.000Z","author":"Epiapoq","_content":"\n---\n\n<font size=4>总体上的知识可以从两个角度来进行划分：认识论的和本体论的。</font>\n\n<font size=4>在认识论层面把知识划分为：过程性知识和叙述性知识。</font>\n\n<font size=4>在本体论层面把知识划分为：知识本身和知识结构。</font>\n\n<font size=4>如果承认人是社会文化“濡化”的产物这一事实，那么知识结构决定人的思维方式。</font>\n\n<font size=4>因材施教的基础是对教学对象思维方式的清晰辨识。</font>\n\n---\n\n<font size=4>承继自苏联模式的传统学科划分的专业课程体系在认识论上是叙述性知识，在本体论知识结构上是层递式的、向上生长的，这种知识结构体系曾经为我国社会主义建设提供了大量的人才，满足了当时生产力的发展，并且在当今仍有存在的价值，比如在一些超级高校（人们通常用一个数值很大的三位数来指称它们）。这是传统上人们对“完整性”知识结构的理解。</font>\n\n<font size=4>高等职业教育模式下教学对象的学习方式有所不同，可以认为在认识论上是过程性的、可操作性的，在本体论知识结构上是系统性的、非理论性的（为更明确的厘清二者的区别，这里用语比较绝对）。其知识结构的“完整性”体现在系统上、操作上。</font>\n\n<font size=4>从知识的作用而言，二者并无高下之分，都是人类文化的传承，从结构上来看也都是完整的。但教育者采取何种知识结构传承知识是必须首先明确的，也即面向不同思维方式的受教育者务必采取适合ta的知识结构方式，而不是反过来让教学对象主动改造自己以适应于教育者固有的知识结构。这是因为高等教育中真正的专业课程教育充其量三两年，时间不足够长、师资不足够权威到能够显著改变教学对象在之前近廿年间形成的知识结构以及由此产生的思维方式，且每况愈下。</font>\n\n<font size=4>另一方面，教学与科研存在本质的差别————“人是目的”（康德语）。二者的相同点在于都属于劳动，但区别在于：科研这种劳动所加工的质料在于前人的知识成果（旧的物），从而产生新的知识成果（新的物），新的成果绝大部分由劳动者占有，如科研奖励、职称评定；而教学这种劳动所加工的“质料”是人，成果亦是人，完全不由劳动者占有，也不由任何其他人占有。科研和教学从此分道扬镳：科研工作者完全可以仅凭个人的学术旨趣采用他所愿意选择的知识结构从事科研劳动；但是，教学工作者不能够也不应该仅凭个人喜好和便利程度决定选择何种知识结构进行教学劳动。</font>\n\n<font size=4>由上可知，采取何种“完整”的知识结构，就教学而言，是取决于教学对象的，教学为什么要改革，根源在于教育对象的改变。再次强调，人类的知识就放在那里，就那么多，两种知识结构都是“完整”的，难度在于如何完整化。</font>\n\n<font size=4>以下例子试图从传统知识结构中脱离出来，重构一种更适用于目前教学对象认知方式的完整知识结构。</font>\n\n![](sine.png)\n\n<font size=4>该电路为笔者在“电子电路基础”讲到“叠加定理”部分时所采用。主要分为5个部分：</font>\n\n1. 并行DDS正弦波的数字形式\n2. R-2R电阻网络做D/A转换\n3. 重建滤波器生成模拟正弦波\n4. 做FFT生成频谱数字量\n5. 通过串口经上位机UI显示波形\n\n<font size=4>上述5个部分仅仅第2部分与叠加定理相关。第1部分归属于传统知识结构中的“采样定理《信号与系统》、PAM《通信原理》”、“D/A转换《数字电路》和《单片机》”；第3部分归属于传统知识结构中的“滤波器、运算放大器《模拟电路》”；第4部分归属于传统知识结构中的“FFT《数字信号处理》”；第5部分归属于传统知识结构中的“串行通信《单片机》”。乍看理论知识结构上看无疑是碎片化的，但是从系统结构上看又是“完整”的。当然，不可能也不需要在一门课当中甚至是一次课当中让教学对象掌握如此多的知识，但就笔者近年来教学经验看，系统完整性或过程完整性相较于理论完整性更加适合于当前的教学对象（地方高校）。</font>\n\n<font size=4>类似上述课程案例的设计必然需要教学工作者熟悉系统概念的同时又能够重构系统，费时费力的同时未必讨好，能够胜任者也未必俯首皆是。这也正是沃勒斯坦对学科专业化的诟病。</font>\n\n<font size=4>但真正的难度恐怕还是在教学工作者意识形态的改变上...</font>\n\n<font size=4>`补充：`普遍存在于大量教学工作者当中的一个根深蒂固的观念为————知识结构毋庸置疑的是“纵向”生长的，如果有什么知识存在，那么必定要有该知识的“前知识”存在。也即某一门课程必须一定要是另一门所谓更高深课程的基础课程。但如果知识也可以是“扁平化”的呢？这就是碎片化时代对于传统知识时代提出的质疑。</font>\n\n![](flat.png)","source":"_posts/knowledge.md","raw":"---\ntitle: 何为知识的完整性？\ndate: 2021-04-10 15:46:36\nauthor: Epiapoq\ntags: \n    - Curriculum Integration\n---\n\n---\n\n<font size=4>总体上的知识可以从两个角度来进行划分：认识论的和本体论的。</font>\n\n<font size=4>在认识论层面把知识划分为：过程性知识和叙述性知识。</font>\n\n<font size=4>在本体论层面把知识划分为：知识本身和知识结构。</font>\n\n<font size=4>如果承认人是社会文化“濡化”的产物这一事实，那么知识结构决定人的思维方式。</font>\n\n<font size=4>因材施教的基础是对教学对象思维方式的清晰辨识。</font>\n\n---\n\n<font size=4>承继自苏联模式的传统学科划分的专业课程体系在认识论上是叙述性知识，在本体论知识结构上是层递式的、向上生长的，这种知识结构体系曾经为我国社会主义建设提供了大量的人才，满足了当时生产力的发展，并且在当今仍有存在的价值，比如在一些超级高校（人们通常用一个数值很大的三位数来指称它们）。这是传统上人们对“完整性”知识结构的理解。</font>\n\n<font size=4>高等职业教育模式下教学对象的学习方式有所不同，可以认为在认识论上是过程性的、可操作性的，在本体论知识结构上是系统性的、非理论性的（为更明确的厘清二者的区别，这里用语比较绝对）。其知识结构的“完整性”体现在系统上、操作上。</font>\n\n<font size=4>从知识的作用而言，二者并无高下之分，都是人类文化的传承，从结构上来看也都是完整的。但教育者采取何种知识结构传承知识是必须首先明确的，也即面向不同思维方式的受教育者务必采取适合ta的知识结构方式，而不是反过来让教学对象主动改造自己以适应于教育者固有的知识结构。这是因为高等教育中真正的专业课程教育充其量三两年，时间不足够长、师资不足够权威到能够显著改变教学对象在之前近廿年间形成的知识结构以及由此产生的思维方式，且每况愈下。</font>\n\n<font size=4>另一方面，教学与科研存在本质的差别————“人是目的”（康德语）。二者的相同点在于都属于劳动，但区别在于：科研这种劳动所加工的质料在于前人的知识成果（旧的物），从而产生新的知识成果（新的物），新的成果绝大部分由劳动者占有，如科研奖励、职称评定；而教学这种劳动所加工的“质料”是人，成果亦是人，完全不由劳动者占有，也不由任何其他人占有。科研和教学从此分道扬镳：科研工作者完全可以仅凭个人的学术旨趣采用他所愿意选择的知识结构从事科研劳动；但是，教学工作者不能够也不应该仅凭个人喜好和便利程度决定选择何种知识结构进行教学劳动。</font>\n\n<font size=4>由上可知，采取何种“完整”的知识结构，就教学而言，是取决于教学对象的，教学为什么要改革，根源在于教育对象的改变。再次强调，人类的知识就放在那里，就那么多，两种知识结构都是“完整”的，难度在于如何完整化。</font>\n\n<font size=4>以下例子试图从传统知识结构中脱离出来，重构一种更适用于目前教学对象认知方式的完整知识结构。</font>\n\n![](sine.png)\n\n<font size=4>该电路为笔者在“电子电路基础”讲到“叠加定理”部分时所采用。主要分为5个部分：</font>\n\n1. 并行DDS正弦波的数字形式\n2. R-2R电阻网络做D/A转换\n3. 重建滤波器生成模拟正弦波\n4. 做FFT生成频谱数字量\n5. 通过串口经上位机UI显示波形\n\n<font size=4>上述5个部分仅仅第2部分与叠加定理相关。第1部分归属于传统知识结构中的“采样定理《信号与系统》、PAM《通信原理》”、“D/A转换《数字电路》和《单片机》”；第3部分归属于传统知识结构中的“滤波器、运算放大器《模拟电路》”；第4部分归属于传统知识结构中的“FFT《数字信号处理》”；第5部分归属于传统知识结构中的“串行通信《单片机》”。乍看理论知识结构上看无疑是碎片化的，但是从系统结构上看又是“完整”的。当然，不可能也不需要在一门课当中甚至是一次课当中让教学对象掌握如此多的知识，但就笔者近年来教学经验看，系统完整性或过程完整性相较于理论完整性更加适合于当前的教学对象（地方高校）。</font>\n\n<font size=4>类似上述课程案例的设计必然需要教学工作者熟悉系统概念的同时又能够重构系统，费时费力的同时未必讨好，能够胜任者也未必俯首皆是。这也正是沃勒斯坦对学科专业化的诟病。</font>\n\n<font size=4>但真正的难度恐怕还是在教学工作者意识形态的改变上...</font>\n\n<font size=4>`补充：`普遍存在于大量教学工作者当中的一个根深蒂固的观念为————知识结构毋庸置疑的是“纵向”生长的，如果有什么知识存在，那么必定要有该知识的“前知识”存在。也即某一门课程必须一定要是另一门所谓更高深课程的基础课程。但如果知识也可以是“扁平化”的呢？这就是碎片化时代对于传统知识时代提出的质疑。</font>\n\n![](flat.png)","slug":"knowledge","published":1,"updated":"2021-07-28T05:39:27.021Z","_id":"cknd0c09g0005rwl6a28wgc03","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p><font size=\"4\">总体上的知识可以从两个角度来进行划分：认识论的和本体论的。</font></p>\n<p><font size=\"4\">在认识论层面把知识划分为：过程性知识和叙述性知识。</font></p>\n<p><font size=\"4\">在本体论层面把知识划分为：知识本身和知识结构。</font></p>\n<p><font size=\"4\">如果承认人是社会文化“濡化”的产物这一事实，那么知识结构决定人的思维方式。</font></p>\n<p><font size=\"4\">因材施教的基础是对教学对象思维方式的清晰辨识。</font></p>\n<hr>\n<p><font size=\"4\">承继自苏联模式的传统学科划分的专业课程体系在认识论上是叙述性知识，在本体论知识结构上是层递式的、向上生长的，这种知识结构体系曾经为我国社会主义建设提供了大量的人才，满足了当时生产力的发展，并且在当今仍有存在的价值，比如在一些超级高校（人们通常用一个数值很大的三位数来指称它们）。这是传统上人们对“完整性”知识结构的理解。</font></p>\n<p><font size=\"4\">高等职业教育模式下教学对象的学习方式有所不同，可以认为在认识论上是过程性的、可操作性的，在本体论知识结构上是系统性的、非理论性的（为更明确的厘清二者的区别，这里用语比较绝对）。其知识结构的“完整性”体现在系统上、操作上。</font></p>\n<p><font size=\"4\">从知识的作用而言，二者并无高下之分，都是人类文化的传承，从结构上来看也都是完整的。但教育者采取何种知识结构传承知识是必须首先明确的，也即面向不同思维方式的受教育者务必采取适合ta的知识结构方式，而不是反过来让教学对象主动改造自己以适应于教育者固有的知识结构。这是因为高等教育中真正的专业课程教育充其量三两年，时间不足够长、师资不足够权威到能够显著改变教学对象在之前近廿年间形成的知识结构以及由此产生的思维方式，且每况愈下。</font></p>\n<p><font size=\"4\">另一方面，教学与科研存在本质的差别————“人是目的”（康德语）。二者的相同点在于都属于劳动，但区别在于：科研这种劳动所加工的质料在于前人的知识成果（旧的物），从而产生新的知识成果（新的物），新的成果绝大部分由劳动者占有，如科研奖励、职称评定；而教学这种劳动所加工的“质料”是人，成果亦是人，完全不由劳动者占有，也不由任何其他人占有。科研和教学从此分道扬镳：科研工作者完全可以仅凭个人的学术旨趣采用他所愿意选择的知识结构从事科研劳动；但是，教学工作者不能够也不应该仅凭个人喜好和便利程度决定选择何种知识结构进行教学劳动。</font></p>\n<p><font size=\"4\">由上可知，采取何种“完整”的知识结构，就教学而言，是取决于教学对象的，教学为什么要改革，根源在于教育对象的改变。再次强调，人类的知识就放在那里，就那么多，两种知识结构都是“完整”的，难度在于如何完整化。</font></p>\n<p><font size=\"4\">以下例子试图从传统知识结构中脱离出来，重构一种更适用于目前教学对象认知方式的完整知识结构。</font></p>\n<p><img src=\"/2021/04/10/knowledge/sine.png\"></p>\n<p><font size=\"4\">该电路为笔者在“电子电路基础”讲到“叠加定理”部分时所采用。主要分为5个部分：</font></p>\n<ol>\n<li>并行DDS正弦波的数字形式</li>\n<li>R-2R电阻网络做D/A转换</li>\n<li>重建滤波器生成模拟正弦波</li>\n<li>做FFT生成频谱数字量</li>\n<li>通过串口经上位机UI显示波形</li>\n</ol>\n<p><font size=\"4\">上述5个部分仅仅第2部分与叠加定理相关。第1部分归属于传统知识结构中的“采样定理《信号与系统》、PAM《通信原理》”、“D/A转换《数字电路》和《单片机》”；第3部分归属于传统知识结构中的“滤波器、运算放大器《模拟电路》”；第4部分归属于传统知识结构中的“FFT《数字信号处理》”；第5部分归属于传统知识结构中的“串行通信《单片机》”。乍看理论知识结构上看无疑是碎片化的，但是从系统结构上看又是“完整”的。当然，不可能也不需要在一门课当中甚至是一次课当中让教学对象掌握如此多的知识，但就笔者近年来教学经验看，系统完整性或过程完整性相较于理论完整性更加适合于当前的教学对象（地方高校）。</font></p>\n<p><font size=\"4\">类似上述课程案例的设计必然需要教学工作者熟悉系统概念的同时又能够重构系统，费时费力的同时未必讨好，能够胜任者也未必俯首皆是。这也正是沃勒斯坦对学科专业化的诟病。</font></p>\n<p><font size=\"4\">但真正的难度恐怕还是在教学工作者意识形态的改变上…</font></p>\n<p><font size=\"4\"><code>补充：</code>普遍存在于大量教学工作者当中的一个根深蒂固的观念为————知识结构毋庸置疑的是“纵向”生长的，如果有什么知识存在，那么必定要有该知识的“前知识”存在。也即某一门课程必须一定要是另一门所谓更高深课程的基础课程。但如果知识也可以是“扁平化”的呢？这就是碎片化时代对于传统知识时代提出的质疑。</font></p>\n<p><img src=\"/2021/04/10/knowledge/flat.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p><font size=\"4\">总体上的知识可以从两个角度来进行划分：认识论的和本体论的。</font></p>\n<p><font size=\"4\">在认识论层面把知识划分为：过程性知识和叙述性知识。</font></p>\n<p><font size=\"4\">在本体论层面把知识划分为：知识本身和知识结构。</font></p>\n<p><font size=\"4\">如果承认人是社会文化“濡化”的产物这一事实，那么知识结构决定人的思维方式。</font></p>\n<p><font size=\"4\">因材施教的基础是对教学对象思维方式的清晰辨识。</font></p>\n<hr>\n<p><font size=\"4\">承继自苏联模式的传统学科划分的专业课程体系在认识论上是叙述性知识，在本体论知识结构上是层递式的、向上生长的，这种知识结构体系曾经为我国社会主义建设提供了大量的人才，满足了当时生产力的发展，并且在当今仍有存在的价值，比如在一些超级高校（人们通常用一个数值很大的三位数来指称它们）。这是传统上人们对“完整性”知识结构的理解。</font></p>\n<p><font size=\"4\">高等职业教育模式下教学对象的学习方式有所不同，可以认为在认识论上是过程性的、可操作性的，在本体论知识结构上是系统性的、非理论性的（为更明确的厘清二者的区别，这里用语比较绝对）。其知识结构的“完整性”体现在系统上、操作上。</font></p>\n<p><font size=\"4\">从知识的作用而言，二者并无高下之分，都是人类文化的传承，从结构上来看也都是完整的。但教育者采取何种知识结构传承知识是必须首先明确的，也即面向不同思维方式的受教育者务必采取适合ta的知识结构方式，而不是反过来让教学对象主动改造自己以适应于教育者固有的知识结构。这是因为高等教育中真正的专业课程教育充其量三两年，时间不足够长、师资不足够权威到能够显著改变教学对象在之前近廿年间形成的知识结构以及由此产生的思维方式，且每况愈下。</font></p>\n<p><font size=\"4\">另一方面，教学与科研存在本质的差别————“人是目的”（康德语）。二者的相同点在于都属于劳动，但区别在于：科研这种劳动所加工的质料在于前人的知识成果（旧的物），从而产生新的知识成果（新的物），新的成果绝大部分由劳动者占有，如科研奖励、职称评定；而教学这种劳动所加工的“质料”是人，成果亦是人，完全不由劳动者占有，也不由任何其他人占有。科研和教学从此分道扬镳：科研工作者完全可以仅凭个人的学术旨趣采用他所愿意选择的知识结构从事科研劳动；但是，教学工作者不能够也不应该仅凭个人喜好和便利程度决定选择何种知识结构进行教学劳动。</font></p>\n<p><font size=\"4\">由上可知，采取何种“完整”的知识结构，就教学而言，是取决于教学对象的，教学为什么要改革，根源在于教育对象的改变。再次强调，人类的知识就放在那里，就那么多，两种知识结构都是“完整”的，难度在于如何完整化。</font></p>\n<p><font size=\"4\">以下例子试图从传统知识结构中脱离出来，重构一种更适用于目前教学对象认知方式的完整知识结构。</font></p>\n<p><img src=\"/2021/04/10/knowledge/sine.png\"></p>\n<p><font size=\"4\">该电路为笔者在“电子电路基础”讲到“叠加定理”部分时所采用。主要分为5个部分：</font></p>\n<ol>\n<li>并行DDS正弦波的数字形式</li>\n<li>R-2R电阻网络做D/A转换</li>\n<li>重建滤波器生成模拟正弦波</li>\n<li>做FFT生成频谱数字量</li>\n<li>通过串口经上位机UI显示波形</li>\n</ol>\n<p><font size=\"4\">上述5个部分仅仅第2部分与叠加定理相关。第1部分归属于传统知识结构中的“采样定理《信号与系统》、PAM《通信原理》”、“D/A转换《数字电路》和《单片机》”；第3部分归属于传统知识结构中的“滤波器、运算放大器《模拟电路》”；第4部分归属于传统知识结构中的“FFT《数字信号处理》”；第5部分归属于传统知识结构中的“串行通信《单片机》”。乍看理论知识结构上看无疑是碎片化的，但是从系统结构上看又是“完整”的。当然，不可能也不需要在一门课当中甚至是一次课当中让教学对象掌握如此多的知识，但就笔者近年来教学经验看，系统完整性或过程完整性相较于理论完整性更加适合于当前的教学对象（地方高校）。</font></p>\n<p><font size=\"4\">类似上述课程案例的设计必然需要教学工作者熟悉系统概念的同时又能够重构系统，费时费力的同时未必讨好，能够胜任者也未必俯首皆是。这也正是沃勒斯坦对学科专业化的诟病。</font></p>\n<p><font size=\"4\">但真正的难度恐怕还是在教学工作者意识形态的改变上…</font></p>\n<p><font size=\"4\"><code>补充：</code>普遍存在于大量教学工作者当中的一个根深蒂固的观念为————知识结构毋庸置疑的是“纵向”生长的，如果有什么知识存在，那么必定要有该知识的“前知识”存在。也即某一门课程必须一定要是另一门所谓更高深课程的基础课程。但如果知识也可以是“扁平化”的呢？这就是碎片化时代对于传统知识时代提出的质疑。</font></p>\n<p><img src=\"/2021/04/10/knowledge/flat.png\"></p>\n"},{"title":"Explain Data Routing -- A Digital Design Method","date":"2021-04-04T14:22:17.000Z","author":"Epiapoq","_content":"\n![](mux_demux.gif)\n\n<font size=4>In this post, I try to use digital logic to explain the basic concept of data routing.</font><!-- more -->\n\n![Data Routing](mux_demux.png)\n\n<font size=4>As we can see, in the circuit above, there are two transmitters 1&2 and two receivers 1&2. Relationship's as follows.</font>\n\n```markdown\nTransmitter_1 -- Receiver_1\nTransmitter_2 -- Receiver_2\n```\n\n<font size=4>Because there are four bits outputs for each transmmiter, we need at least `8-bit` lines when connect them seperately.</font>\n\n<font size=4>But if we use MUX(74HC157) and Decoder(74HC139) to connect them, we just need `4-bit` lines. (Here we can ignore all the controlling bus, such as the lines from the decoder, because we can do that when the amount of transmitters and receivers increases to a huge number.) The two Transceiver Pairs will share the outputs of the MUX, if we can handle the sequence of the clock well.</font>\n\n<font size=4>Of couse we also need a DEMUX to distribute the datas to the right destination. Unlike the MUX in the circuit, which is hardware, I use External Inerrupt(INT0) of Arduino UNO to respond to the controlling signal of the Decoder. I call it a soft demux.(I can't find a proper 74 series demux which has double four-bit outputs.)</font>\n\n<font size=4>The Virtual Serial Port Pairs Map is:</font>\n\n```markdown\nCOM1--COM5\nCOM2--COM6\n```\n\n<font size=4>COM1: Port of Transmitter_1</font>\n\n<font size=4>COM2: Port of Transmitter_2</font>\n\n<font size=4>COM5: Port of Arduino IDE Serial Monitor_1</font>\n\n<font size=4>COM6: Port of Arduino IDE Serial Monitor_2</font>\n\n<font size=4>tip: only four serial port supported in Proteus</font>\n\n<font size=4>Finally, the concepts of switching, routing, multiplexing and demultiplexing, whatever you name them, `SPDT` is their prototype in my opinion.</font>\n\n![spdt](spdt.png)\n\n![routing](data_routing.jpg)","source":"_posts/mux-demux.md","raw":"---\ntitle: Explain Data Routing -- A Digital Design Method \ndate: 2021-04-04 22:22:17\nauthor: Epiapoq\ntags:\n    - Arduino\n    - Proteus\n    - Digital Design\n    - Curriculum Integration \n---\n\n![](mux_demux.gif)\n\n<font size=4>In this post, I try to use digital logic to explain the basic concept of data routing.</font><!-- more -->\n\n![Data Routing](mux_demux.png)\n\n<font size=4>As we can see, in the circuit above, there are two transmitters 1&2 and two receivers 1&2. Relationship's as follows.</font>\n\n```markdown\nTransmitter_1 -- Receiver_1\nTransmitter_2 -- Receiver_2\n```\n\n<font size=4>Because there are four bits outputs for each transmmiter, we need at least `8-bit` lines when connect them seperately.</font>\n\n<font size=4>But if we use MUX(74HC157) and Decoder(74HC139) to connect them, we just need `4-bit` lines. (Here we can ignore all the controlling bus, such as the lines from the decoder, because we can do that when the amount of transmitters and receivers increases to a huge number.) The two Transceiver Pairs will share the outputs of the MUX, if we can handle the sequence of the clock well.</font>\n\n<font size=4>Of couse we also need a DEMUX to distribute the datas to the right destination. Unlike the MUX in the circuit, which is hardware, I use External Inerrupt(INT0) of Arduino UNO to respond to the controlling signal of the Decoder. I call it a soft demux.(I can't find a proper 74 series demux which has double four-bit outputs.)</font>\n\n<font size=4>The Virtual Serial Port Pairs Map is:</font>\n\n```markdown\nCOM1--COM5\nCOM2--COM6\n```\n\n<font size=4>COM1: Port of Transmitter_1</font>\n\n<font size=4>COM2: Port of Transmitter_2</font>\n\n<font size=4>COM5: Port of Arduino IDE Serial Monitor_1</font>\n\n<font size=4>COM6: Port of Arduino IDE Serial Monitor_2</font>\n\n<font size=4>tip: only four serial port supported in Proteus</font>\n\n<font size=4>Finally, the concepts of switching, routing, multiplexing and demultiplexing, whatever you name them, `SPDT` is their prototype in my opinion.</font>\n\n![spdt](spdt.png)\n\n![routing](data_routing.jpg)","slug":"mux-demux","published":1,"updated":"2021-07-28T05:39:27.073Z","_id":"cknd0c09i0006rwl6cft29hyy","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/2021/04/04/mux-demux/mux_demux.gif\"></p>\n<p><font size=\"4\">In this post, I try to use digital logic to explain the basic concept of data routing.</font><span id=\"more\"></span></p>\n<p><img src=\"/2021/04/04/mux-demux/mux_demux.png\" alt=\"Data Routing\"></p>\n<p><font size=\"4\">As we can see, in the circuit above, there are two transmitters 1&amp;2 and two receivers 1&amp;2. Relationship’s as follows.</font></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transmitter<span class=\"emphasis\">_1 -- Receiver_</span>1</span><br><span class=\"line\">Transmitter<span class=\"emphasis\">_2 -- Receiver_</span>2</span><br></pre></td></tr></table></figure>\n\n<p><font size=\"4\">Because there are four bits outputs for each transmmiter, we need at least <code>8-bit</code> lines when connect them seperately.</font></p>\n<p><font size=\"4\">But if we use MUX(74HC157) and Decoder(74HC139) to connect them, we just need <code>4-bit</code> lines. (Here we can ignore all the controlling bus, such as the lines from the decoder, because we can do that when the amount of transmitters and receivers increases to a huge number.) The two Transceiver Pairs will share the outputs of the MUX, if we can handle the sequence of the clock well.</font></p>\n<p><font size=\"4\">Of couse we also need a DEMUX to distribute the datas to the right destination. Unlike the MUX in the circuit, which is hardware, I use External Inerrupt(INT0) of Arduino UNO to respond to the controlling signal of the Decoder. I call it a soft demux.(I can’t find a proper 74 series demux which has double four-bit outputs.)</font></p>\n<p><font size=\"4\">The Virtual Serial Port Pairs Map is:</font></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COM1--COM5</span><br><span class=\"line\">COM2--COM6</span><br></pre></td></tr></table></figure>\n\n<p><font size=\"4\">COM1: Port of Transmitter_1</font></p>\n<p><font size=\"4\">COM2: Port of Transmitter_2</font></p>\n<p><font size=\"4\">COM5: Port of Arduino IDE Serial Monitor_1</font></p>\n<p><font size=\"4\">COM6: Port of Arduino IDE Serial Monitor_2</font></p>\n<p><font size=\"4\">tip: only four serial port supported in Proteus</font></p>\n<p><font size=\"4\">Finally, the concepts of switching, routing, multiplexing and demultiplexing, whatever you name them, <code>SPDT</code> is their prototype in my opinion.</font></p>\n<p><img src=\"/2021/04/04/mux-demux/spdt.png\" alt=\"spdt\"></p>\n<p><img src=\"/2021/04/04/mux-demux/data_routing.jpg\" alt=\"routing\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2021/04/04/mux-demux/mux_demux.gif\"></p>\n<p><font size=\"4\">In this post, I try to use digital logic to explain the basic concept of data routing.</font></p>","more":"<p></p>\n<p><img src=\"/2021/04/04/mux-demux/mux_demux.png\" alt=\"Data Routing\"></p>\n<p><font size=\"4\">As we can see, in the circuit above, there are two transmitters 1&amp;2 and two receivers 1&amp;2. Relationship’s as follows.</font></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transmitter<span class=\"emphasis\">_1 -- Receiver_</span>1</span><br><span class=\"line\">Transmitter<span class=\"emphasis\">_2 -- Receiver_</span>2</span><br></pre></td></tr></table></figure>\n\n<p><font size=\"4\">Because there are four bits outputs for each transmmiter, we need at least <code>8-bit</code> lines when connect them seperately.</font></p>\n<p><font size=\"4\">But if we use MUX(74HC157) and Decoder(74HC139) to connect them, we just need <code>4-bit</code> lines. (Here we can ignore all the controlling bus, such as the lines from the decoder, because we can do that when the amount of transmitters and receivers increases to a huge number.) The two Transceiver Pairs will share the outputs of the MUX, if we can handle the sequence of the clock well.</font></p>\n<p><font size=\"4\">Of couse we also need a DEMUX to distribute the datas to the right destination. Unlike the MUX in the circuit, which is hardware, I use External Inerrupt(INT0) of Arduino UNO to respond to the controlling signal of the Decoder. I call it a soft demux.(I can’t find a proper 74 series demux which has double four-bit outputs.)</font></p>\n<p><font size=\"4\">The Virtual Serial Port Pairs Map is:</font></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COM1--COM5</span><br><span class=\"line\">COM2--COM6</span><br></pre></td></tr></table></figure>\n\n<p><font size=\"4\">COM1: Port of Transmitter_1</font></p>\n<p><font size=\"4\">COM2: Port of Transmitter_2</font></p>\n<p><font size=\"4\">COM5: Port of Arduino IDE Serial Monitor_1</font></p>\n<p><font size=\"4\">COM6: Port of Arduino IDE Serial Monitor_2</font></p>\n<p><font size=\"4\">tip: only four serial port supported in Proteus</font></p>\n<p><font size=\"4\">Finally, the concepts of switching, routing, multiplexing and demultiplexing, whatever you name them, <code>SPDT</code> is their prototype in my opinion.</font></p>\n<p><img src=\"/2021/04/04/mux-demux/spdt.png\" alt=\"spdt\"></p>\n<p><img src=\"/2021/04/04/mux-demux/data_routing.jpg\" alt=\"routing\"></p>"},{"title":"Professional Project Process -- Pro^3","date":"2021-07-28T05:53:23.000Z","author":"Epiapoq","_content":"\n<font size=4>本文介绍了电气层（OSI Physical Layer）硬件接口实现电平匹配全过程——以FPGA+Arduino实验平台项目开发为例。</font><!-- more -->\n\n![](step-mxo2.png)\n\n<font size=4>2021-1学期给18级留学生讲授可编程逻辑器件课程期间，针对学生特点，以实验为主体，主要实验设备为Step-MXO2和Arduino Uno，通过二者之间的配合，极大丰富了该课程的内涵与外延，开发了如串行通信加法器、带频率显示的时钟分频器、DDS正弦信号发生器和FSK调制器等与通信概念密切相关的实验，体现了与传统“点灯”类可编程课程的显著不同。课程深受留学生欢迎，64学时课程自愿上成了96学时（每次2学时实验结束留学生都会自觉延长1学时以完成全部内容）。</font>\n\n<font size=4>要实现Step-MXO2和Arduino Uno的连通，第一要务自然是满足二者输入输出之间的电平匹配，笔者将在此文中详细阐明整个设计流程，希冀能够同时解答部分学生对于PCB Layout如何转向其上层的硬件电路设计的疑问。</font>\n\n<font size=4>1. Step-MXO2和Arduino Uno可否直连？</font>\n\n![](interface.png)\n\n<font size=4>短时间内或许不会互相伤害，但是逻辑上是不兼容的。这在数字电路课程中有过介绍。详见Digital Fundamentals 11th Edition by Thomas L. Floyd Chapter 15-1，不兼容的原因如下图（出自该书）所示。</font>\n\n![3.3v CMOS](3.3v.png)\n\n![5v TTL](5v.png)\n\n<font size=4>由上面两图可见，兼容和不兼容皆有。兼容的一面在于：3.3v的CMOS输出电平，逻辑0的电平范围是（0-0.4v），逻辑1的电平范围是（2.4-3.3v），与此同时5v的TTL输入电平，逻辑0的电平范围是（0-0.8v），逻辑1的电平范围是（2-5v）。由于后者包含前者，是故前者可以直接驱动后者，也就是说Step-mxo2输出引脚可直连Arduino Uno输入引脚。不兼容的一面在于：5v的TTL输出电平，逻辑0的电平范围是（0-0.4v），逻辑1的电平范围是（2.4-5v），与此同时3.3v的CMOS输入电平，逻辑0的电平范围是（0-0.8v），逻辑1的电平范围是（2-3.3v）。由于后者不能完全包含前者，是故前者不可以直接驱动后者，也就是说Arduino Uno输出引脚直连Step-mxo2输入引脚时，高电平不能被后者识别。</font>\n\n<font size=4>2. 上述理论放之四海而皆准吗？</font>\n\n<font size=4>上述理论完全来自于教科书上的阐述，但在工程实践中尽信书不如无书，按图索骥不可取。在这里，理论的作用在于直觉上的提醒，告诉我们直连很有可能是行不通的（事实上也确实行不通），而在实践中要靠芯片手册说话，我们需要一个明确的答案。</font>\n\n<font size=4>芯片生产商往往都会在官方网站上免费提供datasheet，首先我们找到Step-MXO2和Arduino Uno各自的核心芯片，分别为MachXO2和ATmega328P，上网搜索其官方链接下载查看。</font>\n\n<font size=4>MachXO2: https://www.latticesemi.com/-/media/LatticeSemi/Documents/DataSheets/MachXO23/FPGA-DS-02056-3-7-MachXO2-Family-Data-Sheet.ashx?document_id=38834</font>\n\n<font size=4>Atmega328P: http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf</font>\n\n<font size=4>找出与输入输出电平相关的描述（其实也不是那么容易能找出来的，平时需要多看手册），如下：</font>\n\n![MachXO2](datasheet_3.3v.png)\n\n![ATmega328P](datasheet_5v.png)\n\n<font size=4>显然这与上述教科书中的定义差异显著。但结论还是一样，不能完全兼容（具体计算过程参考上文，这里还有一点点瑕疵在于，datasheet中Machxo2输出1对应的电平最小值是VCCIO-0.4，即3.3v-0.4v=2.9v，而Atmega328P输入1的最小值是0.6VCC=3V，二者之间有0.1v的不匹配，但实操没有发现问题），进而需要思考如何设计电路实现匹配。</font>\n\n<font size=4>3. 从不匹配到匹配如何实现？</font>\n\n<font size=4>CMOS直接驱动TTL基本不存在问题，但反过来不行，不行的根本原因主要还是在于最大电压的不同，因此，如果能够将TTL最大电压5v降至3.3v，则很有可能解决不匹配的问题。最容易想到的办法就是电路原理里面学的串联分压，比如三个1kohm电阻串联，如下图所示（留学生上课时即采用此简易电路）。</font>\n\n![](compatible.png)\n\n<font size=4>4. 简单分压是不是就万事大吉了？</font>\n\n<font size=4>工程上永远都在寻找一种折中，电路简单意味着设备复杂度低，好处是成本低，不足之处也是显而易见的，传输速率一定不高。原因在电子电路中已经学过了，CMOS的输入端存在容性，现在凭空多了三个电阻，形成了RC充放电一阶电路，其过渡过程会导致波形由方的变成圆的（自行脑补矩形波作为输入信号，RC电路中电容两端电压波形随输入信号频率变化而变化），速率越高越明显，直至由于C来不及充放电而使得信号湮灭。</font>\n\n<font size=4>因此暑假期间组织了几位精干的学生在简易电阻分压的基础上采用TI专用芯片来实现电平匹配的同时又能满足信号传输速率的要求。</font>\n\n<font size=4>74LVC4245: https://www.ti.com.cn/cn/lit/ds/symlink/sn74lvc4245a.pdf?ts=1627398220163&ref_url=https%253A%252F%252Fwww.ti.com.cn%252Fproduct%252Fcn%252FSN74LVC4245A%253FkeyMatch%253D%2526tisearch%253Dsearch-everything%2526usecase%253Dpartmatches</font>\n\n![](74lvc4245.png)\n\n<font size=4>5. 用上专用芯片是不是就完美了？</font>\n\n<font size=4>电路设计没有完美的说法，还有待时间和实践的检验，学习也是一样，永无止境。</font>\n\n<font size=4>6. 对以后的学习会有何帮助吗？</font>\n\n<font size=4>至少当我们看到STM32F10x参考手册时，这种熟悉感会使我们更快的投入到新的学习中。</font>\n\n![](stm32f10x.png)","source":"_posts/project-process.md","raw":"---\ntitle: Professional Project Process -- Pro^3\ndate: 2021-07-28 13:53:23\nauthor: Epiapoq\ntags:\n    - Pro^3\n    - Digital Design\n    - Curriculum Integration \n---\n\n<font size=4>本文介绍了电气层（OSI Physical Layer）硬件接口实现电平匹配全过程——以FPGA+Arduino实验平台项目开发为例。</font><!-- more -->\n\n![](step-mxo2.png)\n\n<font size=4>2021-1学期给18级留学生讲授可编程逻辑器件课程期间，针对学生特点，以实验为主体，主要实验设备为Step-MXO2和Arduino Uno，通过二者之间的配合，极大丰富了该课程的内涵与外延，开发了如串行通信加法器、带频率显示的时钟分频器、DDS正弦信号发生器和FSK调制器等与通信概念密切相关的实验，体现了与传统“点灯”类可编程课程的显著不同。课程深受留学生欢迎，64学时课程自愿上成了96学时（每次2学时实验结束留学生都会自觉延长1学时以完成全部内容）。</font>\n\n<font size=4>要实现Step-MXO2和Arduino Uno的连通，第一要务自然是满足二者输入输出之间的电平匹配，笔者将在此文中详细阐明整个设计流程，希冀能够同时解答部分学生对于PCB Layout如何转向其上层的硬件电路设计的疑问。</font>\n\n<font size=4>1. Step-MXO2和Arduino Uno可否直连？</font>\n\n![](interface.png)\n\n<font size=4>短时间内或许不会互相伤害，但是逻辑上是不兼容的。这在数字电路课程中有过介绍。详见Digital Fundamentals 11th Edition by Thomas L. Floyd Chapter 15-1，不兼容的原因如下图（出自该书）所示。</font>\n\n![3.3v CMOS](3.3v.png)\n\n![5v TTL](5v.png)\n\n<font size=4>由上面两图可见，兼容和不兼容皆有。兼容的一面在于：3.3v的CMOS输出电平，逻辑0的电平范围是（0-0.4v），逻辑1的电平范围是（2.4-3.3v），与此同时5v的TTL输入电平，逻辑0的电平范围是（0-0.8v），逻辑1的电平范围是（2-5v）。由于后者包含前者，是故前者可以直接驱动后者，也就是说Step-mxo2输出引脚可直连Arduino Uno输入引脚。不兼容的一面在于：5v的TTL输出电平，逻辑0的电平范围是（0-0.4v），逻辑1的电平范围是（2.4-5v），与此同时3.3v的CMOS输入电平，逻辑0的电平范围是（0-0.8v），逻辑1的电平范围是（2-3.3v）。由于后者不能完全包含前者，是故前者不可以直接驱动后者，也就是说Arduino Uno输出引脚直连Step-mxo2输入引脚时，高电平不能被后者识别。</font>\n\n<font size=4>2. 上述理论放之四海而皆准吗？</font>\n\n<font size=4>上述理论完全来自于教科书上的阐述，但在工程实践中尽信书不如无书，按图索骥不可取。在这里，理论的作用在于直觉上的提醒，告诉我们直连很有可能是行不通的（事实上也确实行不通），而在实践中要靠芯片手册说话，我们需要一个明确的答案。</font>\n\n<font size=4>芯片生产商往往都会在官方网站上免费提供datasheet，首先我们找到Step-MXO2和Arduino Uno各自的核心芯片，分别为MachXO2和ATmega328P，上网搜索其官方链接下载查看。</font>\n\n<font size=4>MachXO2: https://www.latticesemi.com/-/media/LatticeSemi/Documents/DataSheets/MachXO23/FPGA-DS-02056-3-7-MachXO2-Family-Data-Sheet.ashx?document_id=38834</font>\n\n<font size=4>Atmega328P: http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf</font>\n\n<font size=4>找出与输入输出电平相关的描述（其实也不是那么容易能找出来的，平时需要多看手册），如下：</font>\n\n![MachXO2](datasheet_3.3v.png)\n\n![ATmega328P](datasheet_5v.png)\n\n<font size=4>显然这与上述教科书中的定义差异显著。但结论还是一样，不能完全兼容（具体计算过程参考上文，这里还有一点点瑕疵在于，datasheet中Machxo2输出1对应的电平最小值是VCCIO-0.4，即3.3v-0.4v=2.9v，而Atmega328P输入1的最小值是0.6VCC=3V，二者之间有0.1v的不匹配，但实操没有发现问题），进而需要思考如何设计电路实现匹配。</font>\n\n<font size=4>3. 从不匹配到匹配如何实现？</font>\n\n<font size=4>CMOS直接驱动TTL基本不存在问题，但反过来不行，不行的根本原因主要还是在于最大电压的不同，因此，如果能够将TTL最大电压5v降至3.3v，则很有可能解决不匹配的问题。最容易想到的办法就是电路原理里面学的串联分压，比如三个1kohm电阻串联，如下图所示（留学生上课时即采用此简易电路）。</font>\n\n![](compatible.png)\n\n<font size=4>4. 简单分压是不是就万事大吉了？</font>\n\n<font size=4>工程上永远都在寻找一种折中，电路简单意味着设备复杂度低，好处是成本低，不足之处也是显而易见的，传输速率一定不高。原因在电子电路中已经学过了，CMOS的输入端存在容性，现在凭空多了三个电阻，形成了RC充放电一阶电路，其过渡过程会导致波形由方的变成圆的（自行脑补矩形波作为输入信号，RC电路中电容两端电压波形随输入信号频率变化而变化），速率越高越明显，直至由于C来不及充放电而使得信号湮灭。</font>\n\n<font size=4>因此暑假期间组织了几位精干的学生在简易电阻分压的基础上采用TI专用芯片来实现电平匹配的同时又能满足信号传输速率的要求。</font>\n\n<font size=4>74LVC4245: https://www.ti.com.cn/cn/lit/ds/symlink/sn74lvc4245a.pdf?ts=1627398220163&ref_url=https%253A%252F%252Fwww.ti.com.cn%252Fproduct%252Fcn%252FSN74LVC4245A%253FkeyMatch%253D%2526tisearch%253Dsearch-everything%2526usecase%253Dpartmatches</font>\n\n![](74lvc4245.png)\n\n<font size=4>5. 用上专用芯片是不是就完美了？</font>\n\n<font size=4>电路设计没有完美的说法，还有待时间和实践的检验，学习也是一样，永无止境。</font>\n\n<font size=4>6. 对以后的学习会有何帮助吗？</font>\n\n<font size=4>至少当我们看到STM32F10x参考手册时，这种熟悉感会使我们更快的投入到新的学习中。</font>\n\n![](stm32f10x.png)","slug":"project-process","published":1,"updated":"2021-07-28T08:58:00.647Z","_id":"ckrn938ox000058l6c349e5m5","comments":1,"layout":"post","photos":[],"link":"","content":"<p><font size=\"4\">本文介绍了电气层（OSI Physical Layer）硬件接口实现电平匹配全过程——以FPGA+Arduino实验平台项目开发为例。</font><span id=\"more\"></span></p>\n<p><img src=\"/2021/07/28/project-process/step-mxo2.png\"></p>\n<p><font size=\"4\">2021-1学期给18级留学生讲授可编程逻辑器件课程期间，针对学生特点，以实验为主体，主要实验设备为Step-MXO2和Arduino Uno，通过二者之间的配合，极大丰富了该课程的内涵与外延，开发了如串行通信加法器、带频率显示的时钟分频器、DDS正弦信号发生器和FSK调制器等与通信概念密切相关的实验，体现了与传统“点灯”类可编程课程的显著不同。课程深受留学生欢迎，64学时课程自愿上成了96学时（每次2学时实验结束留学生都会自觉延长1学时以完成全部内容）。</font></p>\n<p><font size=\"4\">要实现Step-MXO2和Arduino Uno的连通，第一要务自然是满足二者输入输出之间的电平匹配，笔者将在此文中详细阐明整个设计流程，希冀能够同时解答部分学生对于PCB Layout如何转向其上层的硬件电路设计的疑问。</font></p>\n<p><font size=\"4\">1. Step-MXO2和Arduino Uno可否直连？</font></p>\n<p><img src=\"/2021/07/28/project-process/interface.png\"></p>\n<p><font size=\"4\">短时间内或许不会互相伤害，但是逻辑上是不兼容的。这在数字电路课程中有过介绍。详见Digital Fundamentals 11th Edition by Thomas L. Floyd Chapter 15-1，不兼容的原因如下图（出自该书）所示。</font></p>\n<p><img src=\"/2021/07/28/project-process/3.3v.png\" alt=\"3.3v CMOS\"></p>\n<p><img src=\"/2021/07/28/project-process/5v.png\" alt=\"5v TTL\"></p>\n<p><font size=\"4\">由上面两图可见，兼容和不兼容皆有。兼容的一面在于：3.3v的CMOS输出电平，逻辑0的电平范围是（0-0.4v），逻辑1的电平范围是（2.4-3.3v），与此同时5v的TTL输入电平，逻辑0的电平范围是（0-0.8v），逻辑1的电平范围是（2-5v）。由于后者包含前者，是故前者可以直接驱动后者，也就是说Step-mxo2输出引脚可直连Arduino Uno输入引脚。不兼容的一面在于：5v的TTL输出电平，逻辑0的电平范围是（0-0.4v），逻辑1的电平范围是（2.4-5v），与此同时3.3v的CMOS输入电平，逻辑0的电平范围是（0-0.8v），逻辑1的电平范围是（2-3.3v）。由于后者不能完全包含前者，是故前者不可以直接驱动后者，也就是说Arduino Uno输出引脚直连Step-mxo2输入引脚时，高电平不能被后者识别。</font></p>\n<p><font size=\"4\">2. 上述理论放之四海而皆准吗？</font></p>\n<p><font size=\"4\">上述理论完全来自于教科书上的阐述，但在工程实践中尽信书不如无书，按图索骥不可取。在这里，理论的作用在于直觉上的提醒，告诉我们直连很有可能是行不通的（事实上也确实行不通），而在实践中要靠芯片手册说话，我们需要一个明确的答案。</font></p>\n<p><font size=\"4\">芯片生产商往往都会在官方网站上免费提供datasheet，首先我们找到Step-MXO2和Arduino Uno各自的核心芯片，分别为MachXO2和ATmega328P，上网搜索其官方链接下载查看。</font></p>\n<p><font size=\"4\">MachXO2: <a href=\"https://www.latticesemi.com/-/media/LatticeSemi/Documents/DataSheets/MachXO23/FPGA-DS-02056-3-7-MachXO2-Family-Data-Sheet.ashx?document_id=38834\">https://www.latticesemi.com/-/media/LatticeSemi/Documents/DataSheets/MachXO23/FPGA-DS-02056-3-7-MachXO2-Family-Data-Sheet.ashx?document_id=38834</a></font></p>\n<p><font size=\"4\">Atmega328P: <a href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf\">http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf</a></font></p>\n<p><font size=\"4\">找出与输入输出电平相关的描述（其实也不是那么容易能找出来的，平时需要多看手册），如下：</font></p>\n<p><img src=\"/2021/07/28/project-process/datasheet_3.3v.png\" alt=\"MachXO2\"></p>\n<p><img src=\"/2021/07/28/project-process/datasheet_5v.png\" alt=\"ATmega328P\"></p>\n<p><font size=\"4\">显然这与上述教科书中的定义差异显著。但结论还是一样，不能完全兼容（具体计算过程参考上文，这里还有一点点瑕疵在于，datasheet中Machxo2输出1对应的电平最小值是VCCIO-0.4，即3.3v-0.4v=2.9v，而Atmega328P输入1的最小值是0.6VCC=3V，二者之间有0.1v的不匹配，但实操没有发现问题），进而需要思考如何设计电路实现匹配。</font></p>\n<p><font size=\"4\">3. 从不匹配到匹配如何实现？</font></p>\n<p><font size=\"4\">CMOS直接驱动TTL基本不存在问题，但反过来不行，不行的根本原因主要还是在于最大电压的不同，因此，如果能够将TTL最大电压5v降至3.3v，则很有可能解决不匹配的问题。最容易想到的办法就是电路原理里面学的串联分压，比如三个1kohm电阻串联，如下图所示（留学生上课时即采用此简易电路）。</font></p>\n<p><img src=\"/2021/07/28/project-process/compatible.png\"></p>\n<p><font size=\"4\">4. 简单分压是不是就万事大吉了？</font></p>\n<p><font size=\"4\">工程上永远都在寻找一种折中，电路简单意味着设备复杂度低，好处是成本低，不足之处也是显而易见的，传输速率一定不高。原因在电子电路中已经学过了，CMOS的输入端存在容性，现在凭空多了三个电阻，形成了RC充放电一阶电路，其过渡过程会导致波形由方的变成圆的（自行脑补矩形波作为输入信号，RC电路中电容两端电压波形随输入信号频率变化而变化），速率越高越明显，直至由于C来不及充放电而使得信号湮灭。</font></p>\n<p><font size=\"4\">因此暑假期间组织了几位精干的学生在简易电阻分压的基础上采用TI专用芯片来实现电平匹配的同时又能满足信号传输速率的要求。</font></p>\n<p><font size=\"4\">74LVC4245: <a href=\"https://www.ti.com.cn/cn/lit/ds/symlink/sn74lvc4245a.pdf?ts=1627398220163&amp;ref_url=https%253A%252F%252Fwww.ti.com.cn%252Fproduct%252Fcn%252FSN74LVC4245A%253FkeyMatch%253D%2526tisearch%253Dsearch-everything%2526usecase%253Dpartmatches\">https://www.ti.com.cn/cn/lit/ds/symlink/sn74lvc4245a.pdf?ts=1627398220163&amp;ref_url=https%253A%252F%252Fwww.ti.com.cn%252Fproduct%252Fcn%252FSN74LVC4245A%253FkeyMatch%253D%2526tisearch%253Dsearch-everything%2526usecase%253Dpartmatches</a></font></p>\n<p><img src=\"/2021/07/28/project-process/74lvc4245.png\"></p>\n<p><font size=\"4\">5. 用上专用芯片是不是就完美了？</font></p>\n<p><font size=\"4\">电路设计没有完美的说法，还有待时间和实践的检验，学习也是一样，永无止境。</font></p>\n<p><font size=\"4\">6. 对以后的学习会有何帮助吗？</font></p>\n<p><font size=\"4\">至少当我们看到STM32F10x参考手册时，这种熟悉感会使我们更快的投入到新的学习中。</font></p>\n<p><img src=\"/2021/07/28/project-process/stm32f10x.png\"></p>\n","site":{"data":{}},"excerpt":"<p><font size=\"4\">本文介绍了电气层（OSI Physical Layer）硬件接口实现电平匹配全过程——以FPGA+Arduino实验平台项目开发为例。</font></p>","more":"<p></p>\n<p><img src=\"/2021/07/28/project-process/step-mxo2.png\"></p>\n<p><font size=\"4\">2021-1学期给18级留学生讲授可编程逻辑器件课程期间，针对学生特点，以实验为主体，主要实验设备为Step-MXO2和Arduino Uno，通过二者之间的配合，极大丰富了该课程的内涵与外延，开发了如串行通信加法器、带频率显示的时钟分频器、DDS正弦信号发生器和FSK调制器等与通信概念密切相关的实验，体现了与传统“点灯”类可编程课程的显著不同。课程深受留学生欢迎，64学时课程自愿上成了96学时（每次2学时实验结束留学生都会自觉延长1学时以完成全部内容）。</font></p>\n<p><font size=\"4\">要实现Step-MXO2和Arduino Uno的连通，第一要务自然是满足二者输入输出之间的电平匹配，笔者将在此文中详细阐明整个设计流程，希冀能够同时解答部分学生对于PCB Layout如何转向其上层的硬件电路设计的疑问。</font></p>\n<p><font size=\"4\">1. Step-MXO2和Arduino Uno可否直连？</font></p>\n<p><img src=\"/2021/07/28/project-process/interface.png\"></p>\n<p><font size=\"4\">短时间内或许不会互相伤害，但是逻辑上是不兼容的。这在数字电路课程中有过介绍。详见Digital Fundamentals 11th Edition by Thomas L. Floyd Chapter 15-1，不兼容的原因如下图（出自该书）所示。</font></p>\n<p><img src=\"/2021/07/28/project-process/3.3v.png\" alt=\"3.3v CMOS\"></p>\n<p><img src=\"/2021/07/28/project-process/5v.png\" alt=\"5v TTL\"></p>\n<p><font size=\"4\">由上面两图可见，兼容和不兼容皆有。兼容的一面在于：3.3v的CMOS输出电平，逻辑0的电平范围是（0-0.4v），逻辑1的电平范围是（2.4-3.3v），与此同时5v的TTL输入电平，逻辑0的电平范围是（0-0.8v），逻辑1的电平范围是（2-5v）。由于后者包含前者，是故前者可以直接驱动后者，也就是说Step-mxo2输出引脚可直连Arduino Uno输入引脚。不兼容的一面在于：5v的TTL输出电平，逻辑0的电平范围是（0-0.4v），逻辑1的电平范围是（2.4-5v），与此同时3.3v的CMOS输入电平，逻辑0的电平范围是（0-0.8v），逻辑1的电平范围是（2-3.3v）。由于后者不能完全包含前者，是故前者不可以直接驱动后者，也就是说Arduino Uno输出引脚直连Step-mxo2输入引脚时，高电平不能被后者识别。</font></p>\n<p><font size=\"4\">2. 上述理论放之四海而皆准吗？</font></p>\n<p><font size=\"4\">上述理论完全来自于教科书上的阐述，但在工程实践中尽信书不如无书，按图索骥不可取。在这里，理论的作用在于直觉上的提醒，告诉我们直连很有可能是行不通的（事实上也确实行不通），而在实践中要靠芯片手册说话，我们需要一个明确的答案。</font></p>\n<p><font size=\"4\">芯片生产商往往都会在官方网站上免费提供datasheet，首先我们找到Step-MXO2和Arduino Uno各自的核心芯片，分别为MachXO2和ATmega328P，上网搜索其官方链接下载查看。</font></p>\n<p><font size=\"4\">MachXO2: <a href=\"https://www.latticesemi.com/-/media/LatticeSemi/Documents/DataSheets/MachXO23/FPGA-DS-02056-3-7-MachXO2-Family-Data-Sheet.ashx?document_id=38834\">https://www.latticesemi.com/-/media/LatticeSemi/Documents/DataSheets/MachXO23/FPGA-DS-02056-3-7-MachXO2-Family-Data-Sheet.ashx?document_id=38834</a></font></p>\n<p><font size=\"4\">Atmega328P: <a href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf\">http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf</a></font></p>\n<p><font size=\"4\">找出与输入输出电平相关的描述（其实也不是那么容易能找出来的，平时需要多看手册），如下：</font></p>\n<p><img src=\"/2021/07/28/project-process/datasheet_3.3v.png\" alt=\"MachXO2\"></p>\n<p><img src=\"/2021/07/28/project-process/datasheet_5v.png\" alt=\"ATmega328P\"></p>\n<p><font size=\"4\">显然这与上述教科书中的定义差异显著。但结论还是一样，不能完全兼容（具体计算过程参考上文，这里还有一点点瑕疵在于，datasheet中Machxo2输出1对应的电平最小值是VCCIO-0.4，即3.3v-0.4v=2.9v，而Atmega328P输入1的最小值是0.6VCC=3V，二者之间有0.1v的不匹配，但实操没有发现问题），进而需要思考如何设计电路实现匹配。</font></p>\n<p><font size=\"4\">3. 从不匹配到匹配如何实现？</font></p>\n<p><font size=\"4\">CMOS直接驱动TTL基本不存在问题，但反过来不行，不行的根本原因主要还是在于最大电压的不同，因此，如果能够将TTL最大电压5v降至3.3v，则很有可能解决不匹配的问题。最容易想到的办法就是电路原理里面学的串联分压，比如三个1kohm电阻串联，如下图所示（留学生上课时即采用此简易电路）。</font></p>\n<p><img src=\"/2021/07/28/project-process/compatible.png\"></p>\n<p><font size=\"4\">4. 简单分压是不是就万事大吉了？</font></p>\n<p><font size=\"4\">工程上永远都在寻找一种折中，电路简单意味着设备复杂度低，好处是成本低，不足之处也是显而易见的，传输速率一定不高。原因在电子电路中已经学过了，CMOS的输入端存在容性，现在凭空多了三个电阻，形成了RC充放电一阶电路，其过渡过程会导致波形由方的变成圆的（自行脑补矩形波作为输入信号，RC电路中电容两端电压波形随输入信号频率变化而变化），速率越高越明显，直至由于C来不及充放电而使得信号湮灭。</font></p>\n<p><font size=\"4\">因此暑假期间组织了几位精干的学生在简易电阻分压的基础上采用TI专用芯片来实现电平匹配的同时又能满足信号传输速率的要求。</font></p>\n<p><font size=\"4\">74LVC4245: <a href=\"https://www.ti.com.cn/cn/lit/ds/symlink/sn74lvc4245a.pdf?ts=1627398220163&amp;ref_url=https%253A%252F%252Fwww.ti.com.cn%252Fproduct%252Fcn%252FSN74LVC4245A%253FkeyMatch%253D%2526tisearch%253Dsearch-everything%2526usecase%253Dpartmatches\">https://www.ti.com.cn/cn/lit/ds/symlink/sn74lvc4245a.pdf?ts=1627398220163&amp;ref_url=https%253A%252F%252Fwww.ti.com.cn%252Fproduct%252Fcn%252FSN74LVC4245A%253FkeyMatch%253D%2526tisearch%253Dsearch-everything%2526usecase%253Dpartmatches</a></font></p>\n<p><img src=\"/2021/07/28/project-process/74lvc4245.png\"></p>\n<p><font size=\"4\">5. 用上专用芯片是不是就完美了？</font></p>\n<p><font size=\"4\">电路设计没有完美的说法，还有待时间和实践的检验，学习也是一样，永无止境。</font></p>\n<p><font size=\"4\">6. 对以后的学习会有何帮助吗？</font></p>\n<p><font size=\"4\">至少当我们看到STM32F10x参考手册时，这种熟悉感会使我们更快的投入到新的学习中。</font></p>\n<p><img src=\"/2021/07/28/project-process/stm32f10x.png\"></p>"},{"title":"AHB何以不是起始于0x40018000？","date":"2021-07-29T08:15:29.000Z","author":"Epiapoq","_content":"\n![AHB在stm32f10x.h中的定义](AHB_stm32f10x.h.png)\n<!-- more -->\n<font size=4>在寄存器映射头文件stm32f10x.h中，官方定义了外设各总线的起始地址，其中AHB起始于0x40020000，各教程中也都默认此定义，不做更多说明。但事实上这里是会引起一点小歧义的。</font>\n\n![stm32f10xxx架构图](SDIO_arch.png)\n\n![AHB寄存器映射表](SDIO_addr.png)\n\n<font size=4>由stm32f10xxx架构图可以看出，SDIO直连AHB，并不经由南北桥转接，因此SDIO理应包含在AHB中，而寄存器映射表也证实了这一点。显然，AHB实际起始于0x40018000。</font>\n\n<font size=4>而stm32f10x.h之所以要将AHB定义成起始于0x40020000，猜测是为了便于记忆使然。没有找到官方佐证，唯一找到一位网友于我心有戚戚焉。https://www.programmersought.com/article/42371934487/</font>\n\n<font size=4>由此，在stm32f10x.h中对于SDIO的定义就显得格外与众不同。</font>\n\n![与众不同的SDIO](SDIO_stm32f10x.h.png)\n\n<font size=4>教书切忌一知半解，自勉。</font>\n","source":"_posts/AHB-Addressing.md","raw":"---\ntitle: AHB何以不是起始于0x40018000？\ndate: 2021-07-29 16:15:29\nauthor: Epiapoq\ntags:\n    - STM32F10xxx\n    - Embedded System\n---\n\n![AHB在stm32f10x.h中的定义](AHB_stm32f10x.h.png)\n<!-- more -->\n<font size=4>在寄存器映射头文件stm32f10x.h中，官方定义了外设各总线的起始地址，其中AHB起始于0x40020000，各教程中也都默认此定义，不做更多说明。但事实上这里是会引起一点小歧义的。</font>\n\n![stm32f10xxx架构图](SDIO_arch.png)\n\n![AHB寄存器映射表](SDIO_addr.png)\n\n<font size=4>由stm32f10xxx架构图可以看出，SDIO直连AHB，并不经由南北桥转接，因此SDIO理应包含在AHB中，而寄存器映射表也证实了这一点。显然，AHB实际起始于0x40018000。</font>\n\n<font size=4>而stm32f10x.h之所以要将AHB定义成起始于0x40020000，猜测是为了便于记忆使然。没有找到官方佐证，唯一找到一位网友于我心有戚戚焉。https://www.programmersought.com/article/42371934487/</font>\n\n<font size=4>由此，在stm32f10x.h中对于SDIO的定义就显得格外与众不同。</font>\n\n![与众不同的SDIO](SDIO_stm32f10x.h.png)\n\n<font size=4>教书切忌一知半解，自勉。</font>\n","slug":"AHB-Addressing","published":1,"updated":"2021-07-29T08:52:46.985Z","_id":"ckrooeptb00005ol66582foa6","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/2021/07/29/AHB-Addressing/AHB_stm32f10x.h.png\" alt=\"AHB在stm32f10x.h中的定义\"></p>\n<span id=\"more\"></span>\n<p><font size=\"4\">在寄存器映射头文件stm32f10x.h中，官方定义了外设各总线的起始地址，其中AHB起始于0x40020000，各教程中也都默认此定义，不做更多说明。但事实上这里是会引起一点小歧义的。</font></p>\n<p><img src=\"/2021/07/29/AHB-Addressing/SDIO_arch.png\" alt=\"stm32f10xxx架构图\"></p>\n<p><img src=\"/2021/07/29/AHB-Addressing/SDIO_addr.png\" alt=\"AHB寄存器映射表\"></p>\n<p><font size=\"4\">由stm32f10xxx架构图可以看出，SDIO直连AHB，并不经由南北桥转接，因此SDIO理应包含在AHB中，而寄存器映射表也证实了这一点。显然，AHB实际起始于0x40018000。</font></p>\n<p><font size=\"4\">而stm32f10x.h之所以要将AHB定义成起始于0x40020000，猜测是为了便于记忆使然。没有找到官方佐证，唯一找到一位网友于我心有戚戚焉。<a href=\"https://www.programmersought.com/article/42371934487/\">https://www.programmersought.com/article/42371934487/</a></font></p>\n<p><font size=\"4\">由此，在stm32f10x.h中对于SDIO的定义就显得格外与众不同。</font></p>\n<p><img src=\"/2021/07/29/AHB-Addressing/SDIO_stm32f10x.h.png\" alt=\"与众不同的SDIO\"></p>\n<p><font size=\"4\">教书切忌一知半解，自勉。</font></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2021/07/29/AHB-Addressing/AHB_stm32f10x.h.png\" alt=\"AHB在stm32f10x.h中的定义\"></p>","more":"<p><font size=\"4\">在寄存器映射头文件stm32f10x.h中，官方定义了外设各总线的起始地址，其中AHB起始于0x40020000，各教程中也都默认此定义，不做更多说明。但事实上这里是会引起一点小歧义的。</font></p>\n<p><img src=\"/2021/07/29/AHB-Addressing/SDIO_arch.png\" alt=\"stm32f10xxx架构图\"></p>\n<p><img src=\"/2021/07/29/AHB-Addressing/SDIO_addr.png\" alt=\"AHB寄存器映射表\"></p>\n<p><font size=\"4\">由stm32f10xxx架构图可以看出，SDIO直连AHB，并不经由南北桥转接，因此SDIO理应包含在AHB中，而寄存器映射表也证实了这一点。显然，AHB实际起始于0x40018000。</font></p>\n<p><font size=\"4\">而stm32f10x.h之所以要将AHB定义成起始于0x40020000，猜测是为了便于记忆使然。没有找到官方佐证，唯一找到一位网友于我心有戚戚焉。<a href=\"https://www.programmersought.com/article/42371934487/\">https://www.programmersought.com/article/42371934487/</a></font></p>\n<p><font size=\"4\">由此，在stm32f10x.h中对于SDIO的定义就显得格外与众不同。</font></p>\n<p><img src=\"/2021/07/29/AHB-Addressing/SDIO_stm32f10x.h.png\" alt=\"与众不同的SDIO\"></p>\n<p><font size=\"4\">教书切忌一知半解，自勉。</font></p>"},{"title":"Modify STM32F10x_StdPeriph_Lib_V3.5.0 to Add GPIO_ToggleBits Fuction","date":"2021-08-11T03:37:59.000Z","author":"Epiapoq","_content":"\n![GPIO_ToggleBits](main.png)\n<!-- more -->\n\n<font size=4>When designing the Blinking experiment, I found that it's not very convenient to drive the leds on/off in a brief way. The original method is to define a LEDx(ON/OFF) function to drive the leds on and off seperately, Because there is no toggle-bit function in STM32F10x_StdPeriph_Lib_V3.5.0. I guess that's why in Fire's manual, a self defined function is used.</font>\n\n![Fire's Method](fire's.png)\n\n<font size=4>Finally I noticed that there is \"GPIO_ToggleBits\" Function in \"stm32f4xx_gpio.c\" of stm32f4_dsp_stdperiph_lib_v1.8.0. So I tried to transplant it into \"stm32f10x_gpio.c\" and \"stm32f10x.h\", and it works. Method follows:</font>\n\n![Function in stm32f10x_gpio.c](trans_1.png)\n\n![Declaration in stm32f10x_gpio.h](trans_2.png)\n\n![Declaration in bsp_led.h](trans_3.png)\n\n![Simulation in Proteus](simulation.gif)\n\n<font size=4>Not real time running, just like always.¯\\\\\\_(ツ)_/¯</font>\n","source":"_posts/ToggleBits.md","raw":"---\ntitle: Modify STM32F10x_StdPeriph_Lib_V3.5.0 to Add GPIO_ToggleBits Fuction\ndate: 2021-08-11 11:37:59\nauthor: Epiapoq\ntags:\n    - STM32F10xxx\n    - Embedded System\n---\n\n![GPIO_ToggleBits](main.png)\n<!-- more -->\n\n<font size=4>When designing the Blinking experiment, I found that it's not very convenient to drive the leds on/off in a brief way. The original method is to define a LEDx(ON/OFF) function to drive the leds on and off seperately, Because there is no toggle-bit function in STM32F10x_StdPeriph_Lib_V3.5.0. I guess that's why in Fire's manual, a self defined function is used.</font>\n\n![Fire's Method](fire's.png)\n\n<font size=4>Finally I noticed that there is \"GPIO_ToggleBits\" Function in \"stm32f4xx_gpio.c\" of stm32f4_dsp_stdperiph_lib_v1.8.0. So I tried to transplant it into \"stm32f10x_gpio.c\" and \"stm32f10x.h\", and it works. Method follows:</font>\n\n![Function in stm32f10x_gpio.c](trans_1.png)\n\n![Declaration in stm32f10x_gpio.h](trans_2.png)\n\n![Declaration in bsp_led.h](trans_3.png)\n\n![Simulation in Proteus](simulation.gif)\n\n<font size=4>Not real time running, just like always.¯\\\\\\_(ツ)_/¯</font>\n","slug":"ToggleBits","published":1,"updated":"2021-08-11T04:50:26.575Z","_id":"cks702j580000o0l68hnndl78","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/2021/08/11/ToggleBits/main.png\" alt=\"GPIO_ToggleBits\"></p>\n<span id=\"more\"></span>\n\n<p><font size=\"4\">When designing the Blinking experiment, I found that it’s not very convenient to drive the leds on/off in a brief way. The original method is to define a LEDx(ON/OFF) function to drive the leds on and off seperately, Because there is no toggle-bit function in STM32F10x_StdPeriph_Lib_V3.5.0. I guess that’s why in Fire’s manual, a self defined function is used.</font></p>\n<p><img src=\"/2021/08/11/ToggleBits/fire's.png\" alt=\"Fire&#39;s Method\"></p>\n<p><font size=\"4\">Finally I noticed that there is “GPIO_ToggleBits” Function in “stm32f4xx_gpio.c” of stm32f4_dsp_stdperiph_lib_v1.8.0. So I tried to transplant it into “stm32f10x_gpio.c” and “stm32f10x.h”, and it works. Method follows:</font></p>\n<p><img src=\"/2021/08/11/ToggleBits/trans_1.png\" alt=\"Function in stm32f10x_gpio.c\"></p>\n<p><img src=\"/2021/08/11/ToggleBits/trans_2.png\" alt=\"Declaration in stm32f10x_gpio.h\"></p>\n<p><img src=\"/2021/08/11/ToggleBits/trans_3.png\" alt=\"Declaration in bsp_led.h\"></p>\n<p><img src=\"/2021/08/11/ToggleBits/simulation.gif\" alt=\"Simulation in Proteus\"></p>\n<p><font size=\"4\">Not real time running, just like always.¯\\_(ツ)_/¯</font></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2021/08/11/ToggleBits/main.png\" alt=\"GPIO_ToggleBits\"></p>","more":"<p><font size=\"4\">When designing the Blinking experiment, I found that it’s not very convenient to drive the leds on/off in a brief way. The original method is to define a LEDx(ON/OFF) function to drive the leds on and off seperately, Because there is no toggle-bit function in STM32F10x_StdPeriph_Lib_V3.5.0. I guess that’s why in Fire’s manual, a self defined function is used.</font></p>\n<p><img src=\"/2021/08/11/ToggleBits/fire's.png\" alt=\"Fire&#39;s Method\"></p>\n<p><font size=\"4\">Finally I noticed that there is “GPIO_ToggleBits” Function in “stm32f4xx_gpio.c” of stm32f4_dsp_stdperiph_lib_v1.8.0. So I tried to transplant it into “stm32f10x_gpio.c” and “stm32f10x.h”, and it works. Method follows:</font></p>\n<p><img src=\"/2021/08/11/ToggleBits/trans_1.png\" alt=\"Function in stm32f10x_gpio.c\"></p>\n<p><img src=\"/2021/08/11/ToggleBits/trans_2.png\" alt=\"Declaration in stm32f10x_gpio.h\"></p>\n<p><img src=\"/2021/08/11/ToggleBits/trans_3.png\" alt=\"Declaration in bsp_led.h\"></p>\n<p><img src=\"/2021/08/11/ToggleBits/simulation.gif\" alt=\"Simulation in Proteus\"></p>\n<p><font size=\"4\">Not real time running, just like always.¯\\_(ツ)_/¯</font></p>"},{"title":"关于stm32中断的深入理解","date":"2021-08-14T02:14:24.000Z","author":"Epiapoq","_content":"\n<font size=4>stm32的中断资源非常多，只要是外设就有中断，设置起来也很复杂，除了必须要事先配置好NVIC外，用到哪个外设还要专门对该外设再做一次初始化配置。广播操式的配置代码在很多教程里都做了说明，大同小异，但同时也都在罗列代码时回避了（有意或无意的）中断源的一些关键性知识，本文旨在结合8051寄存器编程的先修课程知识解释stm32中罕有人涉及的关于中断向量入口的知识点，同时也设计了一个按键中断的实验，相信比同类大路货实验更能反映stm32中断的本质。</font>\n<!-- more -->\n\n<font size=4>1.但凡是中断，必须要有入口</font>\n\n<font size=4>从这个意义上来说，8051和stm32是一样的。所以8051会有一张中断向量入口表，而stm32与所有中断相关的总统领起名叫NVIC(Nested Vectored Interrupt Controller)，光是字面意思就足以解释其中断机制了。</font>\n\n![8051 interrupt vector (fixed)](8051_vector.png)\n\n<font size=4>我们自己编写的中断服务子程序就放在这个入口处，一旦硬件上触发了某个中断，PC就会临时打断其顺序执行的使命，转而载入该中断向量入口地址，从而实现中断程序的执行，中断入口和8051汇编伪指令的跳转标号异曲同工，作用近似，只是后者是在我们的计划之中的，而前者却是意料之外的。这正是中断和跳转的区别：跳转——我们知道会发生以及何时发生；中断——我们知道有可能发生以及不确定何时发生。</font>\n\n<font size=4>2.中断向量入口是否固定</font>\n\n<font size=4>8051中断源很少（8051什么都很少），只有6-7个，相邻向量入口地址相差8字节，一般来说，为了不影响到这些中断的使用，我们会让main的位置越过这片区域，所以经常会有ORG 30H的写法。可见，即便我们一个中断也用不上，也顶多浪费30H个字节的ROM空间，相较于4k Bytes的程序存储器空间，还承受得起，所以8051的中断向量入口是固定不变的设计还是合理的。但是stm32中断源非常多，一个项目中能用得上的中断数目了了，如果还按固定间隔排列好所有的中断向量入口，浪费就比较可观了，即便有几百k的Flash，但地主家也没有余粮，所以stm32的设计，严格的说是Cotex-M3的设计，就比较高杆，直到编译完成那一刻才最终确定中断向量入口位置，用到的中断和没用到的中断泾渭分明，截然分开，从而节省了大量资源。而且同时解决了8051中断子程序超过8 Bytes就必须用跳转的不便（其本质也还是一种浪费）。</font>\n\n![EXTI.map](EXTI_map.png)\n\n![8051 ISR larger than 8 Bytes](8051_jmp.png)\n\n<font size=4>3.中断向量入口（“中断请求话事人”）是在哪里定义的</font>\n\n<font size=4>在编写自己的中断函数库时，头文件中会先对中断相关参数进行自定义，其中用到的某IRQHandler，从标准库中是找不到定义的，需要打开启动文件(该文件用汇编语言编写)startup_stm32f10x_md.s才能找到，但要注意这只是默认分配的空间顺序，编译后会发生上文中所示的变化。</font>\n\n![自定义IRQHandler](IRQHandler_define.png)\n\n![启动文件中对中断请求话事人的定义](Vector_Map.png)\n\n<font size=4>4.谁能中断谁</font>\n\n<font size=4>很多教程里对于外部中断的举例非常简略，用一个或多个按键作为外部中断触发信号，实现点灯功能，而按键之间并没有发生嵌套关系，因此对于优先级分组（Priority Group）、抢占优先级（Preemption Priority）、次优先级（Sub-Priority）等概念仅停留在拾人牙慧的层面，甚至存在从事过所谓项目开发后仍然理解错误的人且毁人不倦<https://blog.csdn.net/dahailinan/article/details/80693781>。需要再次强调的是，优先级分组仅能设置一次，决定中断之间谁可以嵌套谁的是（且仅是）抢占优先级的高低（数字越小级别越高）。</font>\n\n![Cortex-M3技术参考手册](PriorityGroupConfig_CM3.png)\n\n![stm32固件库使用手册](PriorityGroupConfig.png)\n\n<font size=4>5.能够体现中断嵌套关系的按键中断实验</font>\n\n<font size=4>要对得起NVIC的'N'，我们至少需要两个按键，且二者的抢占优先级有高低之分。设计思路如下：</font>\n\ni. 在没有中断发生时，LED1正常闪烁，LED2常亮\n\nii. KEY1触发中断时，LED1被中断，LED2闪烁数次后常亮，LED1恢复正常闪烁\n\niii. KEY2触发中断时，LED1被中断，LED2熄灭较长一段时间后，LED1恢复正常闪烁\n\niV. KEY2触发中断后且中断程序运行过程中，KEY1又触发中断，LED1被中断，LED2先是熄灭然后闪烁，闪烁结束后接续熄灭，直到完成KEY2中断程序，LED1恢复正常闪烁\n\nv. KEY2触发中断后且中断程序运行过程中，KEY1又触发中断，LED1被中断，LED2闪烁直到结束后又熄灭，LED1恢复正常闪烁\n\n![配置抢占优先级实现嵌套](PriorityConfig.png)\n\n![中断中断的中断](nested.gif)","source":"_posts/nvic.md","raw":"---\ntitle: 关于stm32中断的深入理解\ndate: 2021-08-14 10:14:24\nauthor: Epiapoq\ntags:\n    - STM32F10xxx\n    - Embedded System\n---\n\n<font size=4>stm32的中断资源非常多，只要是外设就有中断，设置起来也很复杂，除了必须要事先配置好NVIC外，用到哪个外设还要专门对该外设再做一次初始化配置。广播操式的配置代码在很多教程里都做了说明，大同小异，但同时也都在罗列代码时回避了（有意或无意的）中断源的一些关键性知识，本文旨在结合8051寄存器编程的先修课程知识解释stm32中罕有人涉及的关于中断向量入口的知识点，同时也设计了一个按键中断的实验，相信比同类大路货实验更能反映stm32中断的本质。</font>\n<!-- more -->\n\n<font size=4>1.但凡是中断，必须要有入口</font>\n\n<font size=4>从这个意义上来说，8051和stm32是一样的。所以8051会有一张中断向量入口表，而stm32与所有中断相关的总统领起名叫NVIC(Nested Vectored Interrupt Controller)，光是字面意思就足以解释其中断机制了。</font>\n\n![8051 interrupt vector (fixed)](8051_vector.png)\n\n<font size=4>我们自己编写的中断服务子程序就放在这个入口处，一旦硬件上触发了某个中断，PC就会临时打断其顺序执行的使命，转而载入该中断向量入口地址，从而实现中断程序的执行，中断入口和8051汇编伪指令的跳转标号异曲同工，作用近似，只是后者是在我们的计划之中的，而前者却是意料之外的。这正是中断和跳转的区别：跳转——我们知道会发生以及何时发生；中断——我们知道有可能发生以及不确定何时发生。</font>\n\n<font size=4>2.中断向量入口是否固定</font>\n\n<font size=4>8051中断源很少（8051什么都很少），只有6-7个，相邻向量入口地址相差8字节，一般来说，为了不影响到这些中断的使用，我们会让main的位置越过这片区域，所以经常会有ORG 30H的写法。可见，即便我们一个中断也用不上，也顶多浪费30H个字节的ROM空间，相较于4k Bytes的程序存储器空间，还承受得起，所以8051的中断向量入口是固定不变的设计还是合理的。但是stm32中断源非常多，一个项目中能用得上的中断数目了了，如果还按固定间隔排列好所有的中断向量入口，浪费就比较可观了，即便有几百k的Flash，但地主家也没有余粮，所以stm32的设计，严格的说是Cotex-M3的设计，就比较高杆，直到编译完成那一刻才最终确定中断向量入口位置，用到的中断和没用到的中断泾渭分明，截然分开，从而节省了大量资源。而且同时解决了8051中断子程序超过8 Bytes就必须用跳转的不便（其本质也还是一种浪费）。</font>\n\n![EXTI.map](EXTI_map.png)\n\n![8051 ISR larger than 8 Bytes](8051_jmp.png)\n\n<font size=4>3.中断向量入口（“中断请求话事人”）是在哪里定义的</font>\n\n<font size=4>在编写自己的中断函数库时，头文件中会先对中断相关参数进行自定义，其中用到的某IRQHandler，从标准库中是找不到定义的，需要打开启动文件(该文件用汇编语言编写)startup_stm32f10x_md.s才能找到，但要注意这只是默认分配的空间顺序，编译后会发生上文中所示的变化。</font>\n\n![自定义IRQHandler](IRQHandler_define.png)\n\n![启动文件中对中断请求话事人的定义](Vector_Map.png)\n\n<font size=4>4.谁能中断谁</font>\n\n<font size=4>很多教程里对于外部中断的举例非常简略，用一个或多个按键作为外部中断触发信号，实现点灯功能，而按键之间并没有发生嵌套关系，因此对于优先级分组（Priority Group）、抢占优先级（Preemption Priority）、次优先级（Sub-Priority）等概念仅停留在拾人牙慧的层面，甚至存在从事过所谓项目开发后仍然理解错误的人且毁人不倦<https://blog.csdn.net/dahailinan/article/details/80693781>。需要再次强调的是，优先级分组仅能设置一次，决定中断之间谁可以嵌套谁的是（且仅是）抢占优先级的高低（数字越小级别越高）。</font>\n\n![Cortex-M3技术参考手册](PriorityGroupConfig_CM3.png)\n\n![stm32固件库使用手册](PriorityGroupConfig.png)\n\n<font size=4>5.能够体现中断嵌套关系的按键中断实验</font>\n\n<font size=4>要对得起NVIC的'N'，我们至少需要两个按键，且二者的抢占优先级有高低之分。设计思路如下：</font>\n\ni. 在没有中断发生时，LED1正常闪烁，LED2常亮\n\nii. KEY1触发中断时，LED1被中断，LED2闪烁数次后常亮，LED1恢复正常闪烁\n\niii. KEY2触发中断时，LED1被中断，LED2熄灭较长一段时间后，LED1恢复正常闪烁\n\niV. KEY2触发中断后且中断程序运行过程中，KEY1又触发中断，LED1被中断，LED2先是熄灭然后闪烁，闪烁结束后接续熄灭，直到完成KEY2中断程序，LED1恢复正常闪烁\n\nv. KEY2触发中断后且中断程序运行过程中，KEY1又触发中断，LED1被中断，LED2闪烁直到结束后又熄灭，LED1恢复正常闪烁\n\n![配置抢占优先级实现嵌套](PriorityConfig.png)\n\n![中断中断的中断](nested.gif)","slug":"nvic","published":1,"updated":"2021-08-21T00:19:43.921Z","_id":"cksc18en70000t0l6bqvm62pw","comments":1,"layout":"post","photos":[],"link":"","content":"<p><font size=\"4\">stm32的中断资源非常多，只要是外设就有中断，设置起来也很复杂，除了必须要事先配置好NVIC外，用到哪个外设还要专门对该外设再做一次初始化配置。广播操式的配置代码在很多教程里都做了说明，大同小异，但同时也都在罗列代码时回避了（有意或无意的）中断源的一些关键性知识，本文旨在结合8051寄存器编程的先修课程知识解释stm32中罕有人涉及的关于中断向量入口的知识点，同时也设计了一个按键中断的实验，相信比同类大路货实验更能反映stm32中断的本质。</font></p>\n<span id=\"more\"></span>\n\n<p><font size=\"4\">1.但凡是中断，必须要有入口</font></p>\n<p><font size=\"4\">从这个意义上来说，8051和stm32是一样的。所以8051会有一张中断向量入口表，而stm32与所有中断相关的总统领起名叫NVIC(Nested Vectored Interrupt Controller)，光是字面意思就足以解释其中断机制了。</font></p>\n<p><img src=\"/2021/08/14/nvic/8051_vector.png\" alt=\"8051 interrupt vector (fixed)\"></p>\n<p><font size=\"4\">我们自己编写的中断服务子程序就放在这个入口处，一旦硬件上触发了某个中断，PC就会临时打断其顺序执行的使命，转而载入该中断向量入口地址，从而实现中断程序的执行，中断入口和8051汇编伪指令的跳转标号异曲同工，作用近似，只是后者是在我们的计划之中的，而前者却是意料之外的。这正是中断和跳转的区别：跳转——我们知道会发生以及何时发生；中断——我们知道有可能发生以及不确定何时发生。</font></p>\n<p><font size=\"4\">2.中断向量入口是否固定</font></p>\n<p><font size=\"4\">8051中断源很少（8051什么都很少），只有6-7个，相邻向量入口地址相差8字节，一般来说，为了不影响到这些中断的使用，我们会让main的位置越过这片区域，所以经常会有ORG 30H的写法。可见，即便我们一个中断也用不上，也顶多浪费30H个字节的ROM空间，相较于4k Bytes的程序存储器空间，还承受得起，所以8051的中断向量入口是固定不变的设计还是合理的。但是stm32中断源非常多，一个项目中能用得上的中断数目了了，如果还按固定间隔排列好所有的中断向量入口，浪费就比较可观了，即便有几百k的Flash，但地主家也没有余粮，所以stm32的设计，严格的说是Cotex-M3的设计，就比较高杆，直到编译完成那一刻才最终确定中断向量入口位置，用到的中断和没用到的中断泾渭分明，截然分开，从而节省了大量资源。而且同时解决了8051中断子程序超过8 Bytes就必须用跳转的不便（其本质也还是一种浪费）。</font></p>\n<p><img src=\"/2021/08/14/nvic/EXTI_map.png\" alt=\"EXTI.map\"></p>\n<p><img src=\"/2021/08/14/nvic/8051_jmp.png\" alt=\"8051 ISR larger than 8 Bytes\"></p>\n<p><font size=\"4\">3.中断向量入口（“中断请求话事人”）是在哪里定义的</font></p>\n<p><font size=\"4\">在编写自己的中断函数库时，头文件中会先对中断相关参数进行自定义，其中用到的某IRQHandler，从标准库中是找不到定义的，需要打开启动文件(该文件用汇编语言编写)startup_stm32f10x_md.s才能找到，但要注意这只是默认分配的空间顺序，编译后会发生上文中所示的变化。</font></p>\n<p><img src=\"/2021/08/14/nvic/IRQHandler_define.png\" alt=\"自定义IRQHandler\"></p>\n<p><img src=\"/2021/08/14/nvic/Vector_Map.png\" alt=\"启动文件中对中断请求话事人的定义\"></p>\n<p><font size=\"4\">4.谁能中断谁</font></p>\n<p><font size=\"4\">很多教程里对于外部中断的举例非常简略，用一个或多个按键作为外部中断触发信号，实现点灯功能，而按键之间并没有发生嵌套关系，因此对于优先级分组（Priority Group）、抢占优先级（Preemption Priority）、次优先级（Sub-Priority）等概念仅停留在拾人牙慧的层面，甚至存在从事过所谓项目开发后仍然理解错误的人且毁人不倦<a href=\"https://blog.csdn.net/dahailinan/article/details/80693781\">https://blog.csdn.net/dahailinan/article/details/80693781</a>。需要再次强调的是，优先级分组仅能设置一次，决定中断之间谁可以嵌套谁的是（且仅是）抢占优先级的高低（数字越小级别越高）。</font></p>\n<p><img src=\"/2021/08/14/nvic/PriorityGroupConfig_CM3.png\" alt=\"Cortex-M3技术参考手册\"></p>\n<p><img src=\"/2021/08/14/nvic/PriorityGroupConfig.png\" alt=\"stm32固件库使用手册\"></p>\n<p><font size=\"4\">5.能够体现中断嵌套关系的按键中断实验</font></p>\n<p><font size=\"4\">要对得起NVIC的’N’，我们至少需要两个按键，且二者的抢占优先级有高低之分。设计思路如下：</font></p>\n<p>i. 在没有中断发生时，LED1正常闪烁，LED2常亮</p>\n<p>ii. KEY1触发中断时，LED1被中断，LED2闪烁数次后常亮，LED1恢复正常闪烁</p>\n<p>iii. KEY2触发中断时，LED1被中断，LED2熄灭较长一段时间后，LED1恢复正常闪烁</p>\n<p>iV. KEY2触发中断后且中断程序运行过程中，KEY1又触发中断，LED1被中断，LED2先是熄灭然后闪烁，闪烁结束后接续熄灭，直到完成KEY2中断程序，LED1恢复正常闪烁</p>\n<p>v. KEY2触发中断后且中断程序运行过程中，KEY1又触发中断，LED1被中断，LED2闪烁直到结束后又熄灭，LED1恢复正常闪烁</p>\n<p><img src=\"/2021/08/14/nvic/PriorityConfig.png\" alt=\"配置抢占优先级实现嵌套\"></p>\n<p><img src=\"/2021/08/14/nvic/nested.gif\" alt=\"中断中断的中断\"></p>\n","site":{"data":{}},"excerpt":"<p><font size=\"4\">stm32的中断资源非常多，只要是外设就有中断，设置起来也很复杂，除了必须要事先配置好NVIC外，用到哪个外设还要专门对该外设再做一次初始化配置。广播操式的配置代码在很多教程里都做了说明，大同小异，但同时也都在罗列代码时回避了（有意或无意的）中断源的一些关键性知识，本文旨在结合8051寄存器编程的先修课程知识解释stm32中罕有人涉及的关于中断向量入口的知识点，同时也设计了一个按键中断的实验，相信比同类大路货实验更能反映stm32中断的本质。</font></p>","more":"<p><font size=\"4\">1.但凡是中断，必须要有入口</font></p>\n<p><font size=\"4\">从这个意义上来说，8051和stm32是一样的。所以8051会有一张中断向量入口表，而stm32与所有中断相关的总统领起名叫NVIC(Nested Vectored Interrupt Controller)，光是字面意思就足以解释其中断机制了。</font></p>\n<p><img src=\"/2021/08/14/nvic/8051_vector.png\" alt=\"8051 interrupt vector (fixed)\"></p>\n<p><font size=\"4\">我们自己编写的中断服务子程序就放在这个入口处，一旦硬件上触发了某个中断，PC就会临时打断其顺序执行的使命，转而载入该中断向量入口地址，从而实现中断程序的执行，中断入口和8051汇编伪指令的跳转标号异曲同工，作用近似，只是后者是在我们的计划之中的，而前者却是意料之外的。这正是中断和跳转的区别：跳转——我们知道会发生以及何时发生；中断——我们知道有可能发生以及不确定何时发生。</font></p>\n<p><font size=\"4\">2.中断向量入口是否固定</font></p>\n<p><font size=\"4\">8051中断源很少（8051什么都很少），只有6-7个，相邻向量入口地址相差8字节，一般来说，为了不影响到这些中断的使用，我们会让main的位置越过这片区域，所以经常会有ORG 30H的写法。可见，即便我们一个中断也用不上，也顶多浪费30H个字节的ROM空间，相较于4k Bytes的程序存储器空间，还承受得起，所以8051的中断向量入口是固定不变的设计还是合理的。但是stm32中断源非常多，一个项目中能用得上的中断数目了了，如果还按固定间隔排列好所有的中断向量入口，浪费就比较可观了，即便有几百k的Flash，但地主家也没有余粮，所以stm32的设计，严格的说是Cotex-M3的设计，就比较高杆，直到编译完成那一刻才最终确定中断向量入口位置，用到的中断和没用到的中断泾渭分明，截然分开，从而节省了大量资源。而且同时解决了8051中断子程序超过8 Bytes就必须用跳转的不便（其本质也还是一种浪费）。</font></p>\n<p><img src=\"/2021/08/14/nvic/EXTI_map.png\" alt=\"EXTI.map\"></p>\n<p><img src=\"/2021/08/14/nvic/8051_jmp.png\" alt=\"8051 ISR larger than 8 Bytes\"></p>\n<p><font size=\"4\">3.中断向量入口（“中断请求话事人”）是在哪里定义的</font></p>\n<p><font size=\"4\">在编写自己的中断函数库时，头文件中会先对中断相关参数进行自定义，其中用到的某IRQHandler，从标准库中是找不到定义的，需要打开启动文件(该文件用汇编语言编写)startup_stm32f10x_md.s才能找到，但要注意这只是默认分配的空间顺序，编译后会发生上文中所示的变化。</font></p>\n<p><img src=\"/2021/08/14/nvic/IRQHandler_define.png\" alt=\"自定义IRQHandler\"></p>\n<p><img src=\"/2021/08/14/nvic/Vector_Map.png\" alt=\"启动文件中对中断请求话事人的定义\"></p>\n<p><font size=\"4\">4.谁能中断谁</font></p>\n<p><font size=\"4\">很多教程里对于外部中断的举例非常简略，用一个或多个按键作为外部中断触发信号，实现点灯功能，而按键之间并没有发生嵌套关系，因此对于优先级分组（Priority Group）、抢占优先级（Preemption Priority）、次优先级（Sub-Priority）等概念仅停留在拾人牙慧的层面，甚至存在从事过所谓项目开发后仍然理解错误的人且毁人不倦<a href=\"https://blog.csdn.net/dahailinan/article/details/80693781\">https://blog.csdn.net/dahailinan/article/details/80693781</a>。需要再次强调的是，优先级分组仅能设置一次，决定中断之间谁可以嵌套谁的是（且仅是）抢占优先级的高低（数字越小级别越高）。</font></p>\n<p><img src=\"/2021/08/14/nvic/PriorityGroupConfig_CM3.png\" alt=\"Cortex-M3技术参考手册\"></p>\n<p><img src=\"/2021/08/14/nvic/PriorityGroupConfig.png\" alt=\"stm32固件库使用手册\"></p>\n<p><font size=\"4\">5.能够体现中断嵌套关系的按键中断实验</font></p>\n<p><font size=\"4\">要对得起NVIC的’N’，我们至少需要两个按键，且二者的抢占优先级有高低之分。设计思路如下：</font></p>\n<p>i. 在没有中断发生时，LED1正常闪烁，LED2常亮</p>\n<p>ii. KEY1触发中断时，LED1被中断，LED2闪烁数次后常亮，LED1恢复正常闪烁</p>\n<p>iii. KEY2触发中断时，LED1被中断，LED2熄灭较长一段时间后，LED1恢复正常闪烁</p>\n<p>iV. KEY2触发中断后且中断程序运行过程中，KEY1又触发中断，LED1被中断，LED2先是熄灭然后闪烁，闪烁结束后接续熄灭，直到完成KEY2中断程序，LED1恢复正常闪烁</p>\n<p>v. KEY2触发中断后且中断程序运行过程中，KEY1又触发中断，LED1被中断，LED2闪烁直到结束后又熄灭，LED1恢复正常闪烁</p>\n<p><img src=\"/2021/08/14/nvic/PriorityConfig.png\" alt=\"配置抢占优先级实现嵌套\"></p>\n<p><img src=\"/2021/08/14/nvic/nested.gif\" alt=\"中断中断的中断\"></p>"},{"title":"Fritzing's ssleay.dll error","date":"2021-08-20T04:03:13.000Z","author":"Epiapoq","_content":" \n ![modified adapter](adapter_modified.png)\n <!-- more -->\n \n <font size=4>When designing \"pulse width measurement\" lab of stm3210x, I used a ttl-to-usb module to connect mcu with pc. The module is the same one which is used to upload program to a diy arduino board(designed by one of my hard working student). The core chip of the module is CH340G. But same as the similar pruducts on market, this mudule alse dose not lead out a reset pin. Say, when uploading, we must press the reset button on the Arduino board at the proper instant of time. NOT CONVENIENT. So I try to draw a modified circuit in fritzing to solve the problem.</font>\n\n![the only one adapter(CH340G) supports reset(DTR pin) I've ever seen, but can't find in China](adapter.png)\n\n<font size=4>But when I was opening fritzing, popuped an error.</font>\n\n![ssleay.dll error](error.png)\n\n<font size=4>Then I found the path in the error dialogue box, and copied \"ssleay32.dll\" and \"libeay32.dll\" to fritzing's folder. Solved.</font>","source":"_posts/fritzing-dll-error.md","raw":"---\ntitle: Fritzing's ssleay.dll error\ndate: 2021-08-20 12:03:13\nauthor: Epiapoq\ntags:\n    - Fritzing\n    - STM32F10xxx\n    - Embedded System\n    - Arduino\n---\n \n ![modified adapter](adapter_modified.png)\n <!-- more -->\n \n <font size=4>When designing \"pulse width measurement\" lab of stm3210x, I used a ttl-to-usb module to connect mcu with pc. The module is the same one which is used to upload program to a diy arduino board(designed by one of my hard working student). The core chip of the module is CH340G. But same as the similar pruducts on market, this mudule alse dose not lead out a reset pin. Say, when uploading, we must press the reset button on the Arduino board at the proper instant of time. NOT CONVENIENT. So I try to draw a modified circuit in fritzing to solve the problem.</font>\n\n![the only one adapter(CH340G) supports reset(DTR pin) I've ever seen, but can't find in China](adapter.png)\n\n<font size=4>But when I was opening fritzing, popuped an error.</font>\n\n![ssleay.dll error](error.png)\n\n<font size=4>Then I found the path in the error dialogue box, and copied \"ssleay32.dll\" and \"libeay32.dll\" to fritzing's folder. Solved.</font>","slug":"fritzing-dll-error","published":1,"updated":"2021-08-20T04:59:44.220Z","_id":"cksjv8u0r000048l6c04scgsx","comments":1,"layout":"post","photos":[],"link":"","content":"<p> <img src=\"/2021/08/20/fritzing-dll-error/adapter_modified.png\" alt=\"modified adapter\"><br> <span id=\"more\"></span></p>\n<p> <font size=\"4\">When designing “pulse width measurement” lab of stm3210x, I used a ttl-to-usb module to connect mcu with pc. The module is the same one which is used to upload program to a diy arduino board(designed by one of my hard working student). The core chip of the module is CH340G. But same as the similar pruducts on market, this mudule alse dose not lead out a reset pin. Say, when uploading, we must press the reset button on the Arduino board at the proper instant of time. NOT CONVENIENT. So I try to draw a modified circuit in fritzing to solve the problem.</font></p>\n<p><img src=\"/2021/08/20/fritzing-dll-error/adapter.png\" alt=\"the only one adapter(CH340G) supports reset(DTR pin) I&#39;ve ever seen, but can&#39;t find in China\"></p>\n<p><font size=\"4\">But when I was opening fritzing, popuped an error.</font></p>\n<p><img src=\"/2021/08/20/fritzing-dll-error/error.png\" alt=\"ssleay.dll error\"></p>\n<p><font size=\"4\">Then I found the path in the error dialogue box, and copied “ssleay32.dll” and “libeay32.dll” to fritzing’s folder. Solved.</font></p>\n","site":{"data":{}},"excerpt":"<p> <img src=\"/2021/08/20/fritzing-dll-error/adapter_modified.png\" alt=\"modified adapter\"><br></p>","more":"<p></p>\n<p> <font size=\"4\">When designing “pulse width measurement” lab of stm3210x, I used a ttl-to-usb module to connect mcu with pc. The module is the same one which is used to upload program to a diy arduino board(designed by one of my hard working student). The core chip of the module is CH340G. But same as the similar pruducts on market, this mudule alse dose not lead out a reset pin. Say, when uploading, we must press the reset button on the Arduino board at the proper instant of time. NOT CONVENIENT. So I try to draw a modified circuit in fritzing to solve the problem.</font></p>\n<p><img src=\"/2021/08/20/fritzing-dll-error/adapter.png\" alt=\"the only one adapter(CH340G) supports reset(DTR pin) I&#39;ve ever seen, but can&#39;t find in China\"></p>\n<p><font size=\"4\">But when I was opening fritzing, popuped an error.</font></p>\n<p><img src=\"/2021/08/20/fritzing-dll-error/error.png\" alt=\"ssleay.dll error\"></p>\n<p><font size=\"4\">Then I found the path in the error dialogue box, and copied “ssleay32.dll” and “libeay32.dll” to fritzing’s folder. Solved.</font></p>"},{"title":"How to fix \"reset and run\" failure in MDK","date":"2021-08-20T04:50:59.000Z","author":"Epiapoq","_content":"\n<font size=4>If failed, uncheck the \"Enable\" checkbox.</font>\n\n ![Uncheck](Enable.png)\n <!-- more -->\n","source":"_posts/reset-run.md","raw":"---\ntitle: How to fix \"reset and run\" failure in MDK\ndate: 2021-08-20 12:50:59\nauthor: Epiapoq\ntags:\n    - MDK\n    - STM32F10xxx\n    - Embedded System\n---\n\n<font size=4>If failed, uncheck the \"Enable\" checkbox.</font>\n\n ![Uncheck](Enable.png)\n <!-- more -->\n","slug":"reset-run","published":1,"updated":"2021-08-20T04:58:49.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksjvuo5n0000jgl618b5a9hj","content":"<p><font size=\"4\">If failed, uncheck the “Enable” checkbox.</font></p>\n<p> <img src=\"/2021/08/20/reset-run/Enable.png\" alt=\"Uncheck\"><br> <span id=\"more\"></span></p>\n","site":{"data":{}},"excerpt":"<p><font size=\"4\">If failed, uncheck the “Enable” checkbox.</font></p>\n<p> <img src=\"/2021/08/20/reset-run/Enable.png\" alt=\"Uncheck\"><br></p>","more":"<p></p>"},{"title":"How to generate 4 channel PWM at the same time on nucleo -- REMAP","date":"2021-08-20T05:01:37.000Z","author":"Epiapoq","_content":"\n<font size=4>When configuring TIM3 as a PWM generater, CH1-CH4 are PA6, PA7， PB0, PB1. </font>\n\n![four GPIO pins for 4 channels](4_channels.png)\n<!-- more -->\n\n<font size=4>Eventhough all the above four pins have been lead out on nucleo, 0 ohms resistors of PA6 and PA7 remain unsoldered by default. We must find another way to generate the other 2 PWM if we don't want to solder SB36 and SB39.</font> \n\n![PA6 and PA7 connected with SB36 and SB39](connections.png)\n\n![SB36 and SB37 unsoldered with 0 ohms resistor by default](unsoldered.png)\n\n<font size=4>Like FPGA, some pins(not all) of stm32f10x can be remapped to each other. We can use \"fullremap\" to remap CH1-CH4 to PC6-PC9 or \"partialremap\", only PA6-PA7 to PB4-PB5.(I also tried the latter, PB5 worked but PB4 still didn't. Don't know why.)</font> \n\n![TIM3_REMAP Table](table.png)\n\n```c\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); // Enable both GPIOx and AFIO Clock before remapping\nGPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE); // FullRemap to PC6, PC7, PC8, PC9\n```\n\n<font size=4>Finally I got all PWM, but still don't understand why PB4 malfunctions. Maybe need read UM1724 again and again. Sugar cane is not sweet at both ends. Now that we enjoyed the convennience of finished hardware, we must accept the limitition of it and try our best to read the user's manual and rack our brains to find an alternative method.</font> ","source":"_posts/remapping.md","raw":"---\ntitle: How to generate 4 channel PWM at the same time on nucleo -- REMAP\ndate: 2021-08-20 13:01:37\nauthor: Epiapoq\ntags:\n    - Nucleo\n    - STM32F10xxx\n    - Embedded System\n---\n\n<font size=4>When configuring TIM3 as a PWM generater, CH1-CH4 are PA6, PA7， PB0, PB1. </font>\n\n![four GPIO pins for 4 channels](4_channels.png)\n<!-- more -->\n\n<font size=4>Eventhough all the above four pins have been lead out on nucleo, 0 ohms resistors of PA6 and PA7 remain unsoldered by default. We must find another way to generate the other 2 PWM if we don't want to solder SB36 and SB39.</font> \n\n![PA6 and PA7 connected with SB36 and SB39](connections.png)\n\n![SB36 and SB37 unsoldered with 0 ohms resistor by default](unsoldered.png)\n\n<font size=4>Like FPGA, some pins(not all) of stm32f10x can be remapped to each other. We can use \"fullremap\" to remap CH1-CH4 to PC6-PC9 or \"partialremap\", only PA6-PA7 to PB4-PB5.(I also tried the latter, PB5 worked but PB4 still didn't. Don't know why.)</font> \n\n![TIM3_REMAP Table](table.png)\n\n```c\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); // Enable both GPIOx and AFIO Clock before remapping\nGPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE); // FullRemap to PC6, PC7, PC8, PC9\n```\n\n<font size=4>Finally I got all PWM, but still don't understand why PB4 malfunctions. Maybe need read UM1724 again and again. Sugar cane is not sweet at both ends. Now that we enjoyed the convennience of finished hardware, we must accept the limitition of it and try our best to read the user's manual and rack our brains to find an alternative method.</font> ","slug":"remapping","published":1,"updated":"2021-08-20T09:25:07.760Z","_id":"cksk574y0000004l67erxdg9t","comments":1,"layout":"post","photos":[],"link":"","content":"<p><font size=\"4\">When configuring TIM3 as a PWM generater, CH1-CH4 are PA6, PA7， PB0, PB1. </font></p>\n<p><img src=\"/2021/08/20/remapping/4_channels.png\" alt=\"four GPIO pins for 4 channels\"></p>\n<span id=\"more\"></span>\n\n<p><font size=\"4\">Eventhough all the above four pins have been lead out on nucleo, 0 ohms resistors of PA6 and PA7 remain unsoldered by default. We must find another way to generate the other 2 PWM if we don’t want to solder SB36 and SB39.</font> </p>\n<p><img src=\"/2021/08/20/remapping/connections.png\" alt=\"PA6 and PA7 connected with SB36 and SB39\"></p>\n<p><img src=\"/2021/08/20/remapping/unsoldered.png\" alt=\"SB36 and SB37 unsoldered with 0 ohms resistor by default\"></p>\n<p><font size=\"4\">Like FPGA, some pins(not all) of stm32f10x can be remapped to each other. We can use “fullremap” to remap CH1-CH4 to PC6-PC9 or “partialremap”, only PA6-PA7 to PB4-PB5.(I also tried the latter, PB5 worked but PB4 still didn’t. Don’t know why.)</font> </p>\n<p><img src=\"/2021/08/20/remapping/table.png\" alt=\"TIM3_REMAP Table\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class=\"line\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); <span class=\"comment\">// Enable both GPIOx and AFIO Clock before remapping</span></span><br><span class=\"line\">GPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE); <span class=\"comment\">// FullRemap to PC6, PC7, PC8, PC9</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=\"4\">Finally I got all PWM, but still don’t understand why PB4 malfunctions. Maybe need read UM1724 again and again. Sugar cane is not sweet at both ends. Now that we enjoyed the convennience of finished hardware, we must accept the limitition of it and try our best to read the user’s manual and rack our brains to find an alternative method.</font> </p>\n","site":{"data":{}},"excerpt":"<p><font size=\"4\">When configuring TIM3 as a PWM generater, CH1-CH4 are PA6, PA7， PB0, PB1. </font></p>\n<p><img src=\"/2021/08/20/remapping/4_channels.png\" alt=\"four GPIO pins for 4 channels\"></p>","more":"<p><font size=\"4\">Eventhough all the above four pins have been lead out on nucleo, 0 ohms resistors of PA6 and PA7 remain unsoldered by default. We must find another way to generate the other 2 PWM if we don’t want to solder SB36 and SB39.</font> </p>\n<p><img src=\"/2021/08/20/remapping/connections.png\" alt=\"PA6 and PA7 connected with SB36 and SB39\"></p>\n<p><img src=\"/2021/08/20/remapping/unsoldered.png\" alt=\"SB36 and SB37 unsoldered with 0 ohms resistor by default\"></p>\n<p><font size=\"4\">Like FPGA, some pins(not all) of stm32f10x can be remapped to each other. We can use “fullremap” to remap CH1-CH4 to PC6-PC9 or “partialremap”, only PA6-PA7 to PB4-PB5.(I also tried the latter, PB5 worked but PB4 still didn’t. Don’t know why.)</font> </p>\n<p><img src=\"/2021/08/20/remapping/table.png\" alt=\"TIM3_REMAP Table\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class=\"line\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); <span class=\"comment\">// Enable both GPIOx and AFIO Clock before remapping</span></span><br><span class=\"line\">GPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE); <span class=\"comment\">// FullRemap to PC6, PC7, PC8, PC9</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=\"4\">Finally I got all PWM, but still don’t understand why PB4 malfunctions. Maybe need read UM1724 again and again. Sugar cane is not sweet at both ends. Now that we enjoyed the convennience of finished hardware, we must accept the limitition of it and try our best to read the user’s manual and rack our brains to find an alternative method.</font> </p>"},{"title":"stm32f10x通过i2c读写at24c32","date":"2021-08-25T15:27:51.000Z","author":"Epiapoq","_content":"\n![注：指南者才有i2c的硬件例程，mini只有软件i2c](origin.png)\n\n<font size=4>看上去野火的例程来源于st官方，很多人对这个bsp库甚至stm32的i2c硬件都存在质疑，我在设计实验的时候没有发现软硬件存在什么大问题，程序上的一些小瑕疵是有，但瑕不掩瑜。同时还有人提出说为什么st把一个简单的通信协议写的这么复杂，其实我觉得单纯的通信部分是不复杂的，最难理解的可能在于实现page对齐部分，这部分对于初学者来讲很不友好，另外注释写的也不是很清晰。实际上对于入门来说，整个程序里面只要用到bytewrite这一个函数就够了。但是好处在于给了我们一种page对齐的算法，我认为这个算法本身的价值是大于i2c通信部分的。若以后换成其他只能按照block进行操作的存储器，该算法就派上用场了。嵌入式系统只是一个载体，算法和专业方向才是核心竞争力。</font>\n<!-- more -->\n\n![原程序中此处无需重启eeprom](error1.png)\n\n![原程序中此处少一个通信前的线路忙闲检测](error2.png)\n\n<font size=4>之前在淘宝的一家店铺买过几个at24c02的转接模块，结果发来的模块没问题，但是芯片不是24c02，而是24c32，后者比前者略贵，貌似有赚到。然而甘蔗没有两头儿甜，示例程序直接用上就行不通了。02和32有几个地方不大一样：一是page大小不一样，前者是8字节，后者是32字节，不过这一点并不需要修改程序（这里就体现了例程中page对齐算法的高明之处了）；二是容量不同，前者是256个字节，8-bit地址刚好够用，后者是4k字节，至少需要12-bit地址，这就导致原先的通信协议里，每次读写操作前都要先发送一个字节的内部word address行不通了，需要分开高低字节地址分两次发送，这个差异使得程序需要做一点调整。</font>\n\n![24c02的读写流程](one_byte.png)\n\n![24c32的读写流程](two_bytes.png)\n\n<font size=4>具体方法就是每次发送读写地址的时候，由原来的发送一个字节地址，改为先后发送两次地址，先高后低，这两次地址组合起来就是实际欲读写地址。</font>\n\n```c\n/******** @AT24C32 **************** 03_1 Send EEPROM Internal @HIGH Word Address *******************************/\t\n\tI2C_SendData(EEPROM_I2C, (WriteAddr / 256)); // Send EEPROM internal word address -- high 8-bit\n\ttimeout = I2C_EVCHK_TIMEOUT_FLAG;\n\twhile (!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) // Test EV8 and Clear\n\t{\n\t\tif((timeout--) == 0) return I2C_TIMEOUT_UserCallback(13);\n\t}\t\n/************************ 03_2 Send EEPROM Internal @LOW Word Address *******************************/\t\n\tI2C_SendData(EEPROM_I2C, (WriteAddr % 256)); // Send EEPROM internal word address -- low 8-bit\n\ttimeout = I2C_EVCHK_TIMEOUT_FLAG;\n\twhile (!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) // Test EV8 and Clear\n\t{\n\t\tif((timeout--) == 0) return I2C_TIMEOUT_UserCallback(8);\n\t}\n```\n\n<font size=4>将原程序中要读写的256个字节改为512个进行测试。</font>\n\n![串口显示](serial.png)","source":"_posts/at24c32.md","raw":"---\ntitle: stm32f10x通过i2c读写at24c32\ndate: 2021-08-25 23:27:51\nauthor: Epiapoq\ntags:\n    - I2C\n    - STM32F10xxx\n    - Embedded System\n---\n\n![注：指南者才有i2c的硬件例程，mini只有软件i2c](origin.png)\n\n<font size=4>看上去野火的例程来源于st官方，很多人对这个bsp库甚至stm32的i2c硬件都存在质疑，我在设计实验的时候没有发现软硬件存在什么大问题，程序上的一些小瑕疵是有，但瑕不掩瑜。同时还有人提出说为什么st把一个简单的通信协议写的这么复杂，其实我觉得单纯的通信部分是不复杂的，最难理解的可能在于实现page对齐部分，这部分对于初学者来讲很不友好，另外注释写的也不是很清晰。实际上对于入门来说，整个程序里面只要用到bytewrite这一个函数就够了。但是好处在于给了我们一种page对齐的算法，我认为这个算法本身的价值是大于i2c通信部分的。若以后换成其他只能按照block进行操作的存储器，该算法就派上用场了。嵌入式系统只是一个载体，算法和专业方向才是核心竞争力。</font>\n<!-- more -->\n\n![原程序中此处无需重启eeprom](error1.png)\n\n![原程序中此处少一个通信前的线路忙闲检测](error2.png)\n\n<font size=4>之前在淘宝的一家店铺买过几个at24c02的转接模块，结果发来的模块没问题，但是芯片不是24c02，而是24c32，后者比前者略贵，貌似有赚到。然而甘蔗没有两头儿甜，示例程序直接用上就行不通了。02和32有几个地方不大一样：一是page大小不一样，前者是8字节，后者是32字节，不过这一点并不需要修改程序（这里就体现了例程中page对齐算法的高明之处了）；二是容量不同，前者是256个字节，8-bit地址刚好够用，后者是4k字节，至少需要12-bit地址，这就导致原先的通信协议里，每次读写操作前都要先发送一个字节的内部word address行不通了，需要分开高低字节地址分两次发送，这个差异使得程序需要做一点调整。</font>\n\n![24c02的读写流程](one_byte.png)\n\n![24c32的读写流程](two_bytes.png)\n\n<font size=4>具体方法就是每次发送读写地址的时候，由原来的发送一个字节地址，改为先后发送两次地址，先高后低，这两次地址组合起来就是实际欲读写地址。</font>\n\n```c\n/******** @AT24C32 **************** 03_1 Send EEPROM Internal @HIGH Word Address *******************************/\t\n\tI2C_SendData(EEPROM_I2C, (WriteAddr / 256)); // Send EEPROM internal word address -- high 8-bit\n\ttimeout = I2C_EVCHK_TIMEOUT_FLAG;\n\twhile (!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) // Test EV8 and Clear\n\t{\n\t\tif((timeout--) == 0) return I2C_TIMEOUT_UserCallback(13);\n\t}\t\n/************************ 03_2 Send EEPROM Internal @LOW Word Address *******************************/\t\n\tI2C_SendData(EEPROM_I2C, (WriteAddr % 256)); // Send EEPROM internal word address -- low 8-bit\n\ttimeout = I2C_EVCHK_TIMEOUT_FLAG;\n\twhile (!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) // Test EV8 and Clear\n\t{\n\t\tif((timeout--) == 0) return I2C_TIMEOUT_UserCallback(8);\n\t}\n```\n\n<font size=4>将原程序中要读写的256个字节改为512个进行测试。</font>\n\n![串口显示](serial.png)","slug":"at24c32","published":1,"updated":"2021-08-25T16:43:07.842Z","_id":"cksrps5ij0000iol69uf0hpxl","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/2021/08/25/at24c32/origin.png\" alt=\"注：指南者才有i2c的硬件例程，mini只有软件i2c\"></p>\n<p><font size=\"4\">看上去野火的例程来源于st官方，很多人对这个bsp库甚至stm32的i2c硬件都存在质疑，我在设计实验的时候没有发现软硬件存在什么大问题，程序上的一些小瑕疵是有，但瑕不掩瑜。同时还有人提出说为什么st把一个简单的通信协议写的这么复杂，其实我觉得单纯的通信部分是不复杂的，最难理解的可能在于实现page对齐部分，这部分对于初学者来讲很不友好，另外注释写的也不是很清晰。实际上对于入门来说，整个程序里面只要用到bytewrite这一个函数就够了。但是好处在于给了我们一种page对齐的算法，我认为这个算法本身的价值是大于i2c通信部分的。若以后换成其他只能按照block进行操作的存储器，该算法就派上用场了。嵌入式系统只是一个载体，算法和专业方向才是核心竞争力。</font></p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2021/08/25/at24c32/error1.png\" alt=\"原程序中此处无需重启eeprom\"></p>\n<p><img src=\"/2021/08/25/at24c32/error2.png\" alt=\"原程序中此处少一个通信前的线路忙闲检测\"></p>\n<p><font size=\"4\">之前在淘宝的一家店铺买过几个at24c02的转接模块，结果发来的模块没问题，但是芯片不是24c02，而是24c32，后者比前者略贵，貌似有赚到。然而甘蔗没有两头儿甜，示例程序直接用上就行不通了。02和32有几个地方不大一样：一是page大小不一样，前者是8字节，后者是32字节，不过这一点并不需要修改程序（这里就体现了例程中page对齐算法的高明之处了）；二是容量不同，前者是256个字节，8-bit地址刚好够用，后者是4k字节，至少需要12-bit地址，这就导致原先的通信协议里，每次读写操作前都要先发送一个字节的内部word address行不通了，需要分开高低字节地址分两次发送，这个差异使得程序需要做一点调整。</font></p>\n<p><img src=\"/2021/08/25/at24c32/one_byte.png\" alt=\"24c02的读写流程\"></p>\n<p><img src=\"/2021/08/25/at24c32/two_bytes.png\" alt=\"24c32的读写流程\"></p>\n<p><font size=\"4\">具体方法就是每次发送读写地址的时候，由原来的发送一个字节地址，改为先后发送两次地址，先高后低，这两次地址组合起来就是实际欲读写地址。</font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******** @AT24C32 **************** 03_1 Send EEPROM Internal @HIGH Word Address *******************************/</span>\t</span><br><span class=\"line\">\tI2C_SendData(EEPROM_I2C, (WriteAddr / <span class=\"number\">256</span>)); <span class=\"comment\">// Send EEPROM internal word address -- high 8-bit</span></span><br><span class=\"line\">\ttimeout = I2C_EVCHK_TIMEOUT_FLAG;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) <span class=\"comment\">// Test EV8 and Clear</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((timeout--) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> I2C_TIMEOUT_UserCallback(<span class=\"number\">13</span>);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\"><span class=\"comment\">/************************ 03_2 Send EEPROM Internal @LOW Word Address *******************************/</span>\t</span><br><span class=\"line\">\tI2C_SendData(EEPROM_I2C, (WriteAddr % <span class=\"number\">256</span>)); <span class=\"comment\">// Send EEPROM internal word address -- low 8-bit</span></span><br><span class=\"line\">\ttimeout = I2C_EVCHK_TIMEOUT_FLAG;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) <span class=\"comment\">// Test EV8 and Clear</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((timeout--) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> I2C_TIMEOUT_UserCallback(<span class=\"number\">8</span>);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=\"4\">将原程序中要读写的256个字节改为512个进行测试。</font></p>\n<p><img src=\"/2021/08/25/at24c32/serial.png\" alt=\"串口显示\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2021/08/25/at24c32/origin.png\" alt=\"注：指南者才有i2c的硬件例程，mini只有软件i2c\"></p>\n<p><font size=\"4\">看上去野火的例程来源于st官方，很多人对这个bsp库甚至stm32的i2c硬件都存在质疑，我在设计实验的时候没有发现软硬件存在什么大问题，程序上的一些小瑕疵是有，但瑕不掩瑜。同时还有人提出说为什么st把一个简单的通信协议写的这么复杂，其实我觉得单纯的通信部分是不复杂的，最难理解的可能在于实现page对齐部分，这部分对于初学者来讲很不友好，另外注释写的也不是很清晰。实际上对于入门来说，整个程序里面只要用到bytewrite这一个函数就够了。但是好处在于给了我们一种page对齐的算法，我认为这个算法本身的价值是大于i2c通信部分的。若以后换成其他只能按照block进行操作的存储器，该算法就派上用场了。嵌入式系统只是一个载体，算法和专业方向才是核心竞争力。</font></p>","more":"<p><img src=\"/2021/08/25/at24c32/error1.png\" alt=\"原程序中此处无需重启eeprom\"></p>\n<p><img src=\"/2021/08/25/at24c32/error2.png\" alt=\"原程序中此处少一个通信前的线路忙闲检测\"></p>\n<p><font size=\"4\">之前在淘宝的一家店铺买过几个at24c02的转接模块，结果发来的模块没问题，但是芯片不是24c02，而是24c32，后者比前者略贵，貌似有赚到。然而甘蔗没有两头儿甜，示例程序直接用上就行不通了。02和32有几个地方不大一样：一是page大小不一样，前者是8字节，后者是32字节，不过这一点并不需要修改程序（这里就体现了例程中page对齐算法的高明之处了）；二是容量不同，前者是256个字节，8-bit地址刚好够用，后者是4k字节，至少需要12-bit地址，这就导致原先的通信协议里，每次读写操作前都要先发送一个字节的内部word address行不通了，需要分开高低字节地址分两次发送，这个差异使得程序需要做一点调整。</font></p>\n<p><img src=\"/2021/08/25/at24c32/one_byte.png\" alt=\"24c02的读写流程\"></p>\n<p><img src=\"/2021/08/25/at24c32/two_bytes.png\" alt=\"24c32的读写流程\"></p>\n<p><font size=\"4\">具体方法就是每次发送读写地址的时候，由原来的发送一个字节地址，改为先后发送两次地址，先高后低，这两次地址组合起来就是实际欲读写地址。</font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******** @AT24C32 **************** 03_1 Send EEPROM Internal @HIGH Word Address *******************************/</span>\t</span><br><span class=\"line\">\tI2C_SendData(EEPROM_I2C, (WriteAddr / <span class=\"number\">256</span>)); <span class=\"comment\">// Send EEPROM internal word address -- high 8-bit</span></span><br><span class=\"line\">\ttimeout = I2C_EVCHK_TIMEOUT_FLAG;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) <span class=\"comment\">// Test EV8 and Clear</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((timeout--) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> I2C_TIMEOUT_UserCallback(<span class=\"number\">13</span>);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\"><span class=\"comment\">/************************ 03_2 Send EEPROM Internal @LOW Word Address *******************************/</span>\t</span><br><span class=\"line\">\tI2C_SendData(EEPROM_I2C, (WriteAddr % <span class=\"number\">256</span>)); <span class=\"comment\">// Send EEPROM internal word address -- low 8-bit</span></span><br><span class=\"line\">\ttimeout = I2C_EVCHK_TIMEOUT_FLAG;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!I2C_CheckEvent(EEPROM_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) <span class=\"comment\">// Test EV8 and Clear</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((timeout--) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> I2C_TIMEOUT_UserCallback(<span class=\"number\">8</span>);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=\"4\">将原程序中要读写的256个字节改为512个进行测试。</font></p>\n<p><img src=\"/2021/08/25/at24c32/serial.png\" alt=\"串口显示\"></p>"},{"title":"Linux C Programming -- nano editor","date":"2021-10-19T05:02:51.000Z","author":"Epiapoq","_content":"\n![nano editor](nano.png)\n <!-- more -->\n\n <font size=4>\n \n To program using C in linux, first of all, install Ubuntu in Windows. (https://docs.microsoft.com/zh-cn/windows/wsl/install-manual)\n\nThen replace with domestic mirror source.\n\nNext, install \"gdb\".\n\n![Debug using gdb](gdb.png)\n\nLast change the default settings of \"nano\" editor.\n\ni. change tabsize: edit \"nanorc\" file (.\\rootfs\\etc\\nanorc)\n\n![change tabsize from 8 to 4](nanorc.png)\n\nii. change color of comment (.\\rootfs\\usr\\share\\nano\\c.nanorc)\n\n![change color of comment](c.nanorc.png)\n\nRecommend two books:\n\nA good Introductory book of C (linux)\n\n![Linux C编程一站式学习](linux_c.png)\n\nAnother good Introductory book of C (8051, but not only for 8051)\n\n![时间触发嵌入式系统设计模式](8051_c.png)\n\n</font>","source":"_posts/linux-c-nano.md","raw":"---\ntitle: Linux C Programming -- nano editor\ndate: 2021-10-19 13:02:51\nauthor: Epiapoq\ntags:\n    - Linux\n    - C Programming\n---\n\n![nano editor](nano.png)\n <!-- more -->\n\n <font size=4>\n \n To program using C in linux, first of all, install Ubuntu in Windows. (https://docs.microsoft.com/zh-cn/windows/wsl/install-manual)\n\nThen replace with domestic mirror source.\n\nNext, install \"gdb\".\n\n![Debug using gdb](gdb.png)\n\nLast change the default settings of \"nano\" editor.\n\ni. change tabsize: edit \"nanorc\" file (.\\rootfs\\etc\\nanorc)\n\n![change tabsize from 8 to 4](nanorc.png)\n\nii. change color of comment (.\\rootfs\\usr\\share\\nano\\c.nanorc)\n\n![change color of comment](c.nanorc.png)\n\nRecommend two books:\n\nA good Introductory book of C (linux)\n\n![Linux C编程一站式学习](linux_c.png)\n\nAnother good Introductory book of C (8051, but not only for 8051)\n\n![时间触发嵌入式系统设计模式](8051_c.png)\n\n</font>","slug":"linux-c-nano","published":1,"updated":"2021-10-19T07:23:02.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuxrg8m40000rkl6btyl74up","content":"<p><img src=\"/2021/10/19/linux-c-nano/nano.png\" alt=\"nano editor\"><br> <span id=\"more\"></span></p>\n <font size=\"4\">\n \n To program using C in linux, first of all, install Ubuntu in Windows. (https://docs.microsoft.com/zh-cn/windows/wsl/install-manual)\n\n<p>Then replace with domestic mirror source.</p>\n<p>Next, install “gdb”.</p>\n<p><img src=\"/2021/10/19/linux-c-nano/gdb.png\" alt=\"Debug using gdb\"></p>\n<p>Last change the default settings of “nano” editor.</p>\n<p>i. change tabsize: edit “nanorc” file (.\\rootfs\\etc\\nanorc)</p>\n<p><img src=\"/2021/10/19/linux-c-nano/nanorc.png\" alt=\"change tabsize from 8 to 4\"></p>\n<p>ii. change color of comment (.\\rootfs\\usr\\share\\nano\\c.nanorc)</p>\n<p><img src=\"/2021/10/19/linux-c-nano/c.nanorc.png\" alt=\"change color of comment\"></p>\n<p>Recommend two books:</p>\n<p>A good Introductory book of C (linux)</p>\n<p><img src=\"/2021/10/19/linux-c-nano/linux_c.png\" alt=\"Linux C编程一站式学习\"></p>\n<p>Another good Introductory book of C (8051, but not only for 8051)</p>\n<p><img src=\"/2021/10/19/linux-c-nano/8051_c.png\" alt=\"时间触发嵌入式系统设计模式\"></p>\n</font>","site":{"data":{}},"excerpt":"<p><img src=\"/2021/10/19/linux-c-nano/nano.png\" alt=\"nano editor\"><br></p>","more":"<p></p>\n <font size=\"4\">\n \n To program using C in linux, first of all, install Ubuntu in Windows. (https://docs.microsoft.com/zh-cn/windows/wsl/install-manual)\n\n<p>Then replace with domestic mirror source.</p>\n<p>Next, install “gdb”.</p>\n<p><img src=\"/2021/10/19/linux-c-nano/gdb.png\" alt=\"Debug using gdb\"></p>\n<p>Last change the default settings of “nano” editor.</p>\n<p>i. change tabsize: edit “nanorc” file (.\\rootfs\\etc\\nanorc)</p>\n<p><img src=\"/2021/10/19/linux-c-nano/nanorc.png\" alt=\"change tabsize from 8 to 4\"></p>\n<p>ii. change color of comment (.\\rootfs\\usr\\share\\nano\\c.nanorc)</p>\n<p><img src=\"/2021/10/19/linux-c-nano/c.nanorc.png\" alt=\"change color of comment\"></p>\n<p>Recommend two books:</p>\n<p>A good Introductory book of C (linux)</p>\n<p><img src=\"/2021/10/19/linux-c-nano/linux_c.png\" alt=\"Linux C编程一站式学习\"></p>\n<p>Another good Introductory book of C (8051, but not only for 8051)</p>\n<p><img src=\"/2021/10/19/linux-c-nano/8051_c.png\" alt=\"时间触发嵌入式系统设计模式\"></p>\n</font>"},{"title":"如何更改nano的默认字体（How to set nano default font）","date":"2021-11-06T15:35:18.000Z","author":"Epiapoq","_content":"\n![Create CodePage](regedit.png)\n\n<font size=4>在Linux Shell（或PowerShell、cmd）中启动nano，即便更改了字体的默认值（见下图），在重新打开后仍旧会回到系统初始设定，要解决这个问题需要更改注册表，即在注册表中上图所在位置添加CodePage。(参考：https://zhuanlan.zhihu.com/p/265192449)</font>\n\n![Attribute Setting](attributes.png)","source":"_posts/nano-font.md","raw":"---\ntitle: 如何更改nano的默认字体（How to set nano default font）\ndate: 2021-11-06 23:35:18\nauthor: Epiapoq\ntags:\n    - Linux\n    - C Programming\n---\n\n![Create CodePage](regedit.png)\n\n<font size=4>在Linux Shell（或PowerShell、cmd）中启动nano，即便更改了字体的默认值（见下图），在重新打开后仍旧会回到系统初始设定，要解决这个问题需要更改注册表，即在注册表中上图所在位置添加CodePage。(参考：https://zhuanlan.zhihu.com/p/265192449)</font>\n\n![Attribute Setting](attributes.png)","slug":"nano-font","published":1,"updated":"2021-11-06T15:55:00.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvnzmvq20000a8l639c6d3u4","content":"<p><img src=\"/2021/11/06/nano-font/regedit.png\" alt=\"Create CodePage\"></p>\n<p><font size=\"4\">在Linux Shell（或PowerShell、cmd）中启动nano，即便更改了字体的默认值（见下图），在重新打开后仍旧会回到系统初始设定，要解决这个问题需要更改注册表，即在注册表中上图所在位置添加CodePage。(参考：<a href=\"https://zhuanlan.zhihu.com/p/265192449\">https://zhuanlan.zhihu.com/p/265192449</a>)</font></p>\n<p><img src=\"/2021/11/06/nano-font/attributes.png\" alt=\"Attribute Setting\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2021/11/06/nano-font/regedit.png\" alt=\"Create CodePage\"></p>\n<p><font size=\"4\">在Linux Shell（或PowerShell、cmd）中启动nano，即便更改了字体的默认值（见下图），在重新打开后仍旧会回到系统初始设定，要解决这个问题需要更改注册表，即在注册表中上图所在位置添加CodePage。(参考：<a href=\"https://zhuanlan.zhihu.com/p/265192449\">https://zhuanlan.zhihu.com/p/265192449</a>)</font></p>\n<p><img src=\"/2021/11/06/nano-font/attributes.png\" alt=\"Attribute Setting\"></p>\n"},{"title":"电路和电子学大纲见微","date":"2021-11-20T17:22:27.000Z","author":"Epiapoq","_content":"\n<font size=4>理论部分</font>\n\n![](theory_1.png)\n\n<!-- more -->\n\n![](theory_2.png)\n\n![](theory_3.png)\n\n<font size=4>实验部分</font>\n\n![](lab_1.png)\n\n![](lab_2.png)\n\n![](lab_3.png)\n","source":"_posts/glimpse.md","raw":"---\ntitle: 电路和电子学大纲见微\ndate: 2021-11-21 01:22:27\nauthor: Epiapoq\ntags: \n    - Curriculum Integration\n---\n\n<font size=4>理论部分</font>\n\n![](theory_1.png)\n\n<!-- more -->\n\n![](theory_2.png)\n\n![](theory_3.png)\n\n<font size=4>实验部分</font>\n\n![](lab_1.png)\n\n![](lab_2.png)\n\n![](lab_3.png)\n","slug":"glimpse","published":1,"updated":"2021-11-20T17:53:15.465Z","_id":"ckw83wxbb00008wl60tts3z8x","comments":1,"layout":"post","photos":[],"link":"","content":"<p><font size=\"4\">理论部分</font></p>\n<p><img src=\"/2021/11/21/glimpse/theory_1.png\"></p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2021/11/21/glimpse/theory_2.png\"></p>\n<p><img src=\"/2021/11/21/glimpse/theory_3.png\"></p>\n<p><font size=\"4\">实验部分</font></p>\n<p><img src=\"/2021/11/21/glimpse/lab_1.png\"></p>\n<p><img src=\"/2021/11/21/glimpse/lab_2.png\"></p>\n<p><img src=\"/2021/11/21/glimpse/lab_3.png\"></p>\n","site":{"data":{}},"excerpt":"<p><font size=\"4\">理论部分</font></p>\n<p><img src=\"/2021/11/21/glimpse/theory_1.png\"></p>","more":"<p><img src=\"/2021/11/21/glimpse/theory_2.png\"></p>\n<p><img src=\"/2021/11/21/glimpse/theory_3.png\"></p>\n<p><font size=\"4\">实验部分</font></p>\n<p><img src=\"/2021/11/21/glimpse/lab_1.png\"></p>\n<p><img src=\"/2021/11/21/glimpse/lab_2.png\"></p>\n<p><img src=\"/2021/11/21/glimpse/lab_3.png\"></p>"}],"PostAsset":[{"_id":"source/_posts/compim/1.png","slug":"1.png","post":"cknd0c0960001rwl6d1k5dt0s","modified":0,"renderable":0},{"_id":"source/_posts/compim/2.png","slug":"2.png","post":"cknd0c0960001rwl6d1k5dt0s","modified":0,"renderable":0},{"_id":"source/_posts/compim/3.png","slug":"3.png","post":"cknd0c0960001rwl6d1k5dt0s","modified":0,"renderable":0},{"_id":"source/_posts/compim/4.png","slug":"4.png","post":"cknd0c0960001rwl6d1k5dt0s","modified":0,"renderable":0},{"_id":"source/_posts/compim/5.png","slug":"5.png","post":"cknd0c0960001rwl6d1k5dt0s","modified":0,"renderable":0},{"_id":"source/_posts/compim/6.gif","slug":"6.gif","post":"cknd0c0960001rwl6d1k5dt0s","modified":0,"renderable":0},{"_id":"source/_posts/flow/flow.png","slug":"flow.png","post":"cknd0c09e0004rwl616bl5mg2","modified":0,"renderable":0},{"_id":"source/_posts/knowledge/flat.png","slug":"flat.png","post":"cknd0c09g0005rwl6a28wgc03","modified":0,"renderable":0},{"_id":"source/_posts/knowledge/sine.png","slug":"sine.png","post":"cknd0c09g0005rwl6a28wgc03","modified":0,"renderable":0},{"_id":"source/_posts/mux-demux/data_routing.jpg","slug":"data_routing.jpg","post":"cknd0c09i0006rwl6cft29hyy","modified":0,"renderable":0},{"_id":"source/_posts/mux-demux/mux_demux.gif","slug":"mux_demux.gif","post":"cknd0c09i0006rwl6cft29hyy","modified":0,"renderable":0},{"_id":"source/_posts/mux-demux/mux_demux.png","slug":"mux_demux.png","post":"cknd0c09i0006rwl6cft29hyy","modified":0,"renderable":0},{"_id":"source/_posts/mux-demux/spdt.png","slug":"spdt.png","post":"cknd0c09i0006rwl6cft29hyy","modified":0,"renderable":0},{"_id":"source/_posts/project-process/3.3v.png","slug":"3.3v.png","post":"ckrn938ox000058l6c349e5m5","modified":0,"renderable":0},{"_id":"source/_posts/project-process/5v.png","slug":"5v.png","post":"ckrn938ox000058l6c349e5m5","modified":0,"renderable":0},{"_id":"source/_posts/project-process/74lvc4245.png","slug":"74lvc4245.png","post":"ckrn938ox000058l6c349e5m5","modified":0,"renderable":0},{"_id":"source/_posts/project-process/compatible.png","slug":"compatible.png","post":"ckrn938ox000058l6c349e5m5","modified":0,"renderable":0},{"_id":"source/_posts/project-process/datasheet_3.3v.png","slug":"datasheet_3.3v.png","post":"ckrn938ox000058l6c349e5m5","modified":0,"renderable":0},{"_id":"source/_posts/project-process/datasheet_5v.png","slug":"datasheet_5v.png","post":"ckrn938ox000058l6c349e5m5","modified":0,"renderable":0},{"_id":"source/_posts/project-process/interface.png","slug":"interface.png","post":"ckrn938ox000058l6c349e5m5","modified":0,"renderable":0},{"_id":"source/_posts/project-process/step-mxo2.png","slug":"step-mxo2.png","post":"ckrn938ox000058l6c349e5m5","modified":0,"renderable":0},{"_id":"source/_posts/project-process/stm32f10x.png","slug":"stm32f10x.png","post":"ckrn938ox000058l6c349e5m5","modified":0,"renderable":0},{"_id":"source/_posts/AHB-Addressing/AHB_stm32f10x.h.png","slug":"AHB_stm32f10x.h.png","post":"ckrooeptb00005ol66582foa6","modified":0,"renderable":0},{"_id":"source/_posts/AHB-Addressing/SDIO_addr.png","slug":"SDIO_addr.png","post":"ckrooeptb00005ol66582foa6","modified":0,"renderable":0},{"_id":"source/_posts/AHB-Addressing/SDIO_arch.png","slug":"SDIO_arch.png","post":"ckrooeptb00005ol66582foa6","modified":0,"renderable":0},{"_id":"source/_posts/AHB-Addressing/SDIO_stm32f10x.h.png","slug":"SDIO_stm32f10x.h.png","post":"ckrooeptb00005ol66582foa6","modified":0,"renderable":0},{"_id":"source/_posts/ToggleBits/fire's.png","slug":"fire's.png","post":"cks702j580000o0l68hnndl78","modified":0,"renderable":0},{"_id":"source/_posts/ToggleBits/main.png","slug":"main.png","post":"cks702j580000o0l68hnndl78","modified":0,"renderable":0},{"_id":"source/_posts/ToggleBits/simulation.gif","slug":"simulation.gif","post":"cks702j580000o0l68hnndl78","modified":0,"renderable":0},{"_id":"source/_posts/ToggleBits/trans_1.png","slug":"trans_1.png","post":"cks702j580000o0l68hnndl78","modified":0,"renderable":0},{"_id":"source/_posts/ToggleBits/trans_2.png","slug":"trans_2.png","post":"cks702j580000o0l68hnndl78","modified":0,"renderable":0},{"_id":"source/_posts/ToggleBits/trans_3.png","slug":"trans_3.png","post":"cks702j580000o0l68hnndl78","modified":0,"renderable":0},{"_id":"source/_posts/nvic/8051_jmp.png","slug":"8051_jmp.png","post":"cksc18en70000t0l6bqvm62pw","modified":0,"renderable":0},{"_id":"source/_posts/nvic/8051_vector.png","slug":"8051_vector.png","post":"cksc18en70000t0l6bqvm62pw","modified":0,"renderable":0},{"_id":"source/_posts/nvic/EXTI_map.png","slug":"EXTI_map.png","post":"cksc18en70000t0l6bqvm62pw","modified":0,"renderable":0},{"_id":"source/_posts/nvic/IRQHandler_define.png","slug":"IRQHandler_define.png","post":"cksc18en70000t0l6bqvm62pw","modified":0,"renderable":0},{"_id":"source/_posts/nvic/PriorityConfig.png","slug":"PriorityConfig.png","post":"cksc18en70000t0l6bqvm62pw","modified":0,"renderable":0},{"_id":"source/_posts/nvic/PriorityGroupConfig.png","slug":"PriorityGroupConfig.png","post":"cksc18en70000t0l6bqvm62pw","modified":0,"renderable":0},{"_id":"source/_posts/nvic/PriorityGroupConfig_CM3.png","slug":"PriorityGroupConfig_CM3.png","post":"cksc18en70000t0l6bqvm62pw","modified":0,"renderable":0},{"_id":"source/_posts/nvic/Vector_Map.png","slug":"Vector_Map.png","post":"cksc18en70000t0l6bqvm62pw","modified":0,"renderable":0},{"_id":"source/_posts/nvic/nested.gif","slug":"nested.gif","post":"cksc18en70000t0l6bqvm62pw","modified":0,"renderable":0},{"_id":"source/_posts/fritzing-dll-error/adapter.png","slug":"adapter.png","post":"cksjv8u0r000048l6c04scgsx","modified":0,"renderable":0},{"_id":"source/_posts/fritzing-dll-error/adapter_modified.png","slug":"adapter_modified.png","post":"cksjv8u0r000048l6c04scgsx","modified":0,"renderable":0},{"_id":"source/_posts/fritzing-dll-error/error.png","slug":"error.png","post":"cksjv8u0r000048l6c04scgsx","modified":0,"renderable":0},{"_id":"source/_posts/reset-run/Enable.png","slug":"Enable.png","post":"cksjvuo5n0000jgl618b5a9hj","modified":0,"renderable":0},{"_id":"source/_posts/remapping/4_channels.png","slug":"4_channels.png","post":"cksk574y0000004l67erxdg9t","modified":0,"renderable":0},{"_id":"source/_posts/remapping/connections.png","slug":"connections.png","post":"cksk574y0000004l67erxdg9t","modified":0,"renderable":0},{"_id":"source/_posts/remapping/remap_func.png","slug":"remap_func.png","post":"cksk574y0000004l67erxdg9t","modified":0,"renderable":0},{"_id":"source/_posts/remapping/table.png","slug":"table.png","post":"cksk574y0000004l67erxdg9t","modified":0,"renderable":0},{"_id":"source/_posts/remapping/unsoldered.png","slug":"unsoldered.png","post":"cksk574y0000004l67erxdg9t","modified":0,"renderable":0},{"_id":"source/_posts/at24c32/error1.png","slug":"error1.png","post":"cksrps5ij0000iol69uf0hpxl","modified":0,"renderable":0},{"_id":"source/_posts/at24c32/error2.png","slug":"error2.png","post":"cksrps5ij0000iol69uf0hpxl","modified":0,"renderable":0},{"_id":"source/_posts/at24c32/one_byte.png","slug":"one_byte.png","post":"cksrps5ij0000iol69uf0hpxl","modified":0,"renderable":0},{"_id":"source/_posts/at24c32/origin.png","slug":"origin.png","post":"cksrps5ij0000iol69uf0hpxl","modified":0,"renderable":0},{"_id":"source/_posts/at24c32/serial.png","slug":"serial.png","post":"cksrps5ij0000iol69uf0hpxl","modified":0,"renderable":0},{"_id":"source/_posts/at24c32/two_bytes.png","slug":"two_bytes.png","post":"cksrps5ij0000iol69uf0hpxl","modified":0,"renderable":0},{"_id":"source/_posts/linux-c-nano/8051_c.png","slug":"8051_c.png","post":"ckuxrg8m40000rkl6btyl74up","modified":0,"renderable":0},{"_id":"source/_posts/linux-c-nano/c.nanorc.png","slug":"c.nanorc.png","post":"ckuxrg8m40000rkl6btyl74up","modified":0,"renderable":0},{"_id":"source/_posts/linux-c-nano/gdb.png","slug":"gdb.png","post":"ckuxrg8m40000rkl6btyl74up","modified":0,"renderable":0},{"_id":"source/_posts/linux-c-nano/linux_c.png","slug":"linux_c.png","post":"ckuxrg8m40000rkl6btyl74up","modified":0,"renderable":0},{"_id":"source/_posts/linux-c-nano/nano.png","slug":"nano.png","post":"ckuxrg8m40000rkl6btyl74up","modified":0,"renderable":0},{"_id":"source/_posts/linux-c-nano/nanorc.png","slug":"nanorc.png","post":"ckuxrg8m40000rkl6btyl74up","modified":0,"renderable":0},{"_id":"source/_posts/nano-font/attributes.png","slug":"attributes.png","post":"ckvnzmvq20000a8l639c6d3u4","modified":0,"renderable":0},{"_id":"source/_posts/nano-font/regedit.png","slug":"regedit.png","post":"ckvnzmvq20000a8l639c6d3u4","modified":0,"renderable":0},{"_id":"source/_posts/glimpse/lab_1.png","slug":"lab_1.png","post":"ckw83wxbb00008wl60tts3z8x","modified":0,"renderable":0},{"_id":"source/_posts/glimpse/lab_2.png","slug":"lab_2.png","post":"ckw83wxbb00008wl60tts3z8x","modified":0,"renderable":0},{"_id":"source/_posts/glimpse/lab_3.png","slug":"lab_3.png","post":"ckw83wxbb00008wl60tts3z8x","modified":0,"renderable":0},{"_id":"source/_posts/glimpse/theory_1.png","slug":"theory_1.png","post":"ckw83wxbb00008wl60tts3z8x","modified":0,"renderable":0},{"_id":"source/_posts/glimpse/theory_2.png","slug":"theory_2.png","post":"ckw83wxbb00008wl60tts3z8x","modified":0,"renderable":0},{"_id":"source/_posts/glimpse/theory_3.png","slug":"theory_3.png","post":"ckw83wxbb00008wl60tts3z8x","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cknd0c0960001rwl6d1k5dt0s","tag_id":"cknd0c09c0003rwl6hy8fap9q","_id":"cknd0c09o000brwl64ue83t6y"},{"post_id":"cknd0c0960001rwl6d1k5dt0s","tag_id":"cknd0c09j0007rwl6bllk9jnn","_id":"cknd0c09q000crwl6gbyxdakc"},{"post_id":"cknd0c0960001rwl6d1k5dt0s","tag_id":"cknd0c09k0008rwl6f2v38yo9","_id":"cknd0c09q000erwl6dx272jz3"},{"post_id":"cknd0c0960001rwl6d1k5dt0s","tag_id":"cknd0c09k0009rwl6gi7phmrg","_id":"cknd0c09r000frwl67ldj4mln"},{"post_id":"cknd0c09e0004rwl616bl5mg2","tag_id":"cknd0c09k0009rwl6gi7phmrg","_id":"cknd0c09r000hrwl6g8js1ccm"},{"post_id":"cknd0c09g0005rwl6a28wgc03","tag_id":"cknd0c09k0009rwl6gi7phmrg","_id":"cknd0c09r000irwl6gyxkcf64"},{"post_id":"cknd0c09i0006rwl6cft29hyy","tag_id":"cknd0c09c0003rwl6hy8fap9q","_id":"cknd0c09t000lrwl628m10hf6"},{"post_id":"cknd0c09i0006rwl6cft29hyy","tag_id":"cknd0c09j0007rwl6bllk9jnn","_id":"cknd0c09t000mrwl6dg7174zv"},{"post_id":"cknd0c09i0006rwl6cft29hyy","tag_id":"cknd0c09k0008rwl6f2v38yo9","_id":"cknd0c09t000nrwl6d9s94a43"},{"post_id":"cknd0c09i0006rwl6cft29hyy","tag_id":"cknd0c09k0009rwl6gi7phmrg","_id":"cknd0c09t000orwl6blzy0miz"},{"post_id":"ckrn938ox000058l6c349e5m5","tag_id":"ckrn938p1000158l60wkd3odx","_id":"ckrn938p5000258l6d4b5gltq"},{"post_id":"ckrn938ox000058l6c349e5m5","tag_id":"cknd0c09k0008rwl6f2v38yo9","_id":"ckrn938p5000358l6c79kcpvd"},{"post_id":"ckrn938ox000058l6c349e5m5","tag_id":"cknd0c09k0009rwl6gi7phmrg","_id":"ckrn938p5000458l6gpbdavz4"},{"post_id":"ckrooeptb00005ol66582foa6","tag_id":"ckrooepti00015ol63b4o08tk","_id":"ckrooeptn00035ol6652qeozy"},{"post_id":"ckrooeptb00005ol66582foa6","tag_id":"ckrooeptm00025ol6gvmk06zm","_id":"ckrooeptn00045ol6bggtddlt"},{"post_id":"cks702j580000o0l68hnndl78","tag_id":"ckrooepti00015ol63b4o08tk","_id":"cks702j5f0001o0l67508ev95"},{"post_id":"cks702j580000o0l68hnndl78","tag_id":"ckrooeptm00025ol6gvmk06zm","_id":"cks702j5g0002o0l6ftt9dl7k"},{"post_id":"cksc18en70000t0l6bqvm62pw","tag_id":"ckrooepti00015ol63b4o08tk","_id":"cksc18ene0001t0l6hu3c2d3u"},{"post_id":"cksc18en70000t0l6bqvm62pw","tag_id":"ckrooeptm00025ol6gvmk06zm","_id":"cksc18ene0002t0l6a5p59xxx"},{"post_id":"cksjv8u0r000048l6c04scgsx","tag_id":"cksjv8u0y000148l693xdci4b","_id":"cksjv8u13000248l69dvb8evy"},{"post_id":"cksjv8u0r000048l6c04scgsx","tag_id":"ckrooepti00015ol63b4o08tk","_id":"cksjv8u13000348l6a8820t8y"},{"post_id":"cksjv8u0r000048l6c04scgsx","tag_id":"ckrooeptm00025ol6gvmk06zm","_id":"cksjv8u13000448l6fu923oul"},{"post_id":"cksjvuo5n0000jgl618b5a9hj","tag_id":"cksjvuo5s0001jgl6bomt34us","_id":"cksjvuo5y0002jgl68ot60q6b"},{"post_id":"cksjvuo5n0000jgl618b5a9hj","tag_id":"ckrooepti00015ol63b4o08tk","_id":"cksjvuo5y0003jgl6hw3x7nc3"},{"post_id":"cksjvuo5n0000jgl618b5a9hj","tag_id":"ckrooeptm00025ol6gvmk06zm","_id":"cksjvuo5y0004jgl61i5m549r"},{"post_id":"cksjv8u0r000048l6c04scgsx","tag_id":"cknd0c09c0003rwl6hy8fap9q","_id":"cksjvvqh30000mgl63es4f0bw"},{"post_id":"cksk574y0000004l67erxdg9t","tag_id":"cksk574y7000104l6ho4m641j","_id":"cksk574ye000204l6g8pd4ibb"},{"post_id":"cksk574y0000004l67erxdg9t","tag_id":"ckrooepti00015ol63b4o08tk","_id":"cksk574ye000304l62kpb7yoj"},{"post_id":"cksk574y0000004l67erxdg9t","tag_id":"ckrooeptm00025ol6gvmk06zm","_id":"cksk574ye000404l6e1zyfq3k"},{"post_id":"cksrps5ij0000iol69uf0hpxl","tag_id":"cksrps5ip0001iol6fdhu4107","_id":"cksrps5iv0002iol69ur6cll1"},{"post_id":"cksrps5ij0000iol69uf0hpxl","tag_id":"ckrooepti00015ol63b4o08tk","_id":"cksrps5iv0003iol66bued42n"},{"post_id":"cksrps5ij0000iol69uf0hpxl","tag_id":"ckrooeptm00025ol6gvmk06zm","_id":"cksrps5iv0004iol6doxqhyv0"},{"post_id":"ckuxrg8m40000rkl6btyl74up","tag_id":"ckuxrg8mc0001rkl65zst53as","_id":"ckuxrg8mj0003rkl63l1p4n2l"},{"post_id":"ckuxrg8m40000rkl6btyl74up","tag_id":"ckuxrg8mi0002rkl66nmac48x","_id":"ckuxrg8mj0004rkl6d0urffo7"},{"post_id":"ckvnzmvq20000a8l639c6d3u4","tag_id":"ckuxrg8mc0001rkl65zst53as","_id":"ckvnzmvqa0001a8l6ewi89a32"},{"post_id":"ckvnzmvq20000a8l639c6d3u4","tag_id":"ckuxrg8mi0002rkl66nmac48x","_id":"ckvnzmvqa0002a8l61f4o1nh1"},{"post_id":"ckw83wxbb00008wl60tts3z8x","tag_id":"cknd0c09k0009rwl6gi7phmrg","_id":"ckw83wxbj00018wl65t6l2kp3"}],"Tag":[{"name":"Arduino","_id":"cknd0c09c0003rwl6hy8fap9q"},{"name":"Proteus","_id":"cknd0c09j0007rwl6bllk9jnn"},{"name":"Digital Design","_id":"cknd0c09k0008rwl6f2v38yo9"},{"name":"Curriculum Integration","_id":"cknd0c09k0009rwl6gi7phmrg"},{"name":"Pro^3","_id":"ckrn938p1000158l60wkd3odx"},{"name":"STM32F10xxx","_id":"ckrooepti00015ol63b4o08tk"},{"name":"Embedded System","_id":"ckrooeptm00025ol6gvmk06zm"},{"name":"Fritzing","_id":"cksjv8u0y000148l693xdci4b"},{"name":"MDK","_id":"cksjvuo5s0001jgl6bomt34us"},{"name":"Nucleo","_id":"cksk574y7000104l6ho4m641j"},{"name":"I2C","_id":"cksrps5ip0001iol6fdhu4107"},{"name":"Linux","_id":"ckuxrg8mc0001rkl65zst53as"},{"name":"C Programming","_id":"ckuxrg8mi0002rkl66nmac48x"}]}}